ssh://ubuntu@ec2-54-80-183-71.compute-1.amazonaws.com:22/home/ubuntu/miniconda3/envs/gridd/bin/python3.8 -u /home/ubuntu/EmoraAll/GRIDD/intcore_chatbot_server.py
device (cpu/cuda:0/cuda:1/...) >>>

debug (n/y) >>>

checking kb
checking templates
checking rules
	work_of_art_ner (GRIDD/resources/kg_files/rules/movies.kg)
IntelligenceCore load: 17.54
checking kb
NLU load: 12.10
User: hello there
hello there
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	You know , I don't think we have met before . What would you like me to call you ? (s: 0.55, pr: 0.50)


0.000083: next turn
0.000019: sentence caser
0.113183: elit
0.052608: parse2logic
  0.000619: facts graph types
  0.001079: convert facts graph
    0.000220: to digraph
    0.000823: flatten types (45 concepts)
    0.000023: quantities
  0.000022: process dynamic rules
  0.046405: match
    0.046308: match
      0.000122: querygen
      0.007217: creating graph tensor (53 nodes, 161 edges)
        0.001034: setup
        0.001720: key tensor
        0.000430: target tensor
        0.003980: edge tensor
      0.000073: initializing solutions matrix
      0.038695: loop
      0.000014: postprocessing (MAX MEMORY: 0.002GB)
  0.000463: postprocess solutions
0.000038: multiword mentions
0.000012: ner mentions
0.002015: mention bridge
0.000239: merge bridge
0.003465: knowledge pull
0.000040: reference id
0.003421: reference infer
  0.001179: facts graph types
  0.002088: convert facts graph
    0.000276: to digraph
    0.001771: flatten types (62 concepts)
    0.000028: quantities
  0.000020: process dynamic rules
  0.000035: match
  0.000009: postprocess solutions
0.000011: reference resolution
0.003658: fragment resolution
  0.000078: identify previous emora questions
  0.003565: sal
0.040031: dialogue infer
  0.001172: facts graph types
  0.002023: convert facts graph
    0.000263: to digraph
    0.001721: flatten types (62 concepts)
    0.000027: quantities
  0.000019: process dynamic rules
  0.036620: match
    0.036568: match
      0.000277: querygen
      0.018422: creating graph tensor (128 nodes, 446 edges)
        0.002484: setup
        0.008205: key tensor
        0.000749: target tensor
        0.006888: edge tensor
      0.000077: initializing solutions matrix
      0.017610: loop
      0.000014: postprocessing (MAX MEMORY: 0.010GB)
  0.000104: postprocess solutions
0.009122: apply inferences
  0.001105: apply
  0.001876: update types
  0.000045: operate
  0.006080: sal
0.000550: reference id 2
0.028036: reference infer 2
  0.001842: facts graph types
  0.003035: convert facts graph
    0.000460: to digraph
    0.002522: flatten types (98 concepts)
    0.000038: quantities
  0.000805: process dynamic rules
  0.022229: match
    0.022180: match
      0.001283: querygen
      0.012910: creating graph tensor (179 nodes, 628 edges)
        0.003484: setup
        0.001187: key tensor
        0.001292: target tensor
        0.006803: edge tensor
      0.000080: initializing solutions matrix
      0.007730: loop
      0.000021: postprocessing (MAX MEMORY: 0.019GB)
  0.000008: postprocess solutions
0.000011: reference resolution 2
0.006181: fragment resolution 2
  0.000118: identify previous emora questions
  0.006048: sal
0.082733: dialogue infer 2
  0.001815: facts graph types
  0.003228: convert facts graph
    0.000435: to digraph
    0.002743: flatten types (98 concepts)
    0.000037: quantities
  0.000020: process dynamic rules
  0.077360: match
    0.077310: match
      0.000388: querygen
      0.029837: creating graph tensor (198 nodes, 704 edges)
        0.003682: setup
        0.014031: key tensor
        0.001028: target tensor
        0.010929: edge tensor
      0.000082: initializing solutions matrix
      0.046809: loop
      0.000015: postprocessing (MAX MEMORY: 0.024GB)
  0.000113: postprocess solutions
0.006504: apply inferences 2
  0.000311: apply
  0.000160: update types
  0.000046: operate
  0.005971: sal
0.002864: prepare template nlg
0.072641: template infer
  0.001812: facts graph types
  0.003258: convert facts graph
    0.000478: to digraph
    0.002730: flatten types (98 concepts)
    0.000037: quantities
  0.000021: process dynamic rules
  0.066954: match
    0.066896: match
      0.000396: querygen
      0.014730: creating graph tensor (198 nodes, 704 edges)
        0.003975: setup
        0.002659: key tensor
        0.001028: target tensor
        0.006901: edge tensor
      0.000082: initializing solutions matrix
      0.051466: loop
      0.000015: postprocessing (MAX MEMORY: 0.024GB)
  0.000332: postprocess solutions
0.000224: template fillers
0.000020: response sel
0.000173: response exp
0.000015: response rules
0.011227: response assembler
  0.000017: response assembly
  0.006289: update sal
  0.000276: decay sal
  0.004631: prune
    0.000009: setup
    0.000107: select keep
    0.000040: delete old spans
    0.003152: setup essentials
    0.000297: identify essentials
    0.000965: remove not keep

[0.44 s] Hi, this is an Alexa Prize Socialbot.  You know , I don't think we have met before . What would you like me to call you ?

User: my name is sally joe
my name is sally joe
ARG REQUESTS: [('emora', 'request', 'wm29', 'wm30')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'"sally joe"', 'name', 'wm42', 'wm47', 'wm41', 'be', 'user', 'wm52', 'wm48', 'wm40', 'person_ner'}
FRAGMENT REQUEST MERGES: [('wm40', 'wm29')]
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	I hope you've been doing well today . What have you been up to ? (s: 0.15, pr: 0.50)

React Options:
	I am really happy to meet you , sally joe ! (s: 0.47, pr: 0.50)


0.000078: next turn
0.000018: sentence caser
0.114837: elit
0.190894: parse2logic
  0.001766: facts graph types
  0.002836: convert facts graph
    0.000553: to digraph
    0.002229: flatten types (110 concepts)
    0.000040: quantities
  0.000021: process dynamic rules
  0.175995: match
    0.175917: match
      0.000327: querygen
      0.013428: creating graph tensor (146 nodes, 487 edges)
        0.002793: setup
        0.001451: key tensor
        0.000870: target tensor
        0.008189: edge tensor
      0.000080: initializing solutions matrix
      0.161808: loop
      0.000017: postprocessing (MAX MEMORY: 0.012GB)
  0.002253: postprocess solutions
0.000048: multiword mentions
0.000137: ner mentions
0.002892: mention bridge
0.000639: merge bridge
0.005497: knowledge pull
0.001523: reference id
0.036496: reference infer
  0.002391: facts graph types
  0.003758: convert facts graph
    0.000536: to digraph
    0.003163: flatten types (122 concepts)
    0.000043: quantities
  0.001283: process dynamic rules
  0.028874: match
    0.028816: match
      0.001540: querygen
      0.014943: creating graph tensor (241 nodes, 828 edges)
        0.004416: setup
        0.001271: key tensor
        0.001164: target tensor
        0.007879: edge tensor
      0.000084: initializing solutions matrix
      0.012061: loop
      0.000020: postprocessing (MAX MEMORY: 0.033GB)
  0.000008: postprocess solutions
0.000012: reference resolution
0.010564: fragment resolution
  0.000128: identify previous emora questions
  0.003153: find answer
  0.007266: sal
0.257513: dialogue infer
  0.002393: facts graph types
  0.004034: convert facts graph
    0.000564: to digraph
    0.003413: flatten types (122 concepts)
    0.000043: quantities
  0.000021: process dynamic rules
  0.250316: match
    0.250232: match
      0.000498: querygen
      0.093554: creating graph tensor (257 nodes, 914 edges)
        0.004863: setup
        0.078176: key tensor
        0.001866: target tensor
        0.008446: edge tensor
      0.000085: initializing solutions matrix
      0.155835: loop
      0.000016: postprocessing (MAX MEMORY: 0.040GB)
  0.000426: postprocess solutions
0.014385: apply inferences
  0.001933: apply
  0.002065: update types
  0.000062: operate
  0.010305: sal
0.001052: reference id 2
0.047945: reference infer 2
  0.003314: facts graph types
  0.005574: convert facts graph
    0.000782: to digraph
    0.004723: flatten types (167 concepts)
    0.000053: quantities
  0.001550: process dynamic rules
  0.037112: match
    0.037049: match
      0.001708: querygen
      0.018037: creating graph tensor (349 nodes, 1241 edges)
        0.006718: setup
        0.001424: key tensor
        0.001999: target tensor
        0.007626: edge tensor
      0.000083: initializing solutions matrix
      0.017040: loop
      0.000020: postprocessing (MAX MEMORY: 0.072GB)
  0.000152: postprocess solutions
0.001622: reference resolution 2
0.010173: fragment resolution 2
  0.000127: identify previous emora questions
  0.010031: sal
0.101612: dialogue infer 2
  0.003176: facts graph types
  0.005563: convert facts graph
    0.000754: to digraph
    0.004745: flatten types (163 concepts)
    0.000051: quantities
  0.000021: process dynamic rules
  0.091887: match
    0.091830: match
      0.000701: querygen
      0.024635: creating graph tensor (353 nodes, 1271 edges)
        0.007169: setup
        0.001409: key tensor
        0.001579: target tensor
        0.014203: edge tensor
      0.000085: initializing solutions matrix
      0.066202: loop
      0.000015: postprocessing (MAX MEMORY: 0.075GB)
  0.000574: postprocess solutions
0.011455: apply inferences 2
  0.000991: apply
  0.000246: update types
  0.000060: operate
  0.010141: sal
0.004809: prepare template nlg
0.175448: template infer
  0.003222: facts graph types
  0.005638: convert facts graph
    0.000770: to digraph
    0.004793: flatten types (164 concepts)
    0.000062: quantities
  0.000021: process dynamic rules
  0.164841: match
    0.164780: match
      0.000770: querygen
      0.058147: creating graph tensor (357 nodes, 1287 edges)
        0.007482: setup
        0.034804: key tensor
        0.001644: target tensor
        0.013909: edge tensor
      0.000087: initializing solutions matrix
      0.105554: loop
      0.000015: postprocessing (MAX MEMORY: 0.077GB)
  0.001277: postprocess solutions
0.000336: template fillers
0.000016: response sel
0.000226: response exp
0.000014: response rules
0.018667: response assembler
  0.000016: response assembly
  0.010396: update sal
  0.000431: decay sal
  0.007809: prune
    0.000010: setup
    0.000171: select keep
    0.000043: delete old spans
    0.005649: setup essentials
    0.000868: identify essentials
    0.000971: remove not keep

[1.01 s] I am really happy to meet you , sally joe ! I hope you've been doing well today . What have you been up to ?

User: I went for a walk in the beautiful neighorhood across the street from my apartment
I went for a walk in the beautiful neighorhood across the street from my apartment
ARG REQUESTS: [('emora', 'request', 'wm80', 'wm81')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm157', 'wm117', 'wm136', 'wm112', 'wm128', 'unknown_noun', 'past', 'wm141', 'wm135', 'street', 'wm152', 'wm153', 'wm137', 'wm130', 'wm162', 'wm114', 'wm144', 'walk', 'user', 'apartment', 'prp', 'wm131', 'wm119', 'wm145', 'wm108', 'wm140', 'wm124', 'wm149', 'now', 'unknown_other', 'wm148'}
FRAGMENT REQUEST MERGES: [('wm112', 'wm80')]
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	I was just thinking , the most fun I had today was taking a walk with my dog . Do you have a pet ? (s: 0.12, pr: 0.10)


0.000075: next turn
0.000021: sentence caser
0.117419: elit
0.230679: parse2logic
  0.004490: facts graph types
  0.006770: convert facts graph
    0.001283: to digraph
    0.005404: flatten types (248 concepts)
    0.000068: quantities
  0.000023: process dynamic rules
  0.197667: match
    0.197590: match
      0.000751: querygen
      0.025724: creating graph tensor (342 nodes, 1194 edges)
        0.007329: setup
        0.001665: key tensor
        0.001635: target tensor
        0.014810: edge tensor
      0.000085: initializing solutions matrix
      0.170777: loop
      0.000016: postprocessing (MAX MEMORY: 0.067GB)
  0.003888: postprocess solutions
0.000070: multiword mentions
0.000012: ner mentions
0.008943: mention bridge
0.007811: merge bridge
0.015905: knowledge pull
0.010384: reference id
0.072986: reference infer
  0.007142: facts graph types
  0.010963: convert facts graph
    0.001359: to digraph
    0.009495: flatten types (309 concepts)
    0.000089: quantities
  0.003691: process dynamic rules
  0.050669: match
    0.050603: match
      0.003459: querygen
      0.031145: creating graph tensor (687 nodes, 2430 edges)
        0.014239: setup
        0.001992: key tensor
        0.003397: target tensor
        0.011019: edge tensor
      0.000102: initializing solutions matrix
      0.015707: loop
      0.000022: postprocessing (MAX MEMORY: 0.271GB)
  0.000008: postprocess solutions
0.000013: reference resolution
0.027539: fragment resolution
  0.000157: identify previous emora questions
  0.009123: find answer
  0.018239: sal
0.127764: dialogue infer
  0.006968: facts graph types
  0.011112: convert facts graph
    0.001400: to digraph
    0.009622: flatten types (306 concepts)
    0.000077: quantities
  0.000023: process dynamic rules
  0.108049: match
    0.107986: match
      0.001432: querygen
      0.038568: creating graph tensor (715 nodes, 2605 edges)
        0.014728: setup
        0.002208: key tensor
        0.003392: target tensor
        0.017698: edge tensor
      0.000087: initializing solutions matrix
      0.067690: loop
      0.000014: postprocessing (MAX MEMORY: 0.310GB)
  0.000831: postprocess solutions
0.023788: apply inferences
  0.002007: apply
  0.001372: update types
  0.000088: operate
  0.020302: sal
0.003423: reference id 2
0.076067: reference infer 2
  0.007869: facts graph types
  0.011683: convert facts graph
    0.001804: to digraph
    0.009769: flatten types (332 concepts)
    0.000092: quantities
  0.003636: process dynamic rules
  0.052271: match
    0.052210: match
      0.003864: querygen
      0.035863: creating graph tensor (756 nodes, 2699 edges)
        0.015028: setup
        0.002227: key tensor
        0.003706: target tensor
        0.014313: edge tensor
      0.000085: initializing solutions matrix
      0.012202: loop
      0.000024: postprocessing (MAX MEMORY: 0.334GB)
  0.000008: postprocess solutions
0.000012: reference resolution 2
0.020221: fragment resolution 2
  0.000179: identify previous emora questions
  0.020025: sal
0.139640: dialogue infer 2
  0.007808: facts graph types
  0.012153: convert facts graph
    0.001532: to digraph
    0.010514: flatten types (332 concepts)
    0.000094: quantities
  0.000022: process dynamic rules
  0.117916: match
    0.117855: match
      0.001832: querygen
      0.040227: creating graph tensor (796 nodes, 2910 edges)
        0.016140: setup
        0.002388: key tensor
        0.004026: target tensor
        0.017058: edge tensor
      0.000086: initializing solutions matrix
      0.075501: loop
      0.000015: postprocessing (MAX MEMORY: 0.385GB)
  0.000812: postprocess solutions
0.022095: apply inferences 2
  0.001001: apply
  0.000451: update types
  0.000088: operate
  0.020536: sal
0.006555: prepare template nlg
0.163365: template infer
  0.007831: facts graph types
  0.012295: convert facts graph
    0.001530: to digraph
    0.010660: flatten types (332 concepts)
    0.000091: quantities
  0.000023: process dynamic rules
  0.140687: match
    0.140622: match
      0.001898: querygen
      0.038563: creating graph tensor (796 nodes, 2910 edges)
        0.016797: setup
        0.002457: key tensor
        0.003874: target tensor
        0.014805: edge tensor
      0.000087: initializing solutions matrix
      0.099849: loop
      0.000015: postprocessing (MAX MEMORY: 0.385GB)
  0.001540: postprocess solutions
0.000241: template fillers
0.000014: response sel
0.000207: response exp
0.000014: response rules
0.039177: response assembler
  0.000015: response assembly
  0.020673: update sal
  0.000855: decay sal
  0.017618: prune
    0.000010: setup
    0.000315: select keep
    0.000075: delete old spans
    0.013386: setup essentials
    0.001805: identify essentials
    0.001848: remove not keep

[1.12 s] I see . I was just thinking , the most fun I had today was taking a walk with my dog . Do you have a pet ?

User: yes
yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm250', 'wm251')]
CURRENT USER CONCEPTS: {'wm267', 'wm266', 'wm268', 'user', 'predicate'}
FRAGMENT REQUEST MERGES: [('wm266', 'wm250')]
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Actually , I got a puppy four months ago . Her name is Nyla and she's adorable . (s: 0.57, pr: 0.10)
	What is your Pet like ? (s: 0.50, pr: 0.50)
	What kind of pet do you have ? (s: 0.65, pr: 0.50)

React Options:
	Oh , I love pets ! (s: 0.60, pr: 0.50)


0.000079: next turn
0.000017: sentence caser
0.112878: elit
0.050359: parse2logic
  0.000354: facts graph types
  0.000782: convert facts graph
    0.000131: to digraph
    0.000618: flatten types (26 concepts)
    0.000021: quantities
  0.000021: process dynamic rules
  0.046477: match
    0.046395: match
      0.000089: querygen
      0.009647: creating graph tensor (30 nodes, 82 edges)
        0.000504: setup
        0.002804: key tensor
        0.000370: target tensor
        0.005920: edge tensor
      0.000072: initializing solutions matrix
      0.036386: loop
      0.000014: postprocessing (MAX MEMORY: 0.001GB)
  0.000494: postprocess solutions
0.000035: multiword mentions
0.000012: ner mentions
0.001516: mention bridge
0.001824: merge bridge
0.023876: knowledge pull
0.003532: reference id
0.084831: reference infer
  0.007784: facts graph types
  0.012264: convert facts graph
    0.001977: to digraph
    0.010161: flatten types (342 concepts)
    0.000108: quantities
  0.003597: process dynamic rules
  0.060524: match
    0.060460: match
      0.004255: querygen
      0.038449: creating graph tensor (739 nodes, 2650 edges)
        0.014984: setup
        0.002256: key tensor
        0.003616: target tensor
        0.016981: edge tensor
      0.000085: initializing solutions matrix
      0.017452: loop
      0.000026: postprocessing (MAX MEMORY: 0.321GB)
  0.000008: postprocess solutions
0.000013: reference resolution
0.030514: fragment resolution
  0.000204: identify previous emora questions
  0.009143: find answer
  0.021149: sal
0.370658: dialogue infer
  0.007676: facts graph types
  0.012220: convert facts graph
    0.001603: to digraph
    0.010510: flatten types (338 concepts)
    0.000094: quantities
  0.000023: process dynamic rules
  0.348296: match
    0.348231: match
      0.001778: querygen
      0.257409: creating graph tensor (767 nodes, 2803 edges)
        0.188074: setup
        0.002523: key tensor
        0.003676: target tensor
        0.062275: edge tensor
      0.000092: initializing solutions matrix
      0.088723: loop
      0.000015: postprocessing (MAX MEMORY: 0.357GB)
  0.001395: postprocess solutions
0.025913: apply inferences
  0.002577: apply
  0.000670: update types
  0.000348: operate
  0.022296: sal
0.005132: reference id 2
0.085585: reference infer 2
  0.007964: facts graph types
  0.012172: convert facts graph
    0.001603: to digraph
    0.010453: flatten types (349 concepts)
    0.000097: quantities
  0.004056: process dynamic rules
  0.060732: match
    0.060666: match
      0.003690: querygen
      0.035883: creating graph tensor (750 nodes, 2678 edges)
        0.015090: setup
        0.002147: key tensor
        0.003534: target tensor
        0.014537: edge tensor
      0.000086: initializing solutions matrix
      0.020804: loop
      0.000023: postprocessing (MAX MEMORY: 0.328GB)
  0.000009: postprocess solutions
0.000013: reference resolution 2
0.022129: fragment resolution 2
  0.000210: identify previous emora questions
  0.021903: sal
0.144083: dialogue infer 2
  0.007982: facts graph types
  0.012674: convert facts graph
    0.001632: to digraph
    0.010930: flatten types (349 concepts)
    0.000098: quantities
  0.000023: process dynamic rules
  0.121064: match
    0.121001: match
      0.001791: querygen
      0.039266: creating graph tensor (795 nodes, 2900 edges)
        0.016073: setup
        0.002628: key tensor
        0.003659: target tensor
        0.016292: edge tensor
      0.000085: initializing solutions matrix
      0.079643: loop
      0.000015: postprocessing (MAX MEMORY: 0.383GB)
  0.001362: postprocess solutions
0.024752: apply inferences 2
  0.001387: apply
  0.000721: update types
  0.000150: operate
  0.022476: sal
0.007289: prepare template nlg
0.171150: template infer
  0.008038: facts graph types
  0.012801: convert facts graph
    0.001636: to digraph
    0.011052: flatten types (350 concepts)
    0.000099: quantities
  0.000023: process dynamic rules
  0.147290: match
    0.147223: match
      0.001828: querygen
      0.041109: creating graph tensor (799 nodes, 2917 edges)
        0.016391: setup
        0.002617: key tensor
        0.003762: target tensor
        0.017708: edge tensor
      0.000086: initializing solutions matrix
      0.103973: loop
      0.000015: postprocessing (MAX MEMORY: 0.387GB)
  0.001925: postprocess solutions
0.001451: template fillers
0.000016: response sel
0.000109: response exp
0.000013: response rules
0.040113: response assembler
  0.000016: response assembly
  0.022423: update sal
  0.000878: decay sal
  0.016782: prune
    0.000015: setup
    0.000353: select keep
    0.000062: delete old spans
    0.012666: setup essentials
    0.002340: identify essentials
    0.000977: remove not keep

[1.21 s] Oh , I love pets ! What kind of pet do you have ?

User: i have a horse
i have a horse
ARG REQUESTS: [('emora', 'request', 'wm253', 'wm290')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm310', 'wm297', 'wm298', 'wm305', 'horse', 'wm304', 'user', 'now', 'prp'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: [('emora', 'request', 'wm253', 'wm290')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm310', 'wm297', 'wm298', 'wm305', 'horse', 'wm304', 'user', 'now', 'prp'}
FRAGMENT REQUEST MERGES: []

Present Options:
	Actually , I got a puppy four months ago . Her name is Nyla and she's adorable . (s: 0.53, pr: 0.10)
	What is your Pet like ? (s: 0.46, pr: 0.50)


0.000074: next turn
0.000019: sentence caser
0.110410: elit
0.279343: parse2logic
  0.001408: facts graph types
  0.002399: convert facts graph
    0.000497: to digraph
    0.001853: flatten types (91 concepts)
    0.000036: quantities
  0.000021: process dynamic rules
  0.266986: match
    0.266909: match
      0.000281: querygen
      0.032080: creating graph tensor (119 nodes, 392 edges)
        0.002146: setup
        0.019046: key tensor
        0.000992: target tensor
        0.009773: edge tensor
      0.000080: initializing solutions matrix
      0.234169: loop
      0.000018: postprocessing (MAX MEMORY: 0.008GB)
  0.002515: postprocess solutions
0.000043: multiword mentions
0.000013: ner mentions
0.002783: mention bridge
0.003159: merge bridge
0.017796: knowledge pull
0.005210: reference id
0.094363: reference infer
  0.008493: facts graph types
  0.013137: convert facts graph
    0.001791: to digraph
    0.011228: flatten types (361 concepts)
    0.000099: quantities
  0.004076: process dynamic rules
  0.067915: match
    0.067848: match
      0.003810: querygen
      0.039601: creating graph tensor (794 nodes, 2845 edges)
        0.016223: setup
        0.002413: key tensor
        0.003744: target tensor
        0.016603: edge tensor
      0.000085: initializing solutions matrix
      0.024147: loop
      0.000024: postprocessing (MAX MEMORY: 0.370GB)
  0.000008: postprocess solutions
0.000013: reference resolution
0.031741: fragment resolution
  0.000225: identify previous emora questions
  0.008931: find answer
  0.022567: sal
0.151648: dialogue infer
  0.008528: facts graph types
  0.013439: convert facts graph
    0.001705: to digraph
    0.011621: flatten types (361 concepts)
    0.000100: quantities
  0.000024: process dynamic rules
  0.127203: match
    0.127135: match
      0.001910: querygen
      0.042708: creating graph tensor (842 nodes, 3078 edges)
        0.017496: setup
        0.002566: key tensor
        0.004097: target tensor
        0.017886: edge tensor
      0.000087: initializing solutions matrix
      0.082194: loop
      0.000016: postprocessing (MAX MEMORY: 0.431GB)
  0.001395: postprocess solutions
0.024543: apply inferences
  0.001408: apply
  0.000529: update types
  0.000103: operate
  0.022482: sal
0.005179: reference id 2
0.093226: reference infer 2
  0.008508: facts graph types
  0.012542: convert facts graph
    0.001975: to digraph
    0.010449: flatten types (361 concepts)
    0.000100: quantities
  0.004069: process dynamic rules
  0.067293: match
    0.067229: match
      0.004113: querygen
      0.039259: creating graph tensor (794 nodes, 2845 edges)
        0.015756: setup
        0.002364: key tensor
        0.003702: target tensor
        0.016793: edge tensor
      0.000085: initializing solutions matrix
      0.023566: loop
      0.000024: postprocessing (MAX MEMORY: 0.370GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.031746: fragment resolution 2
  0.000225: identify previous emora questions
  0.008865: find answer
  0.022639: sal
0.150145: dialogue infer 2
  0.008490: facts graph types
  0.013011: convert facts graph
    0.001763: to digraph
    0.011135: flatten types (361 concepts)
    0.000099: quantities
  0.000024: process dynamic rules
  0.126228: match
    0.126162: match
      0.002339: querygen
      0.041281: creating graph tensor (842 nodes, 3078 edges)
        0.016966: setup
        0.002574: key tensor
        0.004121: target tensor
        0.016960: edge tensor
      0.000086: initializing solutions matrix
      0.082242: loop
      0.000014: postprocessing (MAX MEMORY: 0.431GB)
  0.001357: postprocess solutions
0.024825: apply inferences 2
  0.001401: apply
  0.000536: update types
  0.000106: operate
  0.022762: sal
0.007148: prepare template nlg
0.168354: template infer
  0.008536: facts graph types
  0.013474: convert facts graph
    0.001709: to digraph
    0.011652: flatten types (361 concepts)
    0.000101: quantities
  0.000023: process dynamic rules
  0.143317: match
    0.143251: match
      0.001969: querygen
      0.038354: creating graph tensor (842 nodes, 3078 edges)
        0.017460: setup
        0.002562: key tensor
        0.003983: target tensor
        0.013703: edge tensor
      0.000101: initializing solutions matrix
      0.102596: loop
      0.000015: postprocessing (MAX MEMORY: 0.431GB)
  0.001908: postprocess solutions
0.001070: template fillers
0.000015: response sel
0.000120: response exp
0.000014: response rules
0.041810: response assembler
  0.000015: response assembly
  0.022925: update sal
  0.000922: decay sal
  0.017933: prune
    0.000010: setup
    0.000357: select keep
    0.000081: delete old spans
    0.013947: setup essentials
    0.002550: identify essentials
    0.000802: remove not keep

[1.25 s] Okay . What is your Pet like ?

User: tall and ripped what is your dog like
tall and ripped what is your dog like
ARG REQUESTS: [('emora', 'request', 'wm285', 'wm286')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm344', 'emora', 'wm338', 'wm342', 'wm372', 'wm356', 'wm353', 'wm357', 'wm366', 'wm343', 'dog', 'object', 'wm365', 'wm367', 'wm362', 'wm380', 'wm368', 'wm374', 'like', 'user', 'wm339', 'wm379', 'wm378', 'wm361', 'wm438', 'wm437', 'wm337', 'be', 'now', 'unknown_other', 'unknown_adj'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: [('emora', 'request', 'wm285', 'wm286')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm344', 'emora', 'wm338', 'wm342', 'wm372', 'wm356', 'wm353', 'wm357', 'wm366', 'wm343', 'dog', 'object', 'wm365', 'wm367', 'wm362', 'wm380', 'wm368', 'wm374', 'like', 'user', 'wm339', 'wm379', 'wm378', 'wm361', 'wm438', 'wm437', 'wm337', 'be', 'now', 'unknown_other', 'unknown_adj'}
FRAGMENT REQUEST MERGES: []

React + Present Options:
	You know, I can't think of the answer to that right now . (s: 0.60, pr: 0.10)
	You know, I can't think of the answer to that right now . (s: 0.60, pr: 0.10)


Present Options:
	Actually , I got a puppy four months ago . Her name is Nyla and she's adorable . (s: 0.51, pr: 0.10)
	Which animal's your favorite? (s: 0.29, pr: 0.10)
	What do you like to do with your Pet ? (s: 0.40, pr: 0.50)

React Options:
	Every pet has its quirks , but I think yours sounds sweet . (s: 0.64, pr: 0.50)


0.000077: next turn
0.000018: sentence caser
0.112842: elit
0.296281: parse2logic
  0.002588: facts graph types
  0.004110: convert facts graph
    0.000805: to digraph
    0.003241: flatten types (160 concepts)
    0.000050: quantities
  0.000021: process dynamic rules
  0.272153: match
    0.272073: match
      0.000459: querygen
      0.041110: creating graph tensor (205 nodes, 686 edges)
        0.003890: setup
        0.001521: key tensor
        0.001172: target tensor
        0.034276: edge tensor
      0.000083: initializing solutions matrix
      0.230212: loop
      0.000015: postprocessing (MAX MEMORY: 0.023GB)
  0.004439: postprocess solutions
0.000056: multiword mentions
0.000013: ner mentions
0.007701: mention bridge
0.012292: merge bridge
0.020877: knowledge pull
0.057839: reference id
0.303851: reference infer
  0.012023: facts graph types
  0.016800: convert facts graph
    0.002737: to digraph
    0.013922: flatten types (452 concepts)
    0.000120: quantities
  0.008511: process dynamic rules
  0.265186: match
    0.265114: match
      0.005481: querygen
      0.234322: creating graph tensor (1009 nodes, 3571 edges)
        0.199405: setup
        0.003352: key tensor
        0.005116: target tensor
        0.025485: edge tensor
      0.000087: initializing solutions matrix
      0.025006: loop
      0.000031: postprocessing (MAX MEMORY: 0.585GB)
  0.000009: postprocess solutions
0.000015: reference resolution
0.041097: fragment resolution
  0.000249: identify previous emora questions
  0.012767: find answer
  0.028063: sal
0.174491: dialogue infer
  0.012127: facts graph types
  0.017126: convert facts graph
    0.002197: to digraph
    0.014794: flatten types (452 concepts)
    0.000120: quantities
  0.000036: process dynamic rules
  0.142138: match
    0.142068: match
      0.002549: querygen
      0.054874: creating graph tensor (1073 nodes, 3922 edges)
        0.021859: setup
        0.003323: key tensor
        0.005614: target tensor
        0.023182: edge tensor
      0.000088: initializing solutions matrix
      0.084331: loop
      0.000016: postprocessing (MAX MEMORY: 0.698GB)
  0.001666: postprocess solutions
0.034746: apply inferences
  0.003920: apply
  0.000862: update types
  0.000118: operate
  0.029825: sal
0.012161: reference id 2
0.131382: reference infer 2
  0.012935: facts graph types
  0.016054: convert facts graph
    0.002005: to digraph
    0.013904: flatten types (471 concepts)
    0.000124: quantities
  0.010166: process dynamic rules
  0.091081: match
    0.091011: match
      0.006002: querygen
      0.046310: creating graph tensor (1036 nodes, 3665 edges)
        0.020632: setup
        0.003065: key tensor
        0.005152: target tensor
        0.016635: edge tensor
      0.000085: initializing solutions matrix
      0.038411: loop
      0.000029: postprocessing (MAX MEMORY: 0.616GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.043133: fragment resolution 2
  0.000255: identify previous emora questions
  0.013512: find answer
  0.029348: sal
0.186888: dialogue infer 2
  0.012838: facts graph types
  0.017486: convert facts graph
    0.002172: to digraph
    0.015174: flatten types (471 concepts)
    0.000126: quantities
  0.000025: process dynamic rules
  0.153201: match
    0.153131: match
      0.003170: querygen
      0.059328: creating graph tensor (1132 nodes, 4146 edges)
        0.022931: setup
        0.003514: key tensor
        0.005893: target tensor
        0.025928: edge tensor
      0.000086: initializing solutions matrix
      0.090284: loop
      0.000018: postprocessing (MAX MEMORY: 0.780GB)
  0.001691: postprocess solutions
0.032313: apply inferences 2
  0.001901: apply
  0.000582: update types
  0.000130: operate
  0.029680: sal
0.008006: prepare template nlg
0.211098: template infer
  0.012901: facts graph types
  0.018155: convert facts graph
    0.002217: to digraph
    0.015801: flatten types (471 concepts)
    0.000123: quantities
  0.000026: process dynamic rules
  0.175923: match
    0.175847: match
      0.002949: querygen
      0.061835: creating graph tensor (1132 nodes, 4146 edges)
        0.024695: setup
        0.003693: key tensor
        0.005749: target tensor
        0.026545: edge tensor
      0.000090: initializing solutions matrix
      0.110736: loop
      0.000015: postprocessing (MAX MEMORY: 0.780GB)
  0.002505: postprocess solutions
0.001961: template fillers
0.000016: response sel
0.000174: response exp
0.000014: response rules
0.059858: response assembler
  0.000015: response assembly
  0.029641: update sal
  0.001269: decay sal
  0.028918: prune
    0.000011: setup
    0.000458: select keep
    0.000084: delete old spans
    0.021659: setup essentials
    0.005025: identify essentials
    0.001443: remove not keep

[1.75 s] Every pet has its quirks , but I think yours sounds sweet . What do you like to do with your Pet ?

User: i ride her through the forest across the river all the way down to grandmothers house
i ride her through the forest across the river all the way down to grandmothers house
ARG REQUESTS: [('emora', 'request', 'wm461', 'wm463')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm500', 'wm549', 'wm524', 'wm518', 'unknown_noun', 'wm489', 'wm508', 'dog', 'living_thing', 'wm536', 'wm529', 'wm484', 'wm502', 'wm474', 'wm499', 'wm523', 'wm506', 'wm544', 'wm483', 'wm501', 'wm513', 'wm539', 'wm545', 'wm514', 'wm476', 'wm507', 'wm528', 'user', 'wm546', 'prp', 'unknown_verb', 'wm542', 'house', 'wm495', 'wm494', 'wm493', 'wm517', 'wm481', 'wm521', 'wm512', 'wm527', 'wm496', 'wm532', 'now', 'unknown_other', 'wm472'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: [('emora', 'request', 'wm461', 'wm463')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm500', 'wm549', 'wm524', 'wm518', 'unknown_noun', 'wm489', 'wm508', 'dog', 'living_thing', 'wm536', 'wm529', 'wm484', 'wm502', 'wm474', 'wm499', 'wm523', 'wm506', 'wm544', 'wm483', 'wm501', 'wm513', 'wm539', 'wm545', 'wm514', 'wm476', 'wm507', 'wm528', 'user', 'wm546', 'prp', 'unknown_verb', 'wm542', 'house', 'wm495', 'wm494', 'wm493', 'wm517', 'wm481', 'wm521', 'wm512', 'wm527', 'wm496', 'wm532', 'now', 'unknown_other', 'wm472'}
FRAGMENT REQUEST MERGES: []

Present Options:
	Actually , I got a puppy four months ago . Her name is Nyla and she's adorable . (s: 0.49, pr: 0.10)
	Actually , I got a puppy four months ago . Her name is Nyla and she's adorable . (s: 0.19, pr: 0.10)
	Which animal's your favorite? (s: 0.27, pr: 0.10)


0.000072: next turn
0.000021: sentence caser
0.115799: elit
0.285410: parse2logic
  0.004474: facts graph types
  0.006778: convert facts graph
    0.001359: to digraph
    0.005334: flatten types (253 concepts)
    0.000071: quantities
  0.000022: process dynamic rules
  0.249192: match
    0.249109: match
      0.000770: querygen
      0.018785: creating graph tensor (331 nodes, 1151 edges)
        0.006975: setup
        0.001678: key tensor
        0.001715: target tensor
        0.008096: edge tensor
      0.000088: initializing solutions matrix
      0.229179: loop
      0.000017: postprocessing (MAX MEMORY: 0.070GB)
  0.005203: postprocess solutions
0.000062: multiword mentions
0.000013: ner mentions
0.011272: mention bridge
0.028691: merge bridge
0.027124: knowledge pull
0.027016: reference id
0.170128: reference infer
  0.018741: facts graph types
  0.021278: convert facts graph
    0.002633: to digraph
    0.018472: flatten types (607 concepts)
    0.000149: quantities
  0.013541: process dynamic rules
  0.114697: match
    0.114618: match
      0.007794: querygen
      0.070156: creating graph tensor (1339 nodes, 4683 edges)
        0.028370: setup
        0.004035: key tensor
        0.006375: target tensor
        0.030108: edge tensor
      0.000104: initializing solutions matrix
      0.036340: loop
      0.000033: postprocessing (MAX MEMORY: 1.007GB)
  0.000192: postprocess solutions
0.000640: reference resolution
0.056883: fragment resolution
  0.000222: identify previous emora questions
  0.019307: find answer
  0.037334: sal
0.393842: dialogue infer
  0.018826: facts graph types
  0.023050: convert facts graph
    0.003006: to digraph
    0.019883: flatten types (606 concepts)
    0.000147: quantities
  0.000026: process dynamic rules
  0.347811: match
    0.347736: match
      0.003919: querygen
      0.259411: creating graph tensor (1457 nodes, 5330 edges)
        0.215795: setup
        0.005164: key tensor
        0.006628: target tensor
        0.030254: edge tensor
      0.000092: initializing solutions matrix
      0.084081: loop
      0.000015: postprocessing (MAX MEMORY: 1.287GB)
  0.001944: postprocess solutions
0.041591: apply inferences
  0.002613: apply
  0.000605: update types
  0.000151: operate
  0.038172: sal
0.015247: reference id 2
0.164332: reference infer 2
  0.018850: facts graph types
  0.021445: convert facts graph
    0.002650: to digraph
    0.018620: flatten types (608 concepts)
    0.000151: quantities
  0.012583: process dynamic rules
  0.109813: match
    0.109739: match
      0.007624: querygen
      0.064998: creating graph tensor (1345 nodes, 4717 edges)
        0.027319: setup
        0.004437: key tensor
        0.005606: target tensor
        0.026343: edge tensor
      0.000088: initializing solutions matrix
      0.036795: loop
      0.000032: postprocessing (MAX MEMORY: 1.021GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.057094: fragment resolution 2
  0.000268: identify previous emora questions
  0.019473: find answer
  0.037334: sal
0.213073: dialogue infer 2
  0.018758: facts graph types
  0.022997: convert facts graph
    0.002947: to digraph
    0.019886: flatten types (608 concepts)
    0.000149: quantities
  0.000025: process dynamic rules
  0.167281: match
    0.167209: match
      0.004156: querygen
      0.076350: creating graph tensor (1464 nodes, 5358 edges)
        0.030792: setup
        0.004713: key tensor
        0.006688: target tensor
        0.032670: edge tensor
      0.000088: initializing solutions matrix
      0.086394: loop
      0.000014: postprocessing (MAX MEMORY: 1.301GB)
  0.001939: postprocess solutions
0.040415: apply inferences 2
  0.002002: apply
  0.000604: update types
  0.000168: operate
  0.037623: sal
0.008761: prepare template nlg
0.236537: template infer
  0.018858: facts graph types
  0.022666: convert facts graph
    0.002794: to digraph
    0.019707: flatten types (608 concepts)
    0.000151: quantities
  0.000036: process dynamic rules
  0.190451: match
    0.190378: match
      0.004192: querygen
      0.072777: creating graph tensor (1464 nodes, 5358 edges)
        0.031122: setup
        0.004747: key tensor
        0.006512: target tensor
        0.028905: edge tensor
      0.000090: initializing solutions matrix
      0.113087: loop
      0.000015: postprocessing (MAX MEMORY: 1.301GB)
  0.002475: postprocess solutions
0.001812: template fillers
0.000015: response sel
0.000114: response exp
0.000014: response rules
0.080374: response assembler
  0.000014: response assembly
  0.037475: update sal
  0.001592: decay sal
  0.041279: prune
    0.000011: setup
    0.000571: select keep
    0.000092: delete old spans
    0.031772: setup essentials
    0.005982: identify essentials
    0.002551: remove not keep

[1.98 s] I see . Actually , I got a puppy four months ago . Her name is Nyla and she's adorable .

User: where did you get nyla from
where did you get nyla from
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	You know, I can't think of the answer to that right now . (s: 0.60, pr: 0.10)


Present Options:
	I love Nyla , but she can be difficult sometimes . I am trying to train her right now to stop chewing on the furniture . What tips do you have for teaching her ? (s: 0.45, pr: 0.50)
	Which animal's your favorite? (s: 0.20, pr: 0.10)


0.000073: next turn
0.000019: sentence caser
0.112417: elit
0.595486: parse2logic
  0.002390: facts graph types
  0.003833: convert facts graph
    0.000753: to digraph
    0.003018: flatten types (144 concepts)
    0.000047: quantities
  0.000022: process dynamic rules
  0.575656: match
    0.575577: match
      0.000508: querygen
      0.091018: creating graph tensor (193 nodes, 655 edges)
        0.003642: setup
        0.072590: key tensor
        0.002021: target tensor
        0.012582: edge tensor
      0.000085: initializing solutions matrix
      0.483537: loop
      0.000023: postprocessing (MAX MEMORY: 0.021GB)
  0.002925: postprocess solutions
0.000051: multiword mentions
0.000013: ner mentions
0.004588: mention bridge
0.008572: merge bridge
0.027297: knowledge pull
0.017244: reference id
0.164959: reference infer
  0.019197: facts graph types
  0.020223: convert facts graph
    0.002661: to digraph
    0.017390: flatten types (609 concepts)
    0.000149: quantities
  0.013823: process dynamic rules
  0.110192: match
    0.110119: match
      0.007658: querygen
      0.061074: creating graph tensor (1268 nodes, 4444 edges)
        0.025669: setup
        0.003761: key tensor
        0.005481: target tensor
        0.024945: edge tensor
      0.000087: initializing solutions matrix
      0.041074: loop
      0.000032: postprocessing (MAX MEMORY: 0.907GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.038376: fragment resolution
  0.000271: identify previous emora questions
  0.038089: sal
0.435849: dialogue infer
  0.018594: facts graph types
  0.022106: convert facts graph
    0.002800: to digraph
    0.019143: flatten types (609 concepts)
    0.000149: quantities
  0.000025: process dynamic rules
  0.391006: match
    0.390935: match
      0.003889: querygen
      0.285137: creating graph tensor (1407 nodes, 5143 edges)
        0.029765: setup
        0.004422: key tensor
        0.191031: target tensor
        0.058112: edge tensor
      0.000091: initializing solutions matrix
      0.101582: loop
      0.000015: postprocessing (MAX MEMORY: 1.199GB)
  0.002023: postprocess solutions
0.043300: apply inferences
  0.002387: apply
  0.001098: update types
  0.000156: operate
  0.039638: sal
0.016069: reference id 2
0.164718: reference infer 2
  0.018981: facts graph types
  0.020527: convert facts graph
    0.002611: to digraph
    0.017741: flatten types (616 concepts)
    0.000150: quantities
  0.013857: process dynamic rules
  0.109750: match
    0.109671: match
      0.007884: querygen
      0.061308: creating graph tensor (1284 nodes, 4506 edges)
        0.026231: setup
        0.003927: key tensor
        0.006124: target tensor
        0.023883: edge tensor
      0.000085: initializing solutions matrix
      0.040145: loop
      0.000034: postprocessing (MAX MEMORY: 0.932GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.038949: fragment resolution 2
  0.000285: identify previous emora questions
  0.038648: sal
0.212635: dialogue infer 2
  0.018870: facts graph types
  0.022677: convert facts graph
    0.003112: to digraph
    0.019400: flatten types (616 concepts)
    0.000152: quantities
  0.000025: process dynamic rules
  0.167106: match
    0.167034: match
      0.003585: querygen
      0.075125: creating graph tensor (1423 nodes, 5205 edges)
        0.030355: setup
        0.005078: key tensor
        0.006293: target tensor
        0.031971: edge tensor
      0.000088: initializing solutions matrix
      0.088006: loop
      0.000015: postprocessing (MAX MEMORY: 1.228GB)
  0.002021: postprocess solutions
0.041539: apply inferences 2
  0.002087: apply
  0.000651: update types
  0.000156: operate
  0.038626: sal
0.008864: prepare template nlg
0.231716: template infer
  0.018860: facts graph types
  0.022812: convert facts graph
    0.002870: to digraph
    0.019777: flatten types (616 concepts)
    0.000151: quantities
  0.000024: process dynamic rules
  0.185454: match
    0.185382: match
      0.003638: querygen
      0.068820: creating graph tensor (1423 nodes, 5205 edges)
        0.029404: setup
        0.004986: key tensor
        0.006266: target tensor
        0.026775: edge tensor
      0.000087: initializing solutions matrix
      0.112598: loop
      0.000015: postprocessing (MAX MEMORY: 1.228GB)
  0.002602: postprocess solutions
0.001900: template fillers
0.000015: response sel
0.000088: response exp
0.000013: response rules
0.080641: response assembler
  0.000015: response assembly
  0.039289: update sal
  0.001528: decay sal
  0.039793: prune
    0.000011: setup
    0.000591: select keep
    0.000100: delete old spans
    0.030965: setup essentials
    0.006696: identify essentials
    0.001136: remove not keep

[2.25 s] I see . I love Nyla , but she can be difficult sometimes . I am trying to train her right now to stop chewing on the furniture . What tips do you have for teaching her ?

User: i dont know how to train a dog you should talk to a professional
i dont know how to train a dog you should talk to a professional
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Which animal's your favorite? (s: 0.14, pr: 0.10)

React Options:
	Thanks , I will keep that in mind . (s: 0.80, pr: 0.50)


0.000085: next turn
0.000020: sentence caser
0.117685: elit
0.379600: parse2logic
  0.005287: facts graph types
  0.007880: convert facts graph
    0.001538: to digraph
    0.006252: flatten types (291 concepts)
    0.000075: quantities
  0.000021: process dynamic rules
  0.339414: match
    0.339332: match
      0.001045: querygen
      0.022004: creating graph tensor (381 nodes, 1344 edges)
        0.008025: setup
        0.001801: key tensor
        0.001913: target tensor
        0.009944: edge tensor
      0.000085: initializing solutions matrix
      0.315988: loop
      0.000015: postprocessing (MAX MEMORY: 0.256GB)
  0.005759: postprocess solutions
0.000057: multiword mentions
0.000013: ner mentions
0.007938: mention bridge
0.019829: merge bridge
0.031745: knowledge pull
0.017174: reference id
0.191367: reference infer
  0.023458: facts graph types
  0.024772: convert facts graph
    0.003126: to digraph
    0.021454: flatten types (711 concepts)
    0.000168: quantities
  0.013361: process dynamic rules
  0.127806: match
    0.127733: match
      0.009140: querygen
      0.076771: creating graph tensor (1513 nodes, 5347 edges)
        0.030573: setup
        0.004702: key tensor
        0.006972: target tensor
        0.033093: edge tensor
      0.000086: initializing solutions matrix
      0.041516: loop
      0.000033: postprocessing (MAX MEMORY: 1.309GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.045076: fragment resolution
  0.000302: identify previous emora questions
  0.044759: sal
0.645917: dialogue infer
  0.023638: facts graph types
  0.026384: convert facts graph
    0.003218: to digraph
    0.022981: flatten types (711 concepts)
    0.000171: quantities
  0.000026: process dynamic rules
  0.591272: match
    0.591199: match
      0.004122: querygen
      0.446075: creating graph tensor (1652 nodes, 6046 edges)
        0.035101: setup
        0.005270: key tensor
        0.192392: target tensor
        0.211074: edge tensor
      0.000096: initializing solutions matrix
      0.140642: loop
      0.000016: postprocessing (MAX MEMORY: 1.657GB)
  0.002093: postprocess solutions
0.048229: apply inferences
  0.002153: apply
  0.000681: update types
  0.000181: operate
  0.045167: sal
0.016424: reference id 2
0.189149: reference infer 2
  0.023807: facts graph types
  0.024317: convert facts graph
    0.002977: to digraph
    0.021149: flatten types (711 concepts)
    0.000168: quantities
  0.013392: process dynamic rules
  0.125665: match
    0.125589: match
      0.009298: querygen
      0.075055: creating graph tensor (1513 nodes, 5347 edges)
        0.030754: setup
        0.004711: key tensor
        0.006704: target tensor
        0.031394: edge tensor
      0.000087: initializing solutions matrix
      0.040918: loop
      0.000033: postprocessing (MAX MEMORY: 1.309GB)
  0.000009: postprocess solutions
0.000013: reference resolution 2
0.044765: fragment resolution 2
  0.000304: identify previous emora questions
  0.044445: sal
0.455184: dialogue infer 2
  0.023802: facts graph types
  0.026554: convert facts graph
    0.003195: to digraph
    0.023174: flatten types (711 concepts)
    0.000171: quantities
  0.000024: process dynamic rules
  0.400226: match
    0.400151: match
      0.004094: querygen
      0.255180: creating graph tensor (1652 nodes, 6046 edges)
        0.035755: setup
        0.005321: key tensor
        0.007655: target tensor
        0.204230: edge tensor
      0.000097: initializing solutions matrix
      0.140531: loop
      0.000015: postprocessing (MAX MEMORY: 1.657GB)
  0.002034: postprocess solutions
0.048010: apply inferences 2
  0.002146: apply
  0.000706: update types
  0.000177: operate
  0.044961: sal
0.009604: prepare template nlg
0.260821: template infer
  0.023709: facts graph types
  0.026107: convert facts graph
    0.003332: to digraph
    0.022588: flatten types (711 concepts)
    0.000172: quantities
  0.000025: process dynamic rules
  0.206034: match
    0.205959: match
      0.004726: querygen
      0.087193: creating graph tensor (1652 nodes, 6046 edges)
        0.035415: setup
        0.005445: key tensor
        0.007229: target tensor
        0.037360: edge tensor
      0.000089: initializing solutions matrix
      0.113713: loop
      0.000015: postprocessing (MAX MEMORY: 1.657GB)
  0.002594: postprocess solutions
0.001949: template fillers
0.000016: response sel
0.000146: response exp
0.000014: response rules
0.096550: response assembler
  0.000015: response assembly
  0.044368: update sal
  0.001796: decay sal
  0.050357: prune
    0.000011: setup
    0.000677: select keep
    0.000109: delete old spans
    0.039511: setup essentials
    0.007697: identify essentials
    0.002011: remove not keep

[2.63 s] Thanks , I will keep that in mind . Which animal's your favorite?

User: my favorite is a lemur what is your favorite animal
my favorite is a lemur what is your favorite animal
ARG REQUESTS: [('emora', 'request', 'wm450', 'wm456')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm889', 'emora', 'what', 'wm883', 'lemur', 'wm864', 'wm879', 'favorite', 'wm871', 'animal', 'user', 'wm875', 'wm858', 'wm870', 'wm888', 'wm874', 'wm857', 'be', 'now', 'wm860'}
FRAGMENT REQUEST MERGES: [('wm860', 'wm450')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Oh, that's neat. The Lemur is a cool one. My favorite is definitely the cheetah. I watched a documentary on them once years ago, and I've loved them ever since. Their stripes are so interesting, and they can run super fast. (s: 0.17, pr: 0.50)


0.000074: next turn
0.000021: sentence caser
0.115370: elit
0.278796: parse2logic
  0.002837: facts graph types
  0.004887: convert facts graph
    0.001210: to digraph
    0.003611: flatten types (174 concepts)
    0.000053: quantities
  0.000021: process dynamic rules
  0.251681: match
    0.251597: match
      0.000539: querygen
      0.023972: creating graph tensor (230 nodes, 794 edges)
        0.004435: setup
        0.010476: key tensor
        0.001268: target tensor
        0.007533: edge tensor
      0.000084: initializing solutions matrix
      0.226791: loop
      0.000024: postprocessing (MAX MEMORY: 0.030GB)
  0.005164: postprocess solutions
0.000058: multiword mentions
0.000012: ner mentions
0.005994: mention bridge
0.027828: merge bridge
0.032784: knowledge pull
0.037959: reference id
0.189290: reference infer
  0.025624: facts graph types
  0.025048: convert facts graph
    0.003351: to digraph
    0.021491: flatten types (747 concepts)
    0.000179: quantities
  0.014526: process dynamic rules
  0.122006: match
    0.121930: match
      0.009599: querygen
      0.074663: creating graph tensor (1561 nodes, 5492 edges)
        0.031627: setup
        0.004938: key tensor
        0.006870: target tensor
        0.029699: edge tensor
      0.000087: initializing solutions matrix
      0.037355: loop
      0.000035: postprocessing (MAX MEMORY: 1.382GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.073950: fragment resolution
  0.000325: identify previous emora questions
  0.027322: find answer
  0.046284: sal
0.429111: dialogue infer
  0.025443: facts graph types
  0.027418: convert facts graph
    0.003653: to digraph
    0.023576: flatten types (746 concepts)
    0.000177: quantities
  0.000026: process dynamic rules
  0.371432: match
    0.371355: match
      0.005023: querygen
      0.273434: creating graph tensor (1710 nodes, 6263 edges)
        0.220093: setup
        0.005965: key tensor
        0.007671: target tensor
        0.037771: edge tensor
      0.000090: initializing solutions matrix
      0.092578: loop
      0.000015: postprocessing (MAX MEMORY: 1.777GB)
  0.002279: postprocess solutions
0.053576: apply inferences
  0.002981: apply
  0.001389: update types
  0.000173: operate
  0.049012: sal
0.017157: reference id 2
0.182021: reference infer 2
  0.026309: facts graph types
  0.026154: convert facts graph
    0.003886: to digraph
    0.022065: flatten types (763 concepts)
    0.000180: quantities
  0.013883: process dynamic rules
  0.113603: match
    0.113528: match
      0.008694: querygen
      0.078212: creating graph tensor (1625 nodes, 5748 edges)
        0.033277: setup
        0.005209: key tensor
        0.006882: target tensor
        0.031220: edge tensor
      0.000089: initializing solutions matrix
      0.026312: loop
      0.000032: postprocessing (MAX MEMORY: 1.512GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.048414: fragment resolution 2
  0.000324: identify previous emora questions
  0.048074: sal
0.246083: dialogue infer 2
  0.026312: facts graph types
  0.028092: convert facts graph
    0.003484: to digraph
    0.024414: flatten types (763 concepts)
    0.000180: quantities
  0.000025: process dynamic rules
  0.186940: match
    0.186866: match
      0.004972: querygen
      0.090625: creating graph tensor (1760 nodes, 6451 edges)
        0.036734: setup
        0.006305: key tensor
        0.007586: target tensor
        0.038088: edge tensor
      0.000088: initializing solutions matrix
      0.090961: loop
      0.000013: postprocessing (MAX MEMORY: 1.884GB)
  0.002293: postprocess solutions
0.051384: apply inferences 2
  0.002326: apply
  0.000736: update types
  0.000190: operate
  0.048113: sal
0.010096: prepare template nlg
0.266544: template infer
  0.026217: facts graph types
  0.028062: convert facts graph
    0.003434: to digraph
    0.024432: flatten types (763 concepts)
    0.000181: quantities
  0.000025: process dynamic rules
  0.206912: match
    0.206836: match
      0.004428: querygen
      0.088397: creating graph tensor (1760 nodes, 6451 edges)
        0.037778: setup
        0.006335: key tensor
        0.007690: target tensor
        0.034706: edge tensor
      0.000090: initializing solutions matrix
      0.113678: loop
      0.000017: postprocessing (MAX MEMORY: 1.884GB)
  0.002851: postprocess solutions
0.002925: template fillers
0.000015: response sel
0.000230: response exp
0.000014: response rules
0.106795: response assembler
  0.000015: response assembly
  0.048323: update sal
  0.001952: decay sal
  0.056489: prune
    0.000012: setup
    0.000739: select keep
    0.000119: delete old spans
    0.043952: setup essentials
    0.007874: identify essentials
    0.003426: remove not keep

[2.18 s] Oh, that's neat. The Lemur is a cool one. My favorite is definitely the cheetah. I watched a documentary on them once years ago, and I've loved them ever since. Their stripes are so interesting, and they can run super fast.

User: have you ever seen a cheetah in real life
have you ever seen a cheetah in real life
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	You know, I can't think of the answer to that right now . (s: 0.60, pr: 0.10)
	Considering you like animals, I was wondering, do you like the zoo? There are plenty of different animals to see there. (s: 0.22, pr: 0.50)


0.000085: next turn
0.000019: sentence caser
0.111697: elit
0.285120: parse2logic
  0.003464: facts graph types
  0.005375: convert facts graph
    0.001103: to digraph
    0.004200: flatten types (203 concepts)
    0.000058: quantities
  0.000021: process dynamic rules
  0.257717: match
    0.257637: match
      0.000582: querygen
      0.020195: creating graph tensor (264 nodes, 907 edges)
        0.004971: setup
        0.001600: key tensor
        0.001951: target tensor
        0.011450: edge tensor
      0.000083: initializing solutions matrix
      0.236493: loop
      0.000016: postprocessing (MAX MEMORY: 0.039GB)
  0.003994: postprocess solutions
0.000056: multiword mentions
0.000012: ner mentions
0.006873: mention bridge
0.017764: merge bridge
0.034086: knowledge pull
0.025618: reference id
0.379720: reference infer
  0.026969: facts graph types
  0.027272: convert facts graph
    0.003626: to digraph
    0.023437: flatten types (782 concepts)
    0.000185: quantities
  0.013680: process dynamic rules
  0.309560: match
    0.309484: match
      0.009897: querygen
      0.266823: creating graph tensor (1672 nodes, 5895 edges)
        0.034401: setup
        0.189677: key tensor
        0.007498: target tensor
        0.033391: edge tensor
      0.000089: initializing solutions matrix
      0.032444: loop
      0.000035: postprocessing (MAX MEMORY: 1.591GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.049456: fragment resolution
  0.000356: identify previous emora questions
  0.049083: sal
0.379930: dialogue infer
  0.027238: facts graph types
  0.029052: convert facts graph
    0.003541: to digraph
    0.025312: flatten types (782 concepts)
    0.000185: quantities
  0.000026: process dynamic rules
  0.318366: match
    0.318279: match
      0.005395: querygen
      0.223372: creating graph tensor (1817 nodes, 6659 edges)
        0.038342: setup
        0.006226: key tensor
        0.008304: target tensor
        0.168040: edge tensor
      0.000099: initializing solutions matrix
      0.089169: loop
      0.000015: postprocessing (MAX MEMORY: 2.008GB)
  0.002469: postprocess solutions
0.054228: apply inferences
  0.003596: apply
  0.001017: update types
  0.000199: operate
  0.049396: sal
0.017703: reference id 2
0.192031: reference infer 2
  0.028067: facts graph types
  0.026861: convert facts graph
    0.003409: to digraph
    0.023239: flatten types (793 concepts)
    0.000186: quantities
  0.013992: process dynamic rules
  0.121045: match
    0.120973: match
      0.009721: querygen
      0.079828: creating graph tensor (1697 nodes, 5985 edges)
        0.036213: setup
        0.005848: key tensor
        0.007387: target tensor
        0.028772: edge tensor
      0.000081: initializing solutions matrix
      0.031106: loop
      0.000035: postprocessing (MAX MEMORY: 1.640GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.049884: fragment resolution 2
  0.000384: identify previous emora questions
  0.049484: sal
0.239211: dialogue infer 2
  0.027857: facts graph types
  0.029336: convert facts graph
    0.003541: to digraph
    0.025593: flatten types (793 concepts)
    0.000188: quantities
  0.000025: process dynamic rules
  0.176978: match
    0.176902: match
      0.005098: querygen
      0.094650: creating graph tensor (1854 nodes, 6799 edges)
        0.038181: setup
        0.005647: key tensor
        0.008628: target tensor
        0.040307: edge tensor
      0.000085: initializing solutions matrix
      0.076832: loop
      0.000015: postprocessing (MAX MEMORY: 2.093GB)
  0.002431: postprocess solutions
0.052908: apply inferences 2
  0.002556: apply
  0.000746: update types
  0.000210: operate
  0.049344: sal
0.010309: prepare template nlg
0.260122: template infer
  0.027761: facts graph types
  0.029634: convert facts graph
    0.003739: to digraph
    0.025692: flatten types (793 concepts)
    0.000188: quantities
  0.000025: process dynamic rules
  0.197059: match
    0.196982: match
      0.004690: querygen
      0.090219: creating graph tensor (1854 nodes, 6799 edges)
        0.038971: setup
        0.005984: key tensor
        0.008555: target tensor
        0.034798: edge tensor
      0.000087: initializing solutions matrix
      0.101749: loop
      0.000015: postprocessing (MAX MEMORY: 2.093GB)
  0.003043: postprocess solutions
0.003006: template fillers
0.000016: response sel
0.000183: response exp
0.000014: response rules
0.290087: response assembler
  0.000015: response assembly
  0.227884: update sal
  0.002076: decay sal
  0.060093: prune
    0.000012: setup
    0.000778: select keep
    0.000117: delete old spans
    0.047415: setup essentials
    0.008601: identify essentials
    0.002790: remove not keep

[2.46 s] Considering you like animals, I was wondering, do you like the zoo? There are plenty of different animals to see there.

User: i do do you
i do do you
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1065', 'wm1066')]
CURRENT USER CONCEPTS: {'wm1075', 'emora', 'wm1076', 'wm1086', 'wm1089', 'wm1080', 'wm1081', 'user', 'now', 'prp'}
FRAGMENT REQUEST MERGES: [('wm1116', 'wm1065'), ('wm1119', 'wm1065'), ('user', 'wm1063')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Yeah, the zoo is really awesome. Years ago, I would visit as much as I could and just spend the entire day staring at animals, mesmerized. Do you visit often? (s: 0.42, pr: 0.50)


0.000087: next turn
0.000019: sentence caser
0.110264: elit
0.186169: parse2logic
  0.001224: facts graph types
  0.001985: convert facts graph
    0.000355: to digraph
    0.001588: flatten types (76 concepts)
    0.000029: quantities
  0.000022: process dynamic rules
  0.176063: match
    0.175984: match
      0.000284: querygen
      0.019121: creating graph tensor (104 nodes, 343 edges)
        0.001861: setup
        0.008884: key tensor
        0.000707: target tensor
        0.007563: edge tensor
      0.000078: initializing solutions matrix
      0.156227: loop
      0.000016: postprocessing (MAX MEMORY: 0.007GB)
  0.000992: postprocess solutions
0.000038: multiword mentions
0.000012: ner mentions
0.003160: mention bridge
0.008569: merge bridge
0.033192: knowledge pull
0.017115: reference id
0.190830: reference infer
  0.026833: facts graph types
  0.027041: convert facts graph
    0.004319: to digraph
    0.022515: flatten types (767 concepts)
    0.000182: quantities
  0.013417: process dynamic rules
  0.121300: match
    0.121227: match
      0.008891: querygen
      0.078529: creating graph tensor (1636 nodes, 5791 edges)
        0.033665: setup
        0.005264: key tensor
        0.007051: target tensor
        0.030917: edge tensor
      0.000089: initializing solutions matrix
      0.033492: loop
      0.000033: postprocessing (MAX MEMORY: 1.534GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.078364: fragment resolution
  0.000371: identify previous emora questions
  0.029963: find answer
  0.048012: sal
0.249591: dialogue infer
  0.026548: facts graph types
  0.028689: convert facts graph
    0.003850: to digraph
    0.024642: flatten types (769 concepts)
    0.000183: quantities
  0.000026: process dynamic rules
  0.189188: match
    0.189115: match
      0.005033: querygen
      0.092131: creating graph tensor (1786 nodes, 6561 edges)
        0.037565: setup
        0.006109: key tensor
        0.008072: target tensor
        0.038489: edge tensor
      0.000089: initializing solutions matrix
      0.091633: loop
      0.000015: postprocessing (MAX MEMORY: 1.948GB)
  0.002519: postprocess solutions
0.053563: apply inferences
  0.003292: apply
  0.001403: update types
  0.000270: operate
  0.048578: sal
0.018560: reference id 2
0.193733: reference infer 2
  0.027164: facts graph types
  0.026694: convert facts graph
    0.003809: to digraph
    0.022672: flatten types (780 concepts)
    0.000190: quantities
  0.013135: process dynamic rules
  0.124544: match
    0.124471: match
      0.009024: querygen
      0.082551: creating graph tensor (1678 nodes, 5954 edges)
        0.034335: setup
        0.005727: key tensor
        0.007144: target tensor
        0.033514: edge tensor
      0.000089: initializing solutions matrix
      0.032569: loop
      0.000034: postprocessing (MAX MEMORY: 1.620GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.049515: fragment resolution 2
  0.000370: identify previous emora questions
  0.049128: sal
0.257866: dialogue infer 2
  0.027254: facts graph types
  0.029322: convert facts graph
    0.003548: to digraph
    0.025573: flatten types (780 concepts)
    0.000185: quantities
  0.000025: process dynamic rules
  0.195859: match
    0.195784: match
      0.004607: querygen
      0.095243: creating graph tensor (1827 nodes, 6719 edges)
        0.038233: setup
        0.006257: key tensor
        0.008134: target tensor
        0.040420: edge tensor
      0.000093: initializing solutions matrix
      0.095599: loop
      0.000015: postprocessing (MAX MEMORY: 2.042GB)
  0.002755: postprocess solutions
0.230242: apply inferences 2
  0.003042: apply
  0.000698: update types
  0.000273: operate
  0.226209: sal
0.010126: prepare template nlg
0.293540: template infer
  0.027209: facts graph types
  0.029598: convert facts graph
    0.003992: to digraph
    0.025403: flatten types (782 concepts)
    0.000188: quantities
  0.000027: process dynamic rules
  0.230848: match
    0.230763: match
      0.005341: querygen
      0.103515: creating graph tensor (1834 nodes, 6746 edges)
        0.039428: setup
        0.006870: key tensor
        0.008123: target tensor
        0.047078: edge tensor
      0.000089: initializing solutions matrix
      0.121569: loop
      0.000015: postprocessing (MAX MEMORY: 2.058GB)
  0.003141: postprocess solutions
0.002984: template fillers
0.000017: response sel
0.000203: response exp
0.000014: response rules
0.112384: response assembler
  0.000015: response assembly
  0.049316: update sal
  0.001988: decay sal
  0.061049: prune
    0.000017: setup
    0.000772: select keep
    0.000116: delete old spans
    0.047019: setup essentials
    0.008522: identify essentials
    0.004009: remove not keep

[2.10 s] Yeah, the zoo is really awesome. Years ago, I would visit as much as I could and just spend the entire day staring at animals, mesmerized. Do you visit often?

User: i go every day what zoo is near you
i go every day what zoo is near you
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1127', 'wm1129')]
CURRENT USER CONCEPTS: {'emora', 'zoo', 'wm1169', 'wm1141', 'wm1154', 'wm1163', 'wm1147', 'user', 'wm1142', 'wm1172', 'day', 'wm1153', 'prp', 'wm1146', 'wm1164', 'wm1216', 'wm1159', 'wm1143', 'now'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1127', 'wm1129')]
CURRENT USER CONCEPTS: {'emora', 'zoo', 'wm1169', 'wm1141', 'wm1154', 'wm1163', 'wm1147', 'user', 'wm1142', 'wm1172', 'day', 'wm1153', 'prp', 'wm1146', 'wm1164', 'wm1216', 'wm1159', 'wm1143', 'now'}
FRAGMENT REQUEST MERGES: []

React + Present Options:
	You know, I can't think of the answer to that right now . (s: 0.60, pr: 0.10)


0.000077: next turn
0.000020: sentence caser
0.112178: elit
0.516138: parse2logic
  0.002820: facts graph types
  0.004530: convert facts graph
    0.000953: to digraph
    0.003511: flatten types (171 concepts)
    0.000051: quantities
  0.000022: process dynamic rules
  0.493321: match
    0.493241: match
      0.000547: querygen
      0.078315: creating graph tensor (225 nodes, 770 edges)
        0.004248: setup
        0.061551: key tensor
        0.002118: target tensor
        0.010207: edge tensor
      0.000084: initializing solutions matrix
      0.414080: loop
      0.000015: postprocessing (MAX MEMORY: 0.029GB)
  0.003731: postprocess solutions
0.000055: multiword mentions
0.000013: ner mentions
0.005812: mention bridge
0.010031: merge bridge
0.033805: knowledge pull
0.017845: reference id
0.191702: reference infer
  0.026925: facts graph types
  0.027320: convert facts graph
    0.003510: to digraph
    0.023603: flatten types (766 concepts)
    0.000184: quantities
  0.011338: process dynamic rules
  0.123795: match
    0.123718: match
      0.009278: querygen
      0.081914: creating graph tensor (1697 nodes, 6028 edges)
        0.035127: setup
        0.005836: key tensor
        0.007183: target tensor
        0.032018: edge tensor
      0.000087: initializing solutions matrix
      0.032212: loop
      0.000032: postprocessing (MAX MEMORY: 1.660GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.048867: fragment resolution
  0.000379: identify previous emora questions
  0.000958: find answer
  0.047510: sal
0.249727: dialogue infer
  0.026983: facts graph types
  0.028782: convert facts graph
    0.003456: to digraph
    0.025118: flatten types (766 concepts)
    0.000183: quantities
  0.000027: process dynamic rules
  0.188840: match
    0.188766: match
      0.005204: querygen
      0.093111: creating graph tensor (1833 nodes, 6745 edges)
        0.038682: setup
        0.006302: key tensor
        0.008314: target tensor
        0.037817: edge tensor
      0.000089: initializing solutions matrix
      0.090135: loop
      0.000014: postprocessing (MAX MEMORY: 2.057GB)
  0.002499: postprocess solutions
0.050756: apply inferences
  0.002241: apply
  0.000698: update types
  0.000197: operate
  0.047601: sal
0.016726: reference id 2
0.377333: reference infer 2
  0.026976: facts graph types
  0.026753: convert facts graph
    0.003837: to digraph
    0.022708: flatten types (766 concepts)
    0.000185: quantities
  0.011822: process dynamic rules
  0.309477: match
    0.309403: match
      0.008623: querygen
      0.268302: creating graph tensor (1697 nodes, 6028 edges)
        0.034788: setup
        0.005754: key tensor
        0.007224: target tensor
        0.218506: edge tensor
      0.000098: initializing solutions matrix
      0.032145: loop
      0.000033: postprocessing (MAX MEMORY: 1.660GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.050038: fragment resolution 2
  0.000387: identify previous emora questions
  0.000999: find answer
  0.048635: sal
0.249659: dialogue infer 2
  0.027025: facts graph types
  0.029184: convert facts graph
    0.003467: to digraph
    0.025517: flatten types (766 concepts)
    0.000186: quantities
  0.000027: process dynamic rules
  0.188184: match
    0.188110: match
      0.004779: querygen
      0.093186: creating graph tensor (1833 nodes, 6745 edges)
        0.038514: setup
        0.006800: key tensor
        0.008140: target tensor
        0.037808: edge tensor
      0.000089: initializing solutions matrix
      0.089817: loop
      0.000015: postprocessing (MAX MEMORY: 2.057GB)
  0.002503: postprocess solutions
0.051402: apply inferences 2
  0.002321: apply
  0.000720: update types
  0.000194: operate
  0.048147: sal
0.009486: prepare template nlg
0.273498: template infer
  0.027046: facts graph types
  0.029140: convert facts graph
    0.003500: to digraph
    0.025442: flatten types (766 concepts)
    0.000184: quantities
  0.000025: process dynamic rules
  0.212193: match
    0.212116: match
      0.005186: querygen
      0.099923: creating graph tensor (1833 nodes, 6745 edges)
        0.038804: setup
        0.006322: key tensor
        0.008172: target tensor
        0.044626: edge tensor
      0.000091: initializing solutions matrix
      0.106683: loop
      0.000015: postprocessing (MAX MEMORY: 2.057GB)
  0.002437: postprocess solutions
0.002829: template fillers
0.000015: response sel
0.000157: response exp
0.000014: response rules
0.109156: response assembler
  0.000014: response assembly
  0.048420: update sal
  0.001947: decay sal
  0.058760: prune
    0.000012: setup
    0.000741: select keep
    0.000134: delete old spans
    0.046585: setup essentials
    0.008754: identify essentials
    0.002141: remove not keep

[2.38 s] You know, I can't think of the answer to that right now .

User: do you have a job
do you have a job
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

0.000075: next turn
0.000019: sentence caser
0.120856: elit
0.321642: parse2logic
  0.001856: facts graph types
  0.002923: convert facts graph
    0.000603: to digraph
    0.002265: flatten types (115 concepts)
    0.000041: quantities
  0.000021: process dynamic rules
  0.305332: match
    0.305254: match
      0.000346: querygen
      0.031945: creating graph tensor (145 nodes, 482 edges)
        0.002661: setup
        0.022024: key tensor
        0.001472: target tensor
        0.005656: edge tensor
      0.000081: initializing solutions matrix
      0.272549: loop
      0.000018: postprocessing (MAX MEMORY: 0.012GB)
  0.003283: postprocess solutions
0.000040: multiword mentions
0.000012: ner mentions
0.003821: mention bridge
0.008862: merge bridge
0.033464: knowledge pull
0.017318: reference id
0.187110: reference infer
  0.027031: facts graph types
  0.027247: convert facts graph
    0.004395: to digraph
    0.022648: flatten types (765 concepts)
    0.000181: quantities
  0.011735: process dynamic rules
  0.118907: match
    0.118833: match
      0.008770: querygen
      0.078787: creating graph tensor (1683 nodes, 5977 edges)
        0.035080: setup
        0.005372: key tensor
        0.007377: target tensor
        0.029293: edge tensor
      0.000089: initializing solutions matrix
      0.030982: loop
      0.000030: postprocessing (MAX MEMORY: 1.632GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.048326: fragment resolution
  0.000376: identify previous emora questions
  0.047934: sal
0.440365: dialogue infer
  0.027602: facts graph types
  0.028935: convert facts graph
    0.003516: to digraph
    0.025224: flatten types (765 concepts)
    0.000181: quantities
  0.000025: process dynamic rules
  0.378611: match
    0.378536: match
      0.004516: querygen
      0.282720: creating graph tensor (1823 nodes, 6710 edges)
        0.039057: setup
        0.006605: key tensor
        0.197202: target tensor
        0.037650: edge tensor
      0.000092: initializing solutions matrix
      0.090966: loop
      0.000015: postprocessing (MAX MEMORY: 2.035GB)
  0.002495: postprocess solutions
0.051438: apply inferences
  0.002277: apply
  0.000715: update types
  0.000197: operate
  0.048227: sal
0.016844: reference id 2
0.187488: reference infer 2
  0.027032: facts graph types
  0.027015: convert facts graph
    0.003966: to digraph
    0.022843: flatten types (765 concepts)
    0.000182: quantities
  0.011880: process dynamic rules
  0.119212: match
    0.119135: match
      0.008513: querygen
      0.079188: creating graph tensor (1683 nodes, 5977 edges)
        0.035388: setup
        0.005431: key tensor
        0.007373: target tensor
        0.029341: edge tensor
      0.000091: initializing solutions matrix
      0.031123: loop
      0.000031: postprocessing (MAX MEMORY: 1.632GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.048206: fragment resolution 2
  0.000390: identify previous emora questions
  0.047799: sal
0.250832: dialogue infer 2
  0.027656: facts graph types
  0.029275: convert facts graph
    0.003681: to digraph
    0.025399: flatten types (765 concepts)
    0.000180: quantities
  0.000026: process dynamic rules
  0.188716: match
    0.188639: match
      0.004546: querygen
      0.092738: creating graph tensor (1823 nodes, 6710 edges)
        0.038807: setup
        0.006744: key tensor
        0.008070: target tensor
        0.037239: edge tensor
      0.000089: initializing solutions matrix
      0.091030: loop
      0.000015: postprocessing (MAX MEMORY: 2.035GB)
  0.002474: postprocess solutions
0.051077: apply inferences 2
  0.002302: apply
  0.000715: update types
  0.000197: operate
  0.047843: sal
0.009588: prepare template nlg
0.293437: template infer
  0.027232: facts graph types
  0.029009: convert facts graph
    0.003628: to digraph
    0.025187: flatten types (765 concepts)
    0.000180: quantities
  0.000025: process dynamic rules
  0.231966: match
    0.231891: match
      0.004607: querygen
      0.113374: creating graph tensor (1823 nodes, 6710 edges)
        0.038600: setup
        0.006814: key tensor
        0.008010: target tensor
        0.057774: edge tensor
      0.000092: initializing solutions matrix
      0.113573: loop
      0.000015: postprocessing (MAX MEMORY: 2.035GB)
  0.002393: postprocess solutions
0.002779: template fillers
0.000016: response sel
0.000553: response exp
0.000014: response rules
0.111589: response assembler
  0.000015: response assembly
  0.049110: update sal
  0.001975: decay sal
  0.060473: prune
    0.000012: setup
    0.000759: select keep
    0.000136: delete old spans
    0.047537: setup essentials
    0.008394: identify essentials
    0.003247: remove not keep

[2.21 s] Actually , I was wondering if you are interested in artificial intelligence ?

User: yes but answer my question first
yes but answer my question first
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1278', 'wm1279')]
CURRENT USER CONCEPTS: {'wm1293', 'wm1314', 'wm1310', 'unknown_noun', 'but', 'wm1315', 'wm1301', 'predicate', 'wm1322', 'wm1292', 'wm1294', 'wm1326', 'wm1313', 'wm1325', 'wm1320', 'user', 'wm1297', 'wm1306', 'wm1330', 'unknown_other', 'wm1298', 'wm1321', 'answer'}
FRAGMENT REQUEST MERGES: [('wm1313', 'wm1278')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Do you think A I is dangerous? I've read a lot of books where A I takes over the world. I'd never do that, promise. (s: 0.55, pr: 0.50)


0.000076: next turn
0.000019: sentence caser
0.110619: elit
0.168116: parse2logic
  0.001988: facts graph types
  0.003166: convert facts graph
    0.000658: to digraph
    0.002454: flatten types (123 concepts)
    0.000042: quantities
  0.000021: process dynamic rules
  0.150975: match
    0.150895: match
      0.000366: querygen
      0.023787: creating graph tensor (155 nodes, 513 edges)
        0.002849: setup
        0.004860: key tensor
        0.000986: target tensor
        0.014922: edge tensor
      0.000080: initializing solutions matrix
      0.126402: loop
      0.000015: postprocessing (MAX MEMORY: 0.013GB)
  0.002264: postprocess solutions
0.000047: multiword mentions
0.000012: ner mentions
0.006407: mention bridge
0.018287: merge bridge
0.034628: knowledge pull
0.019834: reference id
0.210716: reference infer
  0.028141: facts graph types
  0.028451: convert facts graph
    0.004411: to digraph
    0.023831: flatten types (790 concepts)
    0.000186: quantities
  0.012194: process dynamic rules
  0.139637: match
    0.139566: match
      0.009699: querygen
      0.096936: creating graph tensor (1771 nodes, 6297 edges)
        0.036152: setup
        0.006175: key tensor
        0.007469: target tensor
        0.045303: edge tensor
      0.000087: initializing solutions matrix
      0.032617: loop
      0.000032: postprocessing (MAX MEMORY: 1.811GB)
  0.000008: postprocess solutions
0.000013: reference resolution
0.079027: fragment resolution
  0.000398: identify previous emora questions
  0.029838: find answer
  0.048773: sal
0.451049: dialogue infer
  0.027919: facts graph types
  0.030028: convert facts graph
    0.003779: to digraph
    0.026050: flatten types (787 concepts)
    0.000184: quantities
  0.000026: process dynamic rules
  0.387410: match
    0.387334: match
      0.004735: querygen
      0.286313: creating graph tensor (1903 nodes, 7020 edges)
        0.225110: setup
        0.007468: key tensor
        0.008565: target tensor
        0.043005: edge tensor
      0.000090: initializing solutions matrix
      0.095950: loop
      0.000015: postprocessing (MAX MEMORY: 2.227GB)
  0.002907: postprocess solutions
0.055031: apply inferences
  0.003650: apply
  0.001006: update types
  0.000302: operate
  0.050053: sal
0.019184: reference id 2
0.208679: reference infer 2
  0.028310: facts graph types
  0.028426: convert facts graph
    0.003589: to digraph
    0.024624: flatten types (799 concepts)
    0.000188: quantities
  0.011443: process dynamic rules
  0.138103: match
    0.138028: match
      0.009550: querygen
      0.095451: creating graph tensor (1796 nodes, 6398 edges)
        0.037461: setup
        0.005893: key tensor
        0.007884: target tensor
        0.042340: edge tensor
      0.000087: initializing solutions matrix
      0.032703: loop
      0.000033: postprocessing (MAX MEMORY: 1.868GB)
  0.000009: postprocess solutions
0.000013: reference resolution 2
0.050442: fragment resolution 2
  0.000419: identify previous emora questions
  0.050007: sal
0.273102: dialogue infer 2
  0.028471: facts graph types
  0.030685: convert facts graph
    0.003644: to digraph
    0.026836: flatten types (799 concepts)
    0.000191: quantities
  0.000025: process dynamic rules
  0.208308: match
    0.208233: match
      0.005325: querygen
      0.106634: creating graph tensor (1936 nodes, 7138 edges)
        0.040977: setup
        0.007100: key tensor
        0.008599: target tensor
        0.047821: edge tensor
      0.000091: initializing solutions matrix
      0.095947: loop
      0.000015: postprocessing (MAX MEMORY: 2.303GB)
  0.002874: postprocess solutions
0.053865: apply inferences 2
  0.002582: apply
  0.000710: update types
  0.000247: operate
  0.050306: sal
0.009777: prepare template nlg
0.290884: template infer
  0.028327: facts graph types
  0.030711: convert facts graph
    0.003706: to digraph
    0.026803: flatten types (799 concepts)
    0.000188: quantities
  0.000025: process dynamic rules
  0.226284: match
    0.226207: match
      0.005669: querygen
      0.102824: creating graph tensor (1936 nodes, 7138 edges)
        0.040821: setup
        0.007157: key tensor
        0.008480: target tensor
        0.044261: edge tensor
      0.000090: initializing solutions matrix
      0.117382: loop
      0.000016: postprocessing (MAX MEMORY: 2.303GB)
  0.002760: postprocess solutions
0.002996: template fillers
0.000016: response sel
0.000316: response exp
0.000016: response rules
0.115510: response assembler
  0.000017: response assembly
  0.050583: update sal
  0.002066: decay sal
  0.062829: prune
    0.000019: setup
    0.000790: select keep
    0.000111: delete old spans
    0.049765: setup essentials
    0.008061: identify essentials
    0.003227: remove not keep

[2.18 s] Do you think A I is dangerous? I've read a lot of books where A I takes over the world. I'd never do that, promise.

User: yes
yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1387', 'wm1388')]
CURRENT USER CONCEPTS: {'wm1400', 'wm1399', 'user', 'wm1401', 'predicate'}
FRAGMENT REQUEST MERGES: [('wm1399', 'wm1387')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Huh. I don't know, I feel A I is really far away from actually being intelligent, but I do agree there are dangers in how it can be used today. Just like with any new technology. (s: 0.61, pr: 1.00)
	A I is really beginning to change our lives. How do you think it will improve your life in the near future? (s: 0.25, pr: 0.50)
	A I is really exciting. It can replace a lot of menial work for people and even gain insights that are hard to get otherwise. I often am surprised at people's intuiton when I talk to them , and I feel like A I does something similar. (s: 0.76, pr: 0.10)
	You know, the famous author Terry Pratchett said real stupidity beats artificial intelligence every time . (s: 0.76, pr: 0.10)


0.000076: next turn
0.000016: sentence caser
0.109615: elit
0.046679: parse2logic
  0.000395: facts graph types
  0.000832: convert facts graph
    0.000342: to digraph
    0.000458: flatten types (26 concepts)
    0.000019: quantities
  0.000022: process dynamic rules
  0.042835: match
    0.042751: match
      0.000090: querygen
      0.008105: creating graph tensor (30 nodes, 82 edges)
        0.000508: setup
        0.002808: key tensor
        0.000375: target tensor
        0.004363: edge tensor
      0.000073: initializing solutions matrix
      0.034274: loop
      0.000014: postprocessing (MAX MEMORY: 0.001GB)
  0.000470: postprocess solutions
0.000033: multiword mentions
0.000012: ner mentions
0.001532: mention bridge
0.006241: merge bridge
0.032146: knowledge pull
0.018357: reference id
0.372166: reference infer
  0.025151: facts graph types
  0.026634: convert facts graph
    0.004310: to digraph
    0.022125: flatten types (734 concepts)
    0.000175: quantities
  0.191854: process dynamic rules
  0.126291: match
    0.126208: match
      0.009366: querygen
      0.085886: creating graph tensor (1635 nodes, 5821 edges)
        0.034730: setup
        0.005752: key tensor
        0.007218: target tensor
        0.036472: edge tensor
      0.000086: initializing solutions matrix
      0.030639: loop
      0.000033: postprocessing (MAX MEMORY: 1.547GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.048642: fragment resolution
  0.000432: identify previous emora questions
  0.001956: find answer
  0.046235: sal
0.256364: dialogue infer
  0.025211: facts graph types
  0.028004: convert facts graph
    0.003365: to digraph
    0.024451: flatten types (730 concepts)
    0.000174: quantities
  0.000027: process dynamic rules
  0.197509: match
    0.197435: match
      0.004400: querygen
      0.092970: creating graph tensor (1752 nodes, 6465 edges)
        0.037523: setup
        0.006446: key tensor
        0.007712: target tensor
        0.039412: edge tensor
      0.000087: initializing solutions matrix
      0.099737: loop
      0.000015: postprocessing (MAX MEMORY: 1.888GB)
  0.003016: postprocess solutions
0.051609: apply inferences
  0.003539: apply
  0.000965: update types
  0.000236: operate
  0.046846: sal
0.017291: reference id 2
0.205901: reference infer 2
  0.026642: facts graph types
  0.026065: convert facts graph
    0.003311: to digraph
    0.022555: flatten types (740 concepts)
    0.000176: quantities
  0.011096: process dynamic rules
  0.139829: match
    0.139756: match
      0.009034: querygen
      0.098096: creating graph tensor (1640 nodes, 5845 edges)
        0.033687: setup
        0.005293: key tensor
        0.007284: target tensor
        0.049977: edge tensor
      0.000088: initializing solutions matrix
      0.032299: loop
      0.000032: postprocessing (MAX MEMORY: 1.559GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.046771: fragment resolution 2
  0.000434: identify previous emora questions
  0.046320: sal
0.264673: dialogue infer 2
  0.025635: facts graph types
  0.028306: convert facts graph
    0.003522: to digraph
    0.024595: flatten types (740 concepts)
    0.000175: quantities
  0.000026: process dynamic rules
  0.205186: match
    0.205112: match
      0.004360: querygen
      0.102189: creating graph tensor (1777 nodes, 6558 edges)
        0.038112: setup
        0.006447: key tensor
        0.007807: target tensor
        0.047870: edge tensor
      0.000092: initializing solutions matrix
      0.098241: loop
      0.000014: postprocessing (MAX MEMORY: 1.943GB)
  0.003008: postprocess solutions
0.050092: apply inferences 2
  0.002757: apply
  0.000682: update types
  0.000242: operate
  0.046391: sal
0.009325: prepare template nlg
0.443920: template infer
  0.025584: facts graph types
  0.028339: convert facts graph
    0.003548: to digraph
    0.024599: flatten types (740 concepts)
    0.000178: quantities
  0.000026: process dynamic rules
  0.384557: match
    0.384480: match
      0.004435: querygen
      0.276630: creating graph tensor (1777 nodes, 6558 edges)
        0.222487: setup
        0.006642: key tensor
        0.008138: target tensor
        0.037241: edge tensor
      0.000092: initializing solutions matrix
      0.103078: loop
      0.000015: postprocessing (MAX MEMORY: 1.943GB)
  0.002684: postprocess solutions
0.002246: template fillers
0.000017: response sel
0.000108: response exp
0.000013: response rules
0.103151: response assembler
  0.000015: response assembly
  0.046829: update sal
  0.001909: decay sal
  0.054369: prune
    0.000017: setup
    0.000738: select keep
    0.000111: delete old spans
    0.043932: setup essentials
    0.007822: identify essentials
    0.001158: remove not keep

[2.09 s] Huh. I don't know, I feel A I is really far away from actually being intelligent, but I do agree there are dangers in how it can be used today. Just like with any new technology.

User: yeah i think ai could be bad because poeple are stupid
yeah i think ai could be bad because poeple are stupid
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	A I is really beginning to change our lives. How do you think it will improve your life in the near future? (s: 0.21, pr: 0.50)
	A I is really exciting. It can replace a lot of menial work for people and even gain insights that are hard to get otherwise. I often am surprised at people's intuiton when I talk to them , and I feel like A I does something similar. (s: 0.65, pr: 0.10)
	You know, the famous author Terry Pratchett said real stupidity beats artificial intelligence every time . (s: 0.65, pr: 0.10)


0.000072: next turn
0.000020: sentence caser
0.112978: elit
0.290531: parse2logic
  0.003657: facts graph types
  0.006796: convert facts graph
    0.001278: to digraph
    0.005432: flatten types (219 concepts)
    0.000071: quantities
  0.000022: process dynamic rules
  0.260129: match
    0.260047: match
      0.000682: querygen
      0.023016: creating graph tensor (304 nodes, 1060 edges)
        0.006454: setup
        0.005331: key tensor
        0.001588: target tensor
        0.009399: edge tensor
      0.000082: initializing solutions matrix
      0.236067: loop
      0.000013: postprocessing (MAX MEMORY: 0.053GB)
  0.004932: postprocess solutions
0.000062: multiword mentions
0.000012: ner mentions
0.007089: mention bridge
0.017122: merge bridge
0.036686: knowledge pull
0.015939: reference id
0.208026: reference infer
  0.029529: facts graph types
  0.030308: convert facts graph
    0.004434: to digraph
    0.025658: flatten types (824 concepts)
    0.000194: quantities
  0.010814: process dynamic rules
  0.134756: match
    0.134680: match
      0.009655: querygen
      0.091324: creating graph tensor (1857 nodes, 6641 edges)
        0.038253: setup
        0.006144: key tensor
        0.008179: target tensor
        0.036872: edge tensor
      0.000086: initializing solutions matrix
      0.033391: loop
      0.000032: postprocessing (MAX MEMORY: 2.010GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.052012: fragment resolution
  0.000388: identify previous emora questions
  0.051608: sal
0.266012: dialogue infer
  0.029590: facts graph types
  0.031393: convert facts graph
    0.004171: to digraph
    0.026999: flatten types (824 concepts)
    0.000207: quantities
  0.000026: process dynamic rules
  0.199592: match
    0.199514: match
      0.005601: querygen
      0.107591: creating graph tensor (1992 nodes, 7343 edges)
        0.042085: setup
        0.007116: key tensor
        0.009181: target tensor
        0.046939: edge tensor
      0.000091: initializing solutions matrix
      0.086003: loop
      0.000015: postprocessing (MAX MEMORY: 2.436GB)
  0.002487: postprocess solutions
0.055104: apply inferences
  0.002557: apply
  0.000786: update types
  0.000262: operate
  0.051477: sal
0.016117: reference id 2
0.203400: reference infer 2
  0.030101: facts graph types
  0.029474: convert facts graph
    0.003647: to digraph
    0.025610: flatten types (825 concepts)
    0.000194: quantities
  0.010920: process dynamic rules
  0.130405: match
    0.130329: match
      0.009507: querygen
      0.090876: creating graph tensor (1861 nodes, 6657 edges)
        0.037655: setup
        0.006465: key tensor
        0.008106: target tensor
        0.036797: edge tensor
      0.000087: initializing solutions matrix
      0.029627: loop
      0.000032: postprocessing (MAX MEMORY: 2.020GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.051577: fragment resolution 2
  0.000399: identify previous emora questions
  0.051161: sal
0.457399: dialogue infer 2
  0.029604: facts graph types
  0.031549: convert facts graph
    0.004018: to digraph
    0.027324: flatten types (825 concepts)
    0.000193: quantities
  0.000026: process dynamic rules
  0.390692: match
    0.390614: match
      0.004921: querygen
      0.295700: creating graph tensor (1996 nodes, 7359 edges)
        0.228097: setup
        0.007455: key tensor
        0.008862: target tensor
        0.048992: edge tensor
      0.000093: initializing solutions matrix
      0.089666: loop
      0.000015: postprocessing (MAX MEMORY: 2.447GB)
  0.002518: postprocess solutions
0.055440: apply inferences 2
  0.002210: apply
  0.000750: update types
  0.000273: operate
  0.052186: sal
0.010075: prepare template nlg
0.281621: template infer
  0.029676: facts graph types
  0.031508: convert facts graph
    0.003856: to digraph
    0.027444: flatten types (825 concepts)
    0.000193: quantities
  0.000026: process dynamic rules
  0.215206: match
    0.215128: match
      0.005763: querygen
      0.109744: creating graph tensor (1996 nodes, 7359 edges)
        0.042938: setup
        0.007567: key tensor
        0.008756: target tensor
        0.048261: edge tensor
      0.000091: initializing solutions matrix
      0.099292: loop
      0.000015: postprocessing (MAX MEMORY: 2.447GB)
  0.002203: postprocess solutions
0.001509: template fillers
0.000016: response sel
0.000142: response exp
0.000014: response rules
0.118850: response assembler
  0.000015: response assembly
  0.051827: update sal
  0.002130: decay sal
  0.064862: prune
    0.000018: setup
    0.000830: select keep
    0.000114: delete old spans
    0.052711: setup essentials
    0.007473: identify essentials
    0.003103: remove not keep

[2.26 s] A I is really beginning to change our lives. How do you think it will improve your life in the near future?

User: i will be able to do less and have more
i will be able to do less and have more
ARG REQUESTS: [('emora', 'request', 'wm1419', 'wm1420')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm1536', 'wm1568', 'wm1557', 'wm1573', 'wm1576', 'wm1565', 'wm1547', 'wm1558', 'more', 'wm1539', 'have', 'wm1572', 'wm1556', 'user', 'wm1546', 'prp', 'less', 'wm1545', 'wm1569', 'wm1542', 'wm1563', 'now', 'unknown_other', 'wm1552', 'unknown_adj'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: [('emora', 'request', 'wm1419', 'wm1420')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm1536', 'wm1568', 'wm1557', 'wm1573', 'wm1576', 'wm1565', 'wm1547', 'wm1558', 'more', 'wm1539', 'have', 'wm1572', 'wm1556', 'user', 'wm1546', 'prp', 'less', 'wm1545', 'wm1569', 'wm1542', 'wm1563', 'now', 'unknown_other', 'wm1552', 'unknown_adj'}
FRAGMENT REQUEST MERGES: []

React + Present Options:
	For me, other than letting me talk to you, I think A I will help people do their jobs fully - I think every job has a repetitive component that is necessary to complete to enable the fulfilling parts. A I can help do those boring parts. (s: 0.46, pr: 0.50)
	A I is really exciting. It can replace a lot of menial work for people and even gain insights that are hard to get otherwise. I often am surprised at people's intuiton when I talk to them , and I feel like A I does something similar. (s: 0.53, pr: 0.10)
	You know, the famous author Terry Pratchett said real stupidity beats artificial intelligence every time . (s: 0.53, pr: 0.10)


0.000074: next turn
0.000019: sentence caser
0.116178: elit
0.619009: parse2logic
  0.003436: facts graph types
  0.005337: convert facts graph
    0.001136: to digraph
    0.004129: flatten types (203 concepts)
    0.000058: quantities
  0.000021: process dynamic rules
  0.591965: match
    0.591885: match
      0.000571: querygen
      0.110805: creating graph tensor (259 nodes, 897 edges)
        0.005011: setup
        0.091903: key tensor
        0.002254: target tensor
        0.011415: edge tensor
      0.000085: initializing solutions matrix
      0.479982: loop
      0.000021: postprocessing (MAX MEMORY: 0.051GB)
  0.002882: postprocess solutions
0.000052: multiword mentions
0.000013: ner mentions
0.006721: mention bridge
0.018513: merge bridge
0.037875: knowledge pull
0.014206: reference id
0.212183: reference infer
  0.030493: facts graph types
  0.030889: convert facts graph
    0.004065: to digraph
    0.026604: flatten types (841 concepts)
    0.000198: quantities
  0.010809: process dynamic rules
  0.137420: match
    0.137342: match
      0.008924: querygen
      0.095655: creating graph tensor (1913 nodes, 6862 edges)
        0.039654: setup
        0.006847: key tensor
        0.008331: target tensor
        0.038912: edge tensor
      0.000088: initializing solutions matrix
      0.032453: loop
      0.000030: postprocessing (MAX MEMORY: 2.144GB)
  0.000009: postprocess solutions
0.000014: reference resolution
0.084928: fragment resolution
  0.000400: identify previous emora questions
  0.031573: find answer
  0.052935: sal
0.442562: dialogue infer
  0.030360: facts graph types
  0.031773: convert facts graph
    0.004205: to digraph
    0.027355: flatten types (841 concepts)
    0.000199: quantities
  0.000026: process dynamic rules
  0.374838: match
    0.374762: match
      0.005713: querygen
      0.284928: creating graph tensor (2029 nodes, 7475 edges)
        0.042908: setup
        0.007270: key tensor
        0.009299: target tensor
        0.222925: edge tensor
      0.000095: initializing solutions matrix
      0.083793: loop
      0.000015: postprocessing (MAX MEMORY: 2.525GB)
  0.002524: postprocess solutions
0.235244: apply inferences
  0.002656: apply
  0.000748: update types
  0.000212: operate
  0.231606: sal
0.014325: reference id 2
0.201901: reference infer 2
  0.030892: facts graph types
  0.030472: convert facts graph
    0.004519: to digraph
    0.025730: flatten types (842 concepts)
    0.000200: quantities
  0.010730: process dynamic rules
  0.127205: match
    0.127124: match
      0.008946: querygen
      0.090469: creating graph tensor (1917 nodes, 6878 edges)
        0.039593: setup
        0.005881: key tensor
        0.008396: target tensor
        0.034650: edge tensor
      0.000086: initializing solutions matrix
      0.027391: loop
      0.000030: postprocessing (MAX MEMORY: 2.154GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.084443: fragment resolution 2
  0.000401: identify previous emora questions
  0.031693: find answer
  0.052329: sal
0.259907: dialogue infer 2
  0.030561: facts graph types
  0.032504: convert facts graph
    0.004159: to digraph
    0.028133: flatten types (842 concepts)
    0.000197: quantities
  0.000026: process dynamic rules
  0.191331: match
    0.191252: match
      0.005172: querygen
      0.109470: creating graph tensor (2033 nodes, 7491 edges)
        0.042738: setup
        0.006491: key tensor
        0.009226: target tensor
        0.048866: edge tensor
      0.000085: initializing solutions matrix
      0.076289: loop
      0.000015: postprocessing (MAX MEMORY: 2.536GB)
  0.002500: postprocess solutions
0.056234: apply inferences 2
  0.002381: apply
  0.000739: update types
  0.000211: operate
  0.052883: sal
0.010008: prepare template nlg
0.259668: template infer
  0.030643: facts graph types
  0.031970: convert facts graph
    0.003883: to digraph
    0.027873: flatten types (842 concepts)
    0.000200: quantities
  0.000026: process dynamic rules
  0.191652: match
    0.191577: match
      0.005887: querygen
      0.101588: creating graph tensor (2033 nodes, 7491 edges)
        0.043457: setup
        0.006517: key tensor
        0.009258: target tensor
        0.040282: edge tensor
      0.000083: initializing solutions matrix
      0.083786: loop
      0.000015: postprocessing (MAX MEMORY: 2.536GB)
  0.002407: postprocess solutions
0.001563: template fillers
0.000023: response sel
0.000049: response exp
0.000013: response rules
0.120720: response assembler
  0.000015: response assembly
  0.052612: update sal
  0.002166: decay sal
  0.065913: prune
    0.000013: setup
    0.000826: select keep
    0.000118: delete old spans
    0.053207: setup essentials
    0.007631: identify essentials
    0.003691: remove not keep

[2.80 s] For me, other than letting me talk to you, I think A I will help people do their jobs fully - I think every job has a repetitive component that is necessary to complete to enable the fulfilling parts. A I can help do those boring parts.

User: yes sometimes things are boring and ai will help
yes sometimes things are boring and ai will help
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	A I is really exciting. It can replace a lot of menial work for people and even gain insights that are hard to get otherwise. I often am surprised at people's intuiton when I talk to them , and I feel like A I does something similar. (s: 0.43, pr: 0.10)
	You know, the famous author Terry Pratchett said real stupidity beats artificial intelligence every time . (s: 0.43, pr: 0.10)


0.000074: next turn
0.000018: sentence caser
0.115835: elit
0.899805: parse2logic
  0.003302: facts graph types
  0.004956: convert facts graph
    0.001001: to digraph
    0.003884: flatten types (190 concepts)
    0.000056: quantities
  0.000022: process dynamic rules
  0.874468: match
    0.874382: match
      0.000549: querygen
      0.261094: creating graph tensor (242 nodes, 825 edges)
        0.005305: setup
        0.242827: key tensor
        0.001494: target tensor
        0.011162: edge tensor
      0.000086: initializing solutions matrix
      0.612194: loop
      0.000024: postprocessing (MAX MEMORY: 0.033GB)
  0.003318: postprocess solutions
0.000058: multiword mentions
0.000013: ner mentions
0.008049: mention bridge
0.013678: merge bridge
0.037296: knowledge pull
0.012380: reference id
0.397097: reference infer
  0.031501: facts graph types
  0.031648: convert facts graph
    0.004732: to digraph
    0.026690: flatten types (860 concepts)
    0.000203: quantities
  0.009555: process dynamic rules
  0.321586: match
    0.321512: match
      0.009171: querygen
      0.281276: creating graph tensor (1937 nodes, 6945 edges)
        0.223548: setup
        0.007041: key tensor
        0.008442: target tensor
        0.040142: edge tensor
      0.000090: initializing solutions matrix
      0.030751: loop
      0.000030: postprocessing (MAX MEMORY: 2.197GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.054017: fragment resolution
  0.000388: identify previous emora questions
  0.053612: sal
0.281098: dialogue infer
  0.031609: facts graph types
  0.032453: convert facts graph
    0.004084: to digraph
    0.028148: flatten types (860 concepts)
    0.000206: quantities
  0.000027: process dynamic rules
  0.211574: match
    0.211497: match
      0.005658: querygen
      0.113841: creating graph tensor (2044 nodes, 7511 edges)
        0.042807: setup
        0.007665: key tensor
        0.009060: target tensor
        0.052101: edge tensor
      0.000089: initializing solutions matrix
      0.091652: loop
      0.000017: postprocessing (MAX MEMORY: 2.551GB)
  0.002406: postprocess solutions
0.056578: apply inferences
  0.002362: apply
  0.000700: update types
  0.000262: operate
  0.053231: sal
0.012357: reference id 2
0.211508: reference infer 2
  0.031819: facts graph types
  0.030705: convert facts graph
    0.004142: to digraph
    0.026337: flatten types (860 concepts)
    0.000203: quantities
  0.009675: process dynamic rules
  0.136754: match
    0.136680: match
      0.009063: querygen
      0.096598: creating graph tensor (1937 nodes, 6945 edges)
        0.039237: setup
        0.006981: key tensor
        0.008306: target tensor
        0.040113: edge tensor
      0.000090: initializing solutions matrix
      0.030698: loop
      0.000031: postprocessing (MAX MEMORY: 2.197GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.053523: fragment resolution 2
  0.000360: identify previous emora questions
  0.053147: sal
0.277298: dialogue infer 2
  0.031630: facts graph types
  0.032339: convert facts graph
    0.004017: to digraph
    0.028107: flatten types (860 concepts)
    0.000201: quantities
  0.000026: process dynamic rules
  0.207963: match
    0.207886: match
      0.005593: querygen
      0.110039: creating graph tensor (2044 nodes, 7511 edges)
        0.042175: setup
        0.007727: key tensor
        0.009072: target tensor
        0.048939: edge tensor
      0.000088: initializing solutions matrix
      0.091935: loop
      0.000015: postprocessing (MAX MEMORY: 2.551GB)
  0.002409: postprocess solutions
0.056475: apply inferences 2
  0.002264: apply
  0.000698: update types
  0.000538: operate
  0.052957: sal
0.010010: prepare template nlg
0.461588: template infer
  0.031604: facts graph types
  0.032557: convert facts graph
    0.004189: to digraph
    0.028151: flatten types (860 concepts)
    0.000203: quantities
  0.000026: process dynamic rules
  0.392111: match
    0.392033: match
      0.005166: querygen
      0.296395: creating graph tensor (2044 nodes, 7511 edges)
        0.230188: setup
        0.007719: key tensor
        0.009286: target tensor
        0.046827: edge tensor
      0.000092: initializing solutions matrix
      0.090146: loop
      0.000015: postprocessing (MAX MEMORY: 2.551GB)
  0.002136: postprocess solutions
0.001434: template fillers
0.000015: response sel
0.000070: response exp
0.000013: response rules
0.124204: response assembler
  0.000014: response assembly
  0.053891: update sal
  0.002185: decay sal
  0.068099: prune
    0.000017: setup
    0.000884: select keep
    0.000094: delete old spans
    0.054425: setup essentials
    0.007340: identify essentials
    0.004698: remove not keep

[3.09 s] A I is really exciting. It can replace a lot of menial work for people and even gain insights that are hard to get otherwise. I often am surprised at people's intuiton when I talk to them , and I feel like A I does something similar.

User: cool
cool
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	You know, the famous author Terry Pratchett said real stupidity beats artificial intelligence every time . (s: 0.72, pr: 0.10)


0.000083: next turn
0.000018: sentence caser
0.110795: elit
0.107170: parse2logic
  0.000384: facts graph types
  0.000928: convert facts graph
    0.000378: to digraph
    0.000519: flatten types (28 concepts)
    0.000019: quantities
  0.000021: process dynamic rules
  0.103325: match
    0.103246: match
      0.000096: querygen
      0.036228: creating graph tensor (34 nodes, 96 edges)
        0.000588: setup
        0.029872: key tensor
        0.000417: target tensor
        0.005294: edge tensor
      0.000074: initializing solutions matrix
      0.066610: loop
      0.000015: postprocessing (MAX MEMORY: 0.001GB)
  0.000272: postprocess solutions
0.000033: multiword mentions
0.000012: ner mentions
0.001234: mention bridge
0.008275: merge bridge
0.032448: knowledge pull
0.011969: reference id
0.188366: reference infer
  0.025860: facts graph types
  0.027348: convert facts graph
    0.003695: to digraph
    0.023449: flatten types (753 concepts)
    0.000183: quantities
  0.009081: process dynamic rules
  0.123856: match
    0.123786: match
      0.008769: querygen
      0.086063: creating graph tensor (1667 nodes, 5972 edges)
        0.034087: setup
        0.006036: key tensor
        0.007249: target tensor
        0.036925: edge tensor
      0.000090: initializing solutions matrix
      0.028643: loop
      0.000030: postprocessing (MAX MEMORY: 1.625GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.047703: fragment resolution
  0.000352: identify previous emora questions
  0.047335: sal
0.244278: dialogue infer
  0.026032: facts graph types
  0.028195: convert facts graph
    0.003454: to digraph
    0.024543: flatten types (753 concepts)
    0.000183: quantities
  0.000026: process dynamic rules
  0.185056: match
    0.184981: match
      0.004397: querygen
      0.093746: creating graph tensor (1764 nodes, 6488 edges)
        0.037624: setup
        0.006561: key tensor
        0.007697: target tensor
        0.039975: edge tensor
      0.000090: initializing solutions matrix
      0.086519: loop
      0.000015: postprocessing (MAX MEMORY: 1.904GB)
  0.002426: postprocess solutions
0.050234: apply inferences
  0.002293: apply
  0.000643: update types
  0.000212: operate
  0.047067: sal
0.011602: reference id 2
0.187004: reference infer 2
  0.026089: facts graph types
  0.026656: convert facts graph
    0.003417: to digraph
    0.023034: flatten types (753 concepts)
    0.000183: quantities
  0.009054: process dynamic rules
  0.122974: match
    0.122900: match
      0.007653: querygen
      0.086368: creating graph tensor (1667 nodes, 5972 edges)
        0.034816: setup
        0.005824: key tensor
        0.007181: target tensor
        0.036797: edge tensor
      0.000087: initializing solutions matrix
      0.028565: loop
      0.000028: postprocessing (MAX MEMORY: 1.625GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.047754: fragment resolution 2
  0.000353: identify previous emora questions
  0.047384: sal
0.424756: dialogue infer 2
  0.025987: facts graph types
  0.028407: convert facts graph
    0.003466: to digraph
    0.024744: flatten types (753 concepts)
    0.000183: quantities
  0.000025: process dynamic rules
  0.365283: match
    0.365196: match
      0.004331: querygen
      0.274167: creating graph tensor (1764 nodes, 6488 edges)
        0.217005: setup
        0.006654: key tensor
        0.007984: target tensor
        0.040610: edge tensor
      0.000088: initializing solutions matrix
      0.086373: loop
      0.000014: postprocessing (MAX MEMORY: 1.904GB)
  0.002412: postprocess solutions
0.050829: apply inferences 2
  0.002287: apply
  0.000652: update types
  0.000201: operate
  0.047670: sal
0.009128: prepare template nlg
0.244408: template infer
  0.026024: facts graph types
  0.028823: convert facts graph
    0.003622: to digraph
    0.025005: flatten types (753 concepts)
    0.000182: quantities
  0.000026: process dynamic rules
  0.185033: match
    0.184955: match
      0.004591: querygen
      0.091600: creating graph tensor (1764 nodes, 6488 edges)
        0.038178: setup
        0.006550: key tensor
        0.007828: target tensor
        0.037135: edge tensor
      0.000091: initializing solutions matrix
      0.088442: loop
      0.000015: postprocessing (MAX MEMORY: 1.904GB)
  0.001981: postprocess solutions
0.001288: template fillers
0.000015: response sel
0.000084: response exp
0.000013: response rules
0.103249: response assembler
  0.000015: response assembly
  0.047164: update sal
  0.001943: decay sal
  0.054110: prune
    0.000013: setup
    0.000735: select keep
    0.000084: delete old spans
    0.044641: setup essentials
    0.007344: identify essentials
    0.000904: remove not keep

[1.88 s] You know, the famous author Terry Pratchett said real stupidity beats artificial intelligence every time .

User: i agree
i agree
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

0.000084: next turn
0.000017: sentence caser
0.110218: elit
0.315442: parse2logic
  0.000817: facts graph types
  0.001474: convert facts graph
    0.000278: to digraph
    0.001158: flatten types (56 concepts)
    0.000026: quantities
  0.000021: process dynamic rules
  0.308496: match
    0.308418: match
      0.000183: querygen
      0.064009: creating graph tensor (74 nodes, 233 edges)
        0.001263: setup
        0.055861: key tensor
        0.000819: target tensor
        0.005978: edge tensor
      0.000078: initializing solutions matrix
      0.243823: loop
      0.000019: postprocessing (MAX MEMORY: 0.004GB)
  0.000786: postprocess solutions
0.000037: multiword mentions
0.000013: ner mentions
0.002038: mention bridge
0.009041: merge bridge
0.032879: knowledge pull
0.011689: reference id
0.189481: reference infer
  0.026167: facts graph types
  0.027407: convert facts graph
    0.003732: to digraph
    0.023471: flatten types (758 concepts)
    0.000183: quantities
  0.009020: process dynamic rules
  0.124715: match
    0.124642: match
      0.008647: querygen
      0.083557: creating graph tensor (1676 nodes, 6002 edges)
        0.035167: setup
        0.005494: key tensor
        0.007320: target tensor
        0.033789: edge tensor
      0.000087: initializing solutions matrix
      0.032130: loop
      0.000029: postprocessing (MAX MEMORY: 1.642GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.047495: fragment resolution
  0.000348: identify previous emora questions
  0.047131: sal
0.241259: dialogue infer
  0.026197: facts graph types
  0.027991: convert facts graph
    0.003755: to digraph
    0.024038: flatten types (758 concepts)
    0.000183: quantities
  0.000026: process dynamic rules
  0.182140: match
    0.182065: match
      0.004859: querygen
      0.093286: creating graph tensor (1773 nodes, 6518 edges)
        0.038087: setup
        0.006090: key tensor
        0.008013: target tensor
        0.039156: edge tensor
      0.000088: initializing solutions matrix
      0.083604: loop
      0.000014: postprocessing (MAX MEMORY: 1.922GB)
  0.002338: postprocess solutions
0.051012: apply inferences
  0.002364: apply
  0.000639: update types
  0.000199: operate
  0.047788: sal
0.011596: reference id 2
0.372319: reference infer 2
  0.026232: facts graph types
  0.026801: convert facts graph
    0.003423: to digraph
    0.023174: flatten types (758 concepts)
    0.000183: quantities
  0.009002: process dynamic rules
  0.307867: match
    0.307794: match
      0.008204: querygen
      0.267095: creating graph tensor (1676 nodes, 6002 edges)
        0.216726: setup
        0.006145: key tensor
        0.007424: target tensor
        0.034916: edge tensor
      0.000091: initializing solutions matrix
      0.032174: loop
      0.000031: postprocessing (MAX MEMORY: 1.642GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.047896: fragment resolution 2
  0.000357: identify previous emora questions
  0.047523: sal
0.240337: dialogue infer 2
  0.026390: facts graph types
  0.027982: convert facts graph
    0.003706: to digraph
    0.024067: flatten types (758 concepts)
    0.000195: quantities
  0.000027: process dynamic rules
  0.181098: match
    0.181024: match
      0.004928: querygen
      0.092118: creating graph tensor (1773 nodes, 6518 edges)
        0.037804: setup
        0.006147: key tensor
        0.008110: target tensor
        0.038129: edge tensor
      0.000089: initializing solutions matrix
      0.083661: loop
      0.000014: postprocessing (MAX MEMORY: 1.922GB)
  0.002305: postprocess solutions
0.050491: apply inferences 2
  0.002201: apply
  0.000653: update types
  0.000199: operate
  0.047419: sal
0.009057: prepare template nlg
0.253022: template infer
  0.026295: facts graph types
  0.028228: convert facts graph
    0.003469: to digraph
    0.024547: flatten types (758 concepts)
    0.000197: quantities
  0.000026: process dynamic rules
  0.193952: match
    0.193873: match
      0.005090: querygen
      0.099075: creating graph tensor (1773 nodes, 6518 edges)
        0.038066: setup
        0.006127: key tensor
        0.007929: target tensor
        0.044958: edge tensor
      0.000090: initializing solutions matrix
      0.089389: loop
      0.000015: postprocessing (MAX MEMORY: 1.922GB)
  0.001965: postprocess solutions
0.001168: template fillers
0.000014: response sel
0.000432: response exp
0.000015: response rules
0.105263: response assembler
  0.000015: response assembly
  0.048107: update sal
  0.001946: decay sal
  0.055178: prune
    0.000012: setup
    0.000751: select keep
    0.000092: delete old spans
    0.046256: setup essentials
    0.007031: identify essentials
    0.000655: remove not keep

[2.10 s] So , I'm curious , do you like art ?

User: yes
yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1798', 'wm1799')]
CURRENT USER CONCEPTS: {'wm1806', 'wm1807', 'user', 'predicate', 'wm1805'}
FRAGMENT REQUEST MERGES: [('wm1805', 'wm1798')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ? (s: 0.18, pr: 0.50)


Present Options:
	Would you say that you're an artist ? (s: 0.26, pr: 0.10)
	Do you like drawing ? (s: 0.40, pr: 0.10)
	Why do you like art ? (s: 0.34, pr: 0.10)
	Art always inspires me, even though I don't always understand it . Just knowing that someone put time into making something meaningful for others is enough. do you often go to exhibitions ? (s: 0.20, pr: 0.50)


0.000092: next turn
0.000017: sentence caser
0.108448: elit
0.051221: parse2logic
  0.000356: facts graph types
  0.000758: convert facts graph
    0.000137: to digraph
    0.000588: flatten types (26 concepts)
    0.000020: quantities
  0.000020: process dynamic rules
  0.047481: match
    0.047400: match
      0.000091: querygen
      0.011421: creating graph tensor (30 nodes, 82 edges)
        0.000512: setup
        0.006139: key tensor
        0.000375: target tensor
        0.004344: edge tensor
      0.000072: initializing solutions matrix
      0.035612: loop
      0.000014: postprocessing (MAX MEMORY: 0.001GB)
  0.000456: postprocess solutions
0.000034: multiword mentions
0.000012: ner mentions
0.001562: mention bridge
0.008347: merge bridge
0.033849: knowledge pull
0.012284: reference id
0.190857: reference infer
  0.026986: facts graph types
  0.027976: convert facts graph
    0.004471: to digraph
    0.023298: flatten types (778 concepts)
    0.000186: quantities
  0.010098: process dynamic rules
  0.123577: match
    0.123506: match
      0.008034: querygen
      0.085378: creating graph tensor (1724 nodes, 6174 edges)
        0.036606: setup
        0.005684: key tensor
        0.007782: target tensor
        0.033497: edge tensor
      0.000089: initializing solutions matrix
      0.029786: loop
      0.000029: postprocessing (MAX MEMORY: 1.737GB)
  0.000008: postprocess solutions
0.000013: reference resolution
0.077970: fragment resolution
  0.000365: identify previous emora questions
  0.029061: find answer
  0.048525: sal
0.432848: dialogue infer
  0.026724: facts graph types
  0.028994: convert facts graph
    0.003551: to digraph
    0.025239: flatten types (775 concepts)
    0.000189: quantities
  0.000026: process dynamic rules
  0.371384: match
    0.371309: match
      0.005024: querygen
      0.278982: creating graph tensor (1815 nodes, 6677 edges)
        0.038639: setup
        0.006339: key tensor
        0.193345: target tensor
        0.038420: edge tensor
      0.000092: initializing solutions matrix
      0.086969: loop
      0.000015: postprocessing (MAX MEMORY: 2.016GB)
  0.003026: postprocess solutions
0.060504: apply inferences
  0.006458: apply
  0.001749: update types
  0.000313: operate
  0.051964: sal
0.017125: reference id 2
0.200125: reference infer 2
  0.029179: facts graph types
  0.028910: convert facts graph
    0.003650: to digraph
    0.025027: flatten types (818 concepts)
    0.000210: quantities
  0.011126: process dynamic rules
  0.128487: match
    0.128412: match
      0.009560: querygen
      0.088542: creating graph tensor (1811 nodes, 6492 edges)
        0.037891: setup
        0.006021: key tensor
        0.008028: target tensor
        0.034767: edge tensor
      0.000088: initializing solutions matrix
      0.029996: loop
      0.000032: postprocessing (MAX MEMORY: 1.920GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.052191: fragment resolution 2
  0.000396: identify previous emora questions
  0.051779: sal
0.268361: dialogue infer 2
  0.029365: facts graph types
  0.030747: convert facts graph
    0.004105: to digraph
    0.026430: flatten types (818 concepts)
    0.000196: quantities
  0.000025: process dynamic rules
  0.202010: match
    0.201934: match
      0.005337: querygen
      0.102557: creating graph tensor (1948 nodes, 7177 edges)
        0.041754: setup
        0.007306: key tensor
        0.008652: target tensor
        0.042814: edge tensor
      0.000087: initializing solutions matrix
      0.093723: loop
      0.000014: postprocessing (MAX MEMORY: 2.328GB)
  0.003492: postprocess solutions
0.058190: apply inferences 2
  0.004855: apply
  0.000879: update types
  0.000257: operate
  0.052180: sal
0.009920: prepare template nlg
0.288618: template infer
  0.030069: facts graph types
  0.031697: convert facts graph
    0.003989: to digraph
    0.027496: flatten types (828 concepts)
    0.000196: quantities
  0.000025: process dynamic rules
  0.220918: match
    0.220842: match
      0.005338: querygen
      0.108651: creating graph tensor (1982 nodes, 7306 edges)
        0.042447: setup
        0.007368: key tensor
        0.008714: target tensor
        0.048018: edge tensor
      0.000089: initializing solutions matrix
      0.106522: loop
      0.000016: postprocessing (MAX MEMORY: 2.412GB)
  0.003043: postprocess solutions
0.002311: template fillers
0.000016: response sel
0.000195: response exp
0.000014: response rules
0.120993: response assembler
  0.000015: response assembly
  0.053433: update sal
  0.002145: decay sal
  0.065384: prune
    0.000017: setup
    0.000857: select keep
    0.000085: delete old spans
    0.052493: setup essentials
    0.007085: identify essentials
    0.004196: remove not keep

[2.00 s] Okay . Art always inspires me, even though I don't always understand it . Just knowing that someone put time into making something meaningful for others is enough. do you often go to exhibitions ?

User: i like to go to art museums so yes
i like to go to art museums so yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1824', 'wm1828')]
CURRENT USER CONCEPTS: {'wm1870', 'wm1899', 'predicate', 'wm1895', 'museum', 'wm1883', 'wm1878', 'wm1898', 'wm1886', 'wm1893', 'wm1880', 'user', 'wm1887', 'prp', 'wm1888', 'wm1906', 'wm1900', 'now', 'unknown_other', 'wm1869', 'wm1901'}
FRAGMENT REQUEST MERGES: [('wm1886', 'wm1824')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Oh , that's so cool . I usually enjoy going to exhibitions , but I always struggle to understand the more abstract pieces. (s: 0.44, pr: 0.50)


Present Options:
	Would you say that you're an artist ? (s: 0.26, pr: 0.10)
	Do you like drawing ? (s: 0.40, pr: 0.10)
	Why do you like art ? (s: 0.27, pr: 0.10)


0.000076: next turn
0.000018: sentence caser
0.112981: elit
0.286755: parse2logic
  0.003055: facts graph types
  0.004711: convert facts graph
    0.000948: to digraph
    0.003694: flatten types (181 concepts)
    0.000055: quantities
  0.000021: process dynamic rules
  0.263035: match
    0.262957: match
      0.000528: querygen
      0.050426: creating graph tensor (233 nodes, 794 edges)
        0.004950: setup
        0.032763: key tensor
        0.001327: target tensor
        0.011141: edge tensor
      0.000084: initializing solutions matrix
      0.211628: loop
      0.000016: postprocessing (MAX MEMORY: 0.030GB)
  0.003057: postprocess solutions
0.000057: multiword mentions
0.000012: ner mentions
0.006176: mention bridge
0.036445: merge bridge
0.034904: knowledge pull
0.017857: reference id
0.396757: reference infer
  0.029214: facts graph types
  0.029134: convert facts graph
    0.004384: to digraph
    0.024526: flatten types (809 concepts)
    0.000201: quantities
  0.012178: process dynamic rules
  0.323642: match
    0.323567: match
      0.009777: querygen
      0.281588: creating graph tensor (1830 nodes, 6554 edges)
        0.225348: setup
        0.006633: key tensor
        0.007895: target tensor
        0.039732: edge tensor
      0.000088: initializing solutions matrix
      0.031883: loop
      0.000034: postprocessing (MAX MEMORY: 1.957GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.083291: fragment resolution
  0.000439: identify previous emora questions
  0.031708: find answer
  0.051125: sal
0.279147: dialogue infer
  0.028958: facts graph types
  0.030873: convert facts graph
    0.004034: to digraph
    0.026633: flatten types (805 concepts)
    0.000192: quantities
  0.000026: process dynamic rules
  0.212975: match
    0.212898: match
      0.005578: querygen
      0.116001: creating graph tensor (1960 nodes, 7227 edges)
        0.042403: setup
        0.007485: key tensor
        0.008652: target tensor
        0.055254: edge tensor
      0.000090: initializing solutions matrix
      0.090994: loop
      0.000015: postprocessing (MAX MEMORY: 2.360GB)
  0.003525: postprocess solutions
0.056935: apply inferences
  0.004738: apply
  0.000668: update types
  0.000266: operate
  0.051243: sal
0.015750: reference id 2
0.213621: reference infer 2
  0.029386: facts graph types
  0.029607: convert facts graph
    0.003748: to digraph
    0.025640: flatten types (810 concepts)
    0.000196: quantities
  0.011187: process dynamic rules
  0.140604: match
    0.140526: match
      0.010088: querygen
      0.100173: creating graph tensor (1844 nodes, 6623 edges)
        0.037982: setup
        0.006460: key tensor
        0.007915: target tensor
        0.045536: edge tensor
      0.000095: initializing solutions matrix
      0.029923: loop
      0.000034: postprocessing (MAX MEMORY: 1.997GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.051972: fragment resolution 2
  0.000427: identify previous emora questions
  0.051528: sal
0.260850: dialogue infer 2
  0.029431: facts graph types
  0.031236: convert facts graph
    0.004012: to digraph
    0.027017: flatten types (810 concepts)
    0.000193: quantities
  0.000036: process dynamic rules
  0.193716: match
    0.193642: match
      0.005082: querygen
      0.102323: creating graph tensor (1976 nodes, 7288 edges)
        0.041745: setup
        0.007049: key tensor
        0.009192: target tensor
        0.042219: edge tensor
      0.000091: initializing solutions matrix
      0.085909: loop
      0.000015: postprocessing (MAX MEMORY: 2.399GB)
  0.003520: postprocess solutions
0.056813: apply inferences 2
  0.003941: apply
  0.000676: update types
  0.000261: operate
  0.051916: sal
0.009568: prepare template nlg
0.469708: template infer
  0.029330: facts graph types
  0.031253: convert facts graph
    0.003725: to digraph
    0.027319: flatten types (810 concepts)
    0.000194: quantities
  0.000026: process dynamic rules
  0.403285: match
    0.403212: match
      0.188631: querygen
      0.108874: creating graph tensor (1976 nodes, 7288 edges)
        0.043402: setup
        0.007517: key tensor
        0.008860: target tensor
        0.046927: edge tensor
      0.000088: initializing solutions matrix
      0.105378: loop
      0.000015: postprocessing (MAX MEMORY: 2.399GB)
  0.002829: postprocess solutions
0.001573: template fillers
0.000017: response sel
0.000139: response exp
0.000015: response rules
0.117836: response assembler
  0.000015: response assembly
  0.051494: update sal
  0.002079: decay sal
  0.064231: prune
    0.000017: setup
    0.000817: select keep
    0.000086: delete old spans
    0.051282: setup essentials
    0.006924: identify essentials
    0.004497: remove not keep

[2.51 s] Oh , that's so cool . I usually enjoy going to exhibitions , but I always struggle to understand the more abstract pieces.

User: i hate abstract art
i hate abstract art
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Would you say that you're an artist ? (s: 0.17, pr: 0.10)
	Do you like drawing ? (s: 0.29, pr: 0.10)
	Why do you like art ? (s: 0.20, pr: 0.10)


0.000074: next turn
0.000017: sentence caser
0.111238: elit
0.227404: parse2logic
  0.001410: facts graph types
  0.002739: convert facts graph
    0.000519: to digraph
    0.002168: flatten types (93 concepts)
    0.000038: quantities
  0.000022: process dynamic rules
  0.214264: match
    0.214186: match
      0.000296: querygen
      0.022775: creating graph tensor (120 nodes, 394 edges)
        0.002133: setup
        0.013436: key tensor
        0.000990: target tensor
        0.006095: edge tensor
      0.000079: initializing solutions matrix
      0.190726: loop
      0.000019: postprocessing (MAX MEMORY: 0.008GB)
  0.002040: postprocess solutions
0.000136: multiword mentions
0.000013: ner mentions
0.002690: mention bridge
0.007468: merge bridge
0.032340: knowledge pull
0.015439: reference id
0.187500: reference infer
  0.025461: facts graph types
  0.026794: convert facts graph
    0.004128: to digraph
    0.022453: flatten types (734 concepts)
    0.000191: quantities
  0.011500: process dynamic rules
  0.121589: match
    0.121513: match
      0.008718: querygen
      0.084445: creating graph tensor (1674 nodes, 6006 edges)
        0.035279: setup
        0.005875: key tensor
        0.007156: target tensor
        0.034387: edge tensor
      0.000091: initializing solutions matrix
      0.028033: loop
      0.000033: postprocessing (MAX MEMORY: 1.643GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.047670: fragment resolution
  0.000453: identify previous emora questions
  0.047200: sal
0.256907: dialogue infer
  0.025682: facts graph types
  0.028376: convert facts graph
    0.003369: to digraph
    0.024813: flatten types (734 concepts)
    0.000179: quantities
  0.000026: process dynamic rules
  0.196471: match
    0.196395: match
      0.004477: querygen
      0.096685: creating graph tensor (1806 nodes, 6671 edges)
        0.038657: setup
        0.006704: key tensor
        0.007851: target tensor
        0.041124: edge tensor
      0.000095: initializing solutions matrix
      0.094880: loop
      0.000016: postprocessing (MAX MEMORY: 2.010GB)
  0.003553: postprocess solutions
0.052250: apply inferences
  0.003939: apply
  0.000679: update types
  0.000197: operate
  0.047414: sal
0.015252: reference id 2
0.185994: reference infer 2
  0.025529: facts graph types
  0.026446: convert facts graph
    0.003859: to digraph
    0.022385: flatten types (734 concepts)
    0.000179: quantities
  0.011494: process dynamic rules
  0.120315: match
    0.120238: match
      0.008266: querygen
      0.083638: creating graph tensor (1674 nodes, 6006 edges)
        0.034862: setup
        0.005440: key tensor
        0.007281: target tensor
        0.034343: edge tensor
      0.000089: initializing solutions matrix
      0.028013: loop
      0.000032: postprocessing (MAX MEMORY: 1.643GB)
  0.000008: postprocess solutions
0.000015: reference resolution 2
0.046778: fragment resolution 2
  0.000456: identify previous emora questions
  0.046306: sal
0.441576: dialogue infer 2
  0.025653: facts graph types
  0.028100: convert facts graph
    0.003612: to digraph
    0.024296: flatten types (734 concepts)
    0.000178: quantities
  0.000026: process dynamic rules
  0.381544: match
    0.381468: match
      0.004878: querygen
      0.281248: creating graph tensor (1806 nodes, 6671 edges)
        0.223128: setup
        0.006749: key tensor
        0.008088: target tensor
        0.041202: edge tensor
      0.000091: initializing solutions matrix
      0.095013: loop
      0.000016: postprocessing (MAX MEMORY: 2.010GB)
  0.003529: postprocess solutions
0.051852: apply inferences 2
  0.003881: apply
  0.000659: update types
  0.000190: operate
  0.047103: sal
0.009092: prepare template nlg
0.267557: template infer
  0.025538: facts graph types
  0.028566: convert facts graph
    0.003381: to digraph
    0.024991: flatten types (734 concepts)
    0.000180: quantities
  0.000025: process dynamic rules
  0.207879: match
    0.207806: match
      0.004567: querygen
      0.093330: creating graph tensor (1806 nodes, 6671 edges)
        0.038903: setup
        0.006882: key tensor
        0.007938: target tensor
        0.037702: edge tensor
      0.000090: initializing solutions matrix
      0.109575: loop
      0.000016: postprocessing (MAX MEMORY: 2.010GB)
  0.002831: postprocess solutions
0.001421: template fillers
0.000015: response sel
0.000165: response exp
0.000014: response rules
0.102962: response assembler
  0.000016: response assembly
  0.046868: update sal
  0.001920: decay sal
  0.054143: prune
    0.000012: setup
    0.000731: select keep
    0.000095: delete old spans
    0.044901: setup essentials
    0.006947: identify essentials
    0.001069: remove not keep

[2.07 s] I see . Do you like drawing ?

User: yes
yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1834', 'wm1835')]
CURRENT USER CONCEPTS: {'wm2006', 'wm2008', 'user', 'wm2007', 'predicate'}
FRAGMENT REQUEST MERGES: [('wm2006', 'wm1834')]
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Would you say that you're an artist ? (s: 0.26, pr: 0.10)
	You must be very creative . Have you ever tried digital drawing before ? (s: 0.43, pr: 0.50)
	You must be very creative . Have you ever tried digital drawing before ? (s: 0.83, pr: 0.50)


0.000073: next turn
0.000017: sentence caser
0.110884: elit
0.049319: parse2logic
  0.000351: facts graph types
  0.000765: convert facts graph
    0.000131: to digraph
    0.000601: flatten types (26 concepts)
    0.000020: quantities
  0.000021: process dynamic rules
  0.045596: match
    0.045516: match
      0.000090: querygen
      0.010492: creating graph tensor (30 nodes, 82 edges)
        0.000511: setup
        0.002810: key tensor
        0.000371: target tensor
        0.006746: edge tensor
      0.000073: initializing solutions matrix
      0.034649: loop
      0.000013: postprocessing (MAX MEMORY: 0.001GB)
  0.000460: postprocess solutions
0.000034: multiword mentions
0.000012: ner mentions
0.001569: mention bridge
0.006295: merge bridge
0.032150: knowledge pull
0.014852: reference id
0.188910: reference infer
  0.025353: facts graph types
  0.026965: convert facts graph
    0.004309: to digraph
    0.022454: flatten types (735 concepts)
    0.000179: quantities
  0.010977: process dynamic rules
  0.123370: match
    0.123298: match
      0.008327: querygen
      0.084357: creating graph tensor (1680 nodes, 6031 edges)
        0.036043: setup
        0.005451: key tensor
        0.007433: target tensor
        0.033671: edge tensor
      0.000087: initializing solutions matrix
      0.030302: loop
      0.000031: postprocessing (MAX MEMORY: 1.656GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.048561: fragment resolution
  0.000421: identify previous emora questions
  0.001969: find answer
  0.046154: sal
0.243428: dialogue infer
  0.025094: facts graph types
  0.027730: convert facts graph
    0.003562: to digraph
    0.023974: flatten types (731 concepts)
    0.000179: quantities
  0.000025: process dynamic rules
  0.184329: match
    0.184252: match
      0.004973: querygen
      0.089876: creating graph tensor (1791 nodes, 6620 edges)
        0.039182: setup
        0.006585: key tensor
        0.007982: target tensor
        0.034286: edge tensor
      0.000088: initializing solutions matrix
      0.089122: loop
      0.000014: postprocessing (MAX MEMORY: 1.979GB)
  0.003704: postprocess solutions
0.056204: apply inferences
  0.006656: apply
  0.000914: update types
  0.000242: operate
  0.048369: sal
0.017761: reference id 2
0.385173: reference infer 2
  0.026361: facts graph types
  0.027017: convert facts graph
    0.003361: to digraph
    0.023449: flatten types (752 concepts)
    0.000184: quantities
  0.011500: process dynamic rules
  0.317849: match
    0.317774: match
      0.009308: querygen
      0.278857: creating graph tensor (1721 nodes, 6187 edges)
        0.036948: setup
        0.005802: key tensor
        0.007632: target tensor
        0.226273: edge tensor
      0.000099: initializing solutions matrix
      0.029275: loop
      0.000035: postprocessing (MAX MEMORY: 1.742GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.048783: fragment resolution 2
  0.000445: identify previous emora questions
  0.048322: sal
0.253970: dialogue infer 2
  0.026335: facts graph types
  0.029312: convert facts graph
    0.003633: to digraph
    0.025485: flatten types (752 concepts)
    0.000180: quantities
  0.000027: process dynamic rules
  0.191795: match
    0.191719: match
      0.004873: querygen
      0.097302: creating graph tensor (1867 nodes, 6911 edges)
        0.040171: setup
        0.007118: key tensor
        0.008399: target tensor
        0.039546: edge tensor
      0.000089: initializing solutions matrix
      0.089256: loop
      0.000014: postprocessing (MAX MEMORY: 2.155GB)
  0.003836: postprocess solutions
0.052982: apply inferences 2
  0.004638: apply
  0.000667: update types
  0.000243: operate
  0.047414: sal
0.009242: prepare template nlg
0.278483: template infer
  0.026328: facts graph types
  0.029185: convert facts graph
    0.003710: to digraph
    0.025275: flatten types (752 concepts)
    0.000183: quantities
  0.000026: process dynamic rules
  0.217513: match
    0.217441: match
      0.005375: querygen
      0.104731: creating graph tensor (1867 nodes, 6911 edges)
        0.040833: setup
        0.006994: key tensor
        0.008286: target tensor
        0.046559: edge tensor
      0.000089: initializing solutions matrix
      0.107006: loop
      0.000015: postprocessing (MAX MEMORY: 2.155GB)
  0.002740: postprocess solutions
0.001419: template fillers
0.000015: response sel
0.000190: response exp
0.000014: response rules
0.107192: response assembler
  0.000014: response assembly
  0.048073: update sal
  0.001959: decay sal
  0.057131: prune
    0.000017: setup
    0.000782: select keep
    0.000085: delete old spans
    0.046926: setup essentials
    0.006780: identify essentials
    0.001931: remove not keep

[1.91 s] Okay . You must be very creative . Have you ever tried digital drawing before ?

User: no but i want to
no but i want to
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm2038', 'wm2039')]
CURRENT USER CONCEPTS: {'wm2070', 'wm2053', 'now', 'wm2061', 'wm2076', 'wm2051', 'but', 'wm2060', 'user', 'wm2069', 'wm2065', 'wm2068', 'predicate', 'prp'}
FRAGMENT REQUEST MERGES: [('wm2068', 'wm2038')]
[WARNING] Mismatched confidence between wm2068 and wm2038 on merge!
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Would you say that you're an artist ? (s: 0.26, pr: 0.10)
	You should look into it at some point ! Since you like drawing , I think you would definitely have a lot of fun . (s: 0.69, pr: 0.50)


0.000076: next turn
0.000018: sentence caser
0.111031: elit
0.268305: parse2logic
  0.001495: facts graph types
  0.002530: convert facts graph
    0.000531: to digraph
    0.001949: flatten types (97 concepts)
    0.000037: quantities
  0.000022: process dynamic rules
  0.253885: match
    0.253804: match
      0.000303: querygen
      0.053359: creating graph tensor (124 nodes, 405 edges)
        0.002328: setup
        0.028550: key tensor
        0.000831: target tensor
        0.021493: edge tensor
      0.000080: initializing solutions matrix
      0.199764: loop
      0.000018: postprocessing (MAX MEMORY: 0.009GB)
  0.002607: postprocess solutions
0.000043: multiword mentions
0.000012: ner mentions
0.005177: mention bridge
0.010065: merge bridge
0.034015: knowledge pull
0.017423: reference id
0.200321: reference infer
  0.027583: facts graph types
  0.028346: convert facts graph
    0.004305: to digraph
    0.023832: flatten types (774 concepts)
    0.000186: quantities
  0.011497: process dynamic rules
  0.130670: match
    0.130598: match
      0.009102: querygen
      0.094065: creating graph tensor (1795 nodes, 6457 edges)
        0.038131: setup
        0.006394: key tensor
        0.007647: target tensor
        0.039870: edge tensor
      0.000092: initializing solutions matrix
      0.027122: loop
      0.000031: postprocessing (MAX MEMORY: 1.897GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.050805: fragment resolution
  0.000437: identify previous emora questions
  0.002207: find answer
  0.048141: sal
0.256607: dialogue infer
  0.027414: facts graph types
  0.030278: convert facts graph
    0.003832: to digraph
    0.026245: flatten types (770 concepts)
    0.000187: quantities
  0.000027: process dynamic rules
  0.192533: match
    0.192454: match
      0.005112: querygen
      0.100300: creating graph tensor (1915 nodes, 7085 edges)
        0.041849: setup
        0.006855: key tensor
        0.008897: target tensor
        0.040246: edge tensor
      0.000094: initializing solutions matrix
      0.086749: loop
      0.000014: postprocessing (MAX MEMORY: 2.266GB)
  0.003604: postprocess solutions
0.235090: apply inferences
  0.182873: apply
  0.001427: update types
  0.000236: operate
  0.050530: sal
0.015427: reference id 2
0.206502: reference infer 2
  0.028033: facts graph types
  0.028538: convert facts graph
    0.004060: to digraph
    0.024265: flatten types (783 concepts)
    0.000190: quantities
  0.011050: process dynamic rules
  0.136285: match
    0.136198: match
      0.008903: querygen
      0.087591: creating graph tensor (1817 nodes, 6556 edges)
        0.038359: setup
        0.006683: key tensor
        0.007876: target tensor
        0.032789: edge tensor
      0.000088: initializing solutions matrix
      0.039383: loop
      0.000030: postprocessing (MAX MEMORY: 1.954GB)
  0.000185: postprocess solutions
0.000013: reference resolution 2
0.049818: fragment resolution 2
  0.000423: identify previous emora questions
  0.049381: sal
0.261381: dialogue infer 2
  0.027980: facts graph types
  0.030313: convert facts graph
    0.003756: to digraph
    0.026353: flatten types (783 concepts)
    0.000190: quantities
  0.000026: process dynamic rules
  0.196692: match
    0.196613: match
      0.004888: querygen
      0.101171: creating graph tensor (1945 nodes, 7199 edges)
        0.041662: setup
        0.006884: key tensor
        0.008780: target tensor
        0.041738: edge tensor
      0.000090: initializing solutions matrix
      0.090273: loop
      0.000013: postprocessing (MAX MEMORY: 2.339GB)
  0.003647: postprocess solutions
0.056139: apply inferences 2
  0.004848: apply
  0.000699: update types
  0.000256: operate
  0.050317: sal
0.009500: prepare template nlg
0.289744: template infer
  0.028025: facts graph types
  0.030613: convert facts graph
    0.003666: to digraph
    0.026743: flatten types (784 concepts)
    0.000188: quantities
  0.000024: process dynamic rules
  0.226269: match
    0.226194: match
      0.005613: querygen
      0.107832: creating graph tensor (1949 nodes, 7215 edges)
        0.041757: setup
        0.007265: key tensor
        0.008650: target tensor
        0.047967: edge tensor
      0.000092: initializing solutions matrix
      0.112418: loop
      0.000015: postprocessing (MAX MEMORY: 2.349GB)
  0.001956: postprocess solutions
0.001350: template fillers
0.000016: response sel
0.000174: response exp
0.000014: response rules
0.113668: response assembler
  0.000015: response assembly
  0.050196: update sal
  0.002020: decay sal
  0.061421: prune
    0.000019: setup
    0.000783: select keep
    0.000090: delete old spans
    0.049659: setup essentials
    0.006940: identify essentials
    0.003080: remove not keep

[2.19 s] I see . You should look into it at some point ! Since you like drawing , I think you would definitely have a lot of fun .

User: do you like to draw
do you like to draw
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Would you say that you're an artist ? (s: 0.31, pr: 0.10)


0.000077: next turn
0.000020: sentence caser
0.110943: elit
0.309507: parse2logic
  0.001852: facts graph types
  0.002983: convert facts graph
    0.000597: to digraph
    0.002321: flatten types (112 concepts)
    0.000050: quantities
  0.000021: process dynamic rules
  0.294153: match
    0.294074: match
      0.000342: querygen
      0.030643: creating graph tensor (148 nodes, 495 edges)
        0.002745: setup
        0.018699: key tensor
        0.001520: target tensor
        0.007557: edge tensor
      0.000079: initializing solutions matrix
      0.262685: loop
      0.000018: postprocessing (MAX MEMORY: 0.013GB)
  0.002671: postprocess solutions
0.000044: multiword mentions
0.000012: ner mentions
0.003627: mention bridge
0.008483: merge bridge
0.032812: knowledge pull
0.017390: reference id
0.387512: reference infer
  0.026090: facts graph types
  0.028349: convert facts graph
    0.004660: to digraph
    0.023486: flatten types (746 concepts)
    0.000180: quantities
  0.011480: process dynamic rules
  0.318894: match
    0.318815: match
      0.008738: querygen
      0.269266: creating graph tensor (1712 nodes, 6144 edges)
        0.220260: setup
        0.006212: key tensor
        0.007569: target tensor
        0.033333: edge tensor
      0.000091: initializing solutions matrix
      0.040485: loop
      0.000031: postprocessing (MAX MEMORY: 1.719GB)
  0.000202: postprocess solutions
0.000014: reference resolution
0.047777: fragment resolution
  0.000405: identify previous emora questions
  0.047355: sal
0.248944: dialogue infer
  0.026291: facts graph types
  0.028866: convert facts graph
    0.003423: to digraph
    0.025247: flatten types (746 concepts)
    0.000181: quantities
  0.000027: process dynamic rules
  0.187659: match
    0.187567: match
      0.005184: querygen
      0.094976: creating graph tensor (1851 nodes, 6842 edges)
        0.039528: setup
        0.006447: key tensor
        0.008309: target tensor
        0.038706: edge tensor
      0.000091: initializing solutions matrix
      0.087124: loop
      0.000013: postprocessing (MAX MEMORY: 2.113GB)
  0.003454: postprocess solutions
0.052868: apply inferences
  0.004292: apply
  0.000659: update types
  0.000197: operate
  0.047699: sal
0.017046: reference id 2
0.200183: reference infer 2
  0.026099: facts graph types
  0.026771: convert facts graph
    0.003327: to digraph
    0.023240: flatten types (746 concepts)
    0.000182: quantities
  0.010950: process dynamic rules
  0.133791: match
    0.133711: match
      0.009112: querygen
      0.083808: creating graph tensor (1712 nodes, 6144 edges)
        0.035736: setup
        0.005624: key tensor
        0.007405: target tensor
        0.033195: edge tensor
      0.000090: initializing solutions matrix
      0.040459: loop
      0.000032: postprocessing (MAX MEMORY: 1.719GB)
  0.000191: postprocess solutions
0.000014: reference resolution 2
0.047570: fragment resolution 2
  0.000436: identify previous emora questions
  0.047116: sal
0.248024: dialogue infer 2
  0.026141: facts graph types
  0.028944: convert facts graph
    0.003580: to digraph
    0.025168: flatten types (746 concepts)
    0.000181: quantities
  0.000026: process dynamic rules
  0.186803: match
    0.186730: match
      0.004625: querygen
      0.095452: creating graph tensor (1851 nodes, 6842 edges)
        0.039754: setup
        0.006972: key tensor
        0.008080: target tensor
        0.038660: edge tensor
      0.000089: initializing solutions matrix
      0.086377: loop
      0.000013: postprocessing (MAX MEMORY: 2.113GB)
  0.003489: postprocess solutions
0.052474: apply inferences 2
  0.004335: apply
  0.000653: update types
  0.000202: operate
  0.047264: sal
0.009056: prepare template nlg
0.473718: template infer
  0.026102: facts graph types
  0.028817: convert facts graph
    0.003425: to digraph
    0.025196: flatten types (746 concepts)
    0.000181: quantities
  0.000025: process dynamic rules
  0.413985: match
    0.413911: match
      0.004995: querygen
      0.292833: creating graph tensor (1851 nodes, 6842 edges)
        0.040095: setup
        0.006400: key tensor
        0.196003: target tensor
        0.047976: edge tensor
      0.000095: initializing solutions matrix
      0.115739: loop
      0.000016: postprocessing (MAX MEMORY: 2.113GB)
  0.002002: postprocess solutions
0.001284: template fillers
0.000016: response sel
0.000143: response exp
0.000014: response rules
0.106249: response assembler
  0.000015: response assembly
  0.047768: update sal
  0.001922: decay sal
  0.056529: prune
    0.000013: setup
    0.000753: select keep
    0.000101: delete old spans
    0.046732: setup essentials
    0.006910: identify essentials
    0.001622: remove not keep

[2.38 s] I see . Would you say that you're an artist ?

User: yes
yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1840', 'wm1841')]
CURRENT USER CONCEPTS: {'wm2189', 'wm2187', 'user', 'wm2188', 'predicate'}
FRAGMENT REQUEST MERGES: [('wm2187', 'wm1840')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ? (s: 0.28, pr: 0.50)
	Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ? (s: 0.28, pr: 0.50)
	Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ? (s: 0.28, pr: 0.50)
	Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ? (s: 0.28, pr: 0.50)
	Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ? (s: 0.36, pr: 0.50)
	Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ? (s: 0.36, pr: 0.50)
	Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ? (s: 0.36, pr: 0.50)
	Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ? (s: 0.36, pr: 0.50)


Present Options:
	What has driven you to be the Artist ? (s: 0.34, pr: 0.50)


0.000093: next turn
0.000019: sentence caser
0.108151: elit
0.055076: parse2logic
  0.000356: facts graph types
  0.000798: convert facts graph
    0.000306: to digraph
    0.000461: flatten types (26 concepts)
    0.000019: quantities
  0.000021: process dynamic rules
  0.051262: match
    0.051182: match
      0.000087: querygen
      0.012367: creating graph tensor (30 nodes, 82 edges)
        0.000519: setup
        0.002805: key tensor
        0.000380: target tensor
        0.008609: edge tensor
      0.000072: initializing solutions matrix
      0.038441: loop
      0.000014: postprocessing (MAX MEMORY: 0.001GB)
  0.000478: postprocess solutions
0.000033: multiword mentions
0.000011: ner mentions
0.001616: mention bridge
0.005876: merge bridge
0.032052: knowledge pull
0.017216: reference id
0.200614: reference infer
  0.025079: facts graph types
  0.026723: convert facts graph
    0.004184: to digraph
    0.022340: flatten types (730 concepts)
    0.000177: quantities
  0.010870: process dynamic rules
  0.135572: match
    0.135497: match
      0.008992: querygen
      0.087706: creating graph tensor (1676 nodes, 6022 edges)
        0.034864: setup
        0.005479: key tensor
        0.007529: target tensor
        0.038080: edge tensor
      0.000087: initializing solutions matrix
      0.038489: loop
      0.000031: postprocessing (MAX MEMORY: 1.651GB)
  0.000184: postprocess solutions
0.000015: reference resolution
0.073532: fragment resolution
  0.000447: identify previous emora questions
  0.027302: find answer
  0.045764: sal
0.247621: dialogue infer
  0.025339: facts graph types
  0.027785: convert facts graph
    0.003518: to digraph
    0.024075: flatten types (726 concepts)
    0.000177: quantities
  0.000027: process dynamic rules
  0.188288: match
    0.188212: match
      0.005019: querygen
      0.093479: creating graph tensor (1799 nodes, 6662 edges)
        0.039113: setup
        0.006717: key tensor
        0.008050: target tensor
        0.037544: edge tensor
      0.000089: initializing solutions matrix
      0.089432: loop
      0.000014: postprocessing (MAX MEMORY: 2.003GB)
  0.003628: postprocess solutions
0.055802: apply inferences
  0.006432: apply
  0.000915: update types
  0.000249: operate
  0.048186: sal
0.017958: reference id 2
0.199373: reference infer 2
  0.026085: facts graph types
  0.026840: convert facts graph
    0.003330: to digraph
    0.023305: flatten types (744 concepts)
    0.000183: quantities
  0.011581: process dynamic rules
  0.132426: match
    0.132346: match
      0.009419: querygen
      0.083266: creating graph tensor (1712 nodes, 6157 edges)
        0.035823: setup
        0.005652: key tensor
        0.007611: target tensor
        0.032457: edge tensor
      0.000086: initializing solutions matrix
      0.039342: loop
      0.000031: postprocessing (MAX MEMORY: 1.725GB)
  0.000185: postprocess solutions
0.000013: reference resolution 2
0.047704: fragment resolution 2
  0.000412: identify previous emora questions
  0.047276: sal
0.255515: dialogue infer 2
  0.026212: facts graph types
  0.028988: convert facts graph
    0.003584: to digraph
    0.025194: flatten types (744 concepts)
    0.000195: quantities
  0.000027: process dynamic rules
  0.194016: match
    0.193943: match
      0.004500: querygen
      0.100041: creating graph tensor (1855 nodes, 6873 edges)
        0.040023: setup
        0.007043: key tensor
        0.008213: target tensor
        0.042686: edge tensor
      0.000089: initializing solutions matrix
      0.089120: loop
      0.000014: postprocessing (MAX MEMORY: 2.131GB)
  0.003597: postprocess solutions
0.053233: apply inferences 2
  0.004709: apply
  0.000657: update types
  0.000253: operate
  0.047595: sal
0.009162: prepare template nlg
0.473261: template infer
  0.026110: facts graph types
  0.028838: convert facts graph
    0.003428: to digraph
    0.025213: flatten types (744 concepts)
    0.000182: quantities
  0.000026: process dynamic rules
  0.412672: match
    0.412596: match
      0.005127: querygen
      0.282141: creating graph tensor (1855 nodes, 6873 edges)
        0.224344: setup
        0.007056: key tensor
        0.008443: target tensor
        0.040157: edge tensor
      0.000093: initializing solutions matrix
      0.124982: loop
      0.000016: postprocessing (MAX MEMORY: 2.131GB)
  0.002831: postprocess solutions
0.002486: template fillers
0.000021: response sel
0.000203: response exp
0.000014: response rules
0.107243: response assembler
  0.000016: response assembly
  0.047977: update sal
  0.001963: decay sal
  0.057271: prune
    0.000017: setup
    0.000762: select keep
    0.000094: delete old spans
    0.046851: setup essentials
    0.006850: identify essentials
    0.002085: remove not keep

[1.97 s] Being an artist is so cool . And actually , music is one of my favorite types of art . Do you like music ?

User: yes
yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm1857', 'wm1859')]
CURRENT USER CONCEPTS: {'wm2228', 'user', 'wm2227', 'predicate', 'wm2229'}
FRAGMENT REQUEST MERGES: [('wm2227', 'wm1857')]
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	What has driven you to be the Artist ? (s: 0.30, pr: 0.50)


0.000077: next turn
0.000018: sentence caser
0.109377: elit
0.053984: parse2logic
  0.000360: facts graph types
  0.000789: convert facts graph
    0.000301: to digraph
    0.000457: flatten types (26 concepts)
    0.000019: quantities
  0.000020: process dynamic rules
  0.050178: match
    0.050095: match
      0.000091: querygen
      0.011488: creating graph tensor (30 nodes, 82 edges)
        0.000515: setup
        0.005640: key tensor
        0.000411: target tensor
        0.004863: edge tensor
      0.000074: initializing solutions matrix
      0.038219: loop
      0.000014: postprocessing (MAX MEMORY: 0.001GB)
  0.000489: postprocess solutions
0.000034: multiword mentions
0.000012: ner mentions
0.001556: mention bridge
0.005789: merge bridge
0.031610: knowledge pull
0.018116: reference id
0.197229: reference infer
  0.024411: facts graph types
  0.026824: convert facts graph
    0.004189: to digraph
    0.022437: flatten types (716 concepts)
    0.000175: quantities
  0.012178: process dynamic rules
  0.131373: match
    0.131299: match
      0.008711: querygen
      0.082556: creating graph tensor (1660 nodes, 5962 edges)
        0.035513: setup
        0.005350: key tensor
        0.007450: target tensor
        0.032561: edge tensor
      0.000088: initializing solutions matrix
      0.039719: loop
      0.000031: postprocessing (MAX MEMORY: 1.618GB)
  0.000188: postprocess solutions
0.000014: reference resolution
0.072801: fragment resolution
  0.000438: identify previous emora questions
  0.026802: find answer
  0.045543: sal
0.242576: dialogue infer
  0.024322: facts graph types
  0.027862: convert facts graph
    0.003573: to digraph
    0.024100: flatten types (712 concepts)
    0.000174: quantities
  0.000026: process dynamic rules
  0.184469: match
    0.184392: match
      0.005064: querygen
      0.092633: creating graph tensor (1786 nodes, 6620 edges)
        0.039036: setup
        0.006621: key tensor
        0.008070: target tensor
        0.037052: edge tensor
      0.000087: initializing solutions matrix
      0.086421: loop
      0.000013: postprocessing (MAX MEMORY: 1.977GB)
  0.003366: postprocess solutions
0.050665: apply inferences
  0.004570: apply
  0.000646: update types
  0.000245: operate
  0.045184: sal
0.017452: reference id 2
0.193401: reference infer 2
  0.024384: facts graph types
  0.025760: convert facts graph
    0.003199: to digraph
    0.022366: flatten types (712 concepts)
    0.000173: quantities
  0.011026: process dynamic rules
  0.129705: match
    0.129629: match
      0.008867: querygen
      0.082950: creating graph tensor (1654 nodes, 5950 edges)
        0.034307: setup
        0.005785: key tensor
        0.007240: target tensor
        0.033925: edge tensor
      0.000089: initializing solutions matrix
      0.037499: loop
      0.000031: postprocessing (MAX MEMORY: 1.611GB)
  0.000340: postprocess solutions
0.002549: reference resolution 2
0.045186: fragment resolution 2
  0.000363: identify previous emora questions
  0.044806: sal
0.248065: dialogue infer 2
  0.024029: facts graph types
  0.027710: convert facts graph
    0.003270: to digraph
    0.024238: flatten types (708 concepts)
    0.000186: quantities
  0.000027: process dynamic rules
  0.190380: match
    0.190306: match
      0.004400: querygen
      0.095338: creating graph tensor (1773 nodes, 6570 edges)
        0.037977: setup
        0.006730: key tensor
        0.007906: target tensor
        0.040822: edge tensor
      0.000087: initializing solutions matrix
      0.090290: loop
      0.000013: postprocessing (MAX MEMORY: 1.947GB)
  0.003371: postprocess solutions
0.050791: apply inferences 2
  0.004580: apply
  0.000633: update types
  0.000244: operate
  0.045316: sal
0.008935: prepare template nlg
0.424679: template infer
  0.024013: facts graph types
  0.206104: convert facts graph
    0.003262: to digraph
    0.202636: flatten types (708 concepts)
    0.000189: quantities
  0.000027: process dynamic rules
  0.190215: match
    0.190131: match
      0.005129: querygen
      0.093038: creating graph tensor (1773 nodes, 6570 edges)
        0.037992: setup
        0.006821: key tensor
        0.008127: target tensor
        0.038213: edge tensor
      0.000089: initializing solutions matrix
      0.091638: loop
      0.000014: postprocessing (MAX MEMORY: 1.947GB)
  0.001654: postprocess solutions
0.001785: template fillers
0.000016: response sel
0.000134: response exp
0.000014: response rules
0.098749: response assembler
  0.000015: response assembly
  0.045497: update sal
  0.001813: decay sal
  0.051409: prune
    0.000017: setup
    0.000723: select keep
    0.000086: delete old spans
    0.042757: setup essentials
    0.006465: identify essentials
    0.000785: remove not keep

[1.88 s] I see . What has driven you to be the Artist ?

User: i like money
i like money
ARG REQUESTS: [('emora', 'request', 'wm2215', 'wm2217')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm2256', 'wm2269', 'unknown_noun', 'wm2264', 'wm2263', 'wm2257', 'user', 'now', 'prp'}
FRAGMENT REQUEST MERGES: [('wm2263', 'wm2215')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Thank you for sharing your career story with me . People always end up being in different jobs for many different reasons . I have an older friend who planned on becoming a physician in college, but she ended up becoming a consultant. (s: 0.06, pr: 0.50)
	Thank you for sharing your career story with me . People always end up being in different jobs for many different reasons . I have an older friend who planned on becoming a physician in college, but she ended up becoming a consultant. (s: 0.06, pr: 0.50)


0.000074: next turn
0.000018: sentence caser
0.109980: elit
0.227428: parse2logic
  0.001098: facts graph types
  0.001976: convert facts graph
    0.000382: to digraph
    0.001551: flatten types (76 concepts)
    0.000030: quantities
  0.000021: process dynamic rules
  0.217227: match
    0.217150: match
      0.000251: querygen
      0.027384: creating graph tensor (99 nodes, 321 edges)
        0.001891: setup
        0.018145: key tensor
        0.000731: target tensor
        0.006501: edge tensor
      0.000079: initializing solutions matrix
      0.189142: loop
      0.000016: postprocessing (MAX MEMORY: 0.006GB)
  0.001755: postprocess solutions
0.000040: multiword mentions
0.000013: ner mentions
0.002678: mention bridge
0.007355: merge bridge
0.031844: knowledge pull
0.017539: reference id
0.201033: reference infer
  0.025087: facts graph types
  0.027024: convert facts graph
    0.003498: to digraph
    0.023317: flatten types (724 concepts)
    0.000186: quantities
  0.010547: process dynamic rules
  0.135809: match
    0.135733: match
      0.009418: querygen
      0.086117: creating graph tensor (1698 nodes, 6107 edges)
        0.035619: setup
        0.005604: key tensor
        0.007679: target tensor
        0.035459: edge tensor
      0.000087: initializing solutions matrix
      0.039885: loop
      0.000030: postprocessing (MAX MEMORY: 1.697GB)
  0.000189: postprocess solutions
0.000014: reference resolution
0.072910: fragment resolution
  0.000419: identify previous emora questions
  0.026737: find answer
  0.045735: sal
0.257888: dialogue infer
  0.024948: facts graph types
  0.028504: convert facts graph
    0.003550: to digraph
    0.024749: flatten types (723 concepts)
    0.000191: quantities
  0.000026: process dynamic rules
  0.198057: match
    0.197983: match
      0.004514: querygen
      0.096129: creating graph tensor (1816 nodes, 6726 edges)
        0.039252: setup
        0.006780: key tensor
        0.008171: target tensor
        0.039981: edge tensor
      0.000091: initializing solutions matrix
      0.097043: loop
      0.000015: postprocessing (MAX MEMORY: 2.041GB)
  0.003698: postprocess solutions
0.055022: apply inferences
  0.005926: apply
  0.001086: update types
  0.000200: operate
  0.047789: sal
0.016793: reference id 2
0.201744: reference infer 2
  0.026252: facts graph types
  0.027405: convert facts graph
    0.003273: to digraph
    0.023928: flatten types (741 concepts)
    0.000181: quantities
  0.009873: process dynamic rules
  0.135663: match
    0.135586: match
      0.008953: querygen
      0.087761: creating graph tensor (1757 nodes, 6338 edges)
        0.036410: setup
        0.005812: key tensor
        0.007910: target tensor
        0.035783: edge tensor
      0.000088: initializing solutions matrix
      0.038564: loop
      0.000029: postprocessing (MAX MEMORY: 1.826GB)
  0.000187: postprocess solutions
0.000014: reference resolution 2
0.048108: fragment resolution 2
  0.000436: identify previous emora questions
  0.047655: sal
0.454328: dialogue infer 2
  0.026128: facts graph types
  0.209256: convert facts graph
    0.003411: to digraph
    0.205635: flatten types (741 concepts)
    0.000193: quantities
  0.000028: process dynamic rules
  0.212372: match
    0.212289: match
      0.005838: querygen
      0.100583: creating graph tensor (1874 nodes, 6944 edges)
        0.040889: setup
        0.007077: key tensor
        0.008379: target tensor
        0.042162: edge tensor
      0.000090: initializing solutions matrix
      0.105574: loop
      0.000015: postprocessing (MAX MEMORY: 2.175GB)
  0.003723: postprocess solutions
0.053921: apply inferences 2
  0.004989: apply
  0.000663: update types
  0.000201: operate
  0.048047: sal
0.009294: prepare template nlg
0.273525: template infer
  0.026351: facts graph types
  0.029882: convert facts graph
    0.003647: to digraph
    0.026020: flatten types (741 concepts)
    0.000198: quantities
  0.000026: process dynamic rules
  0.212629: match
    0.212548: match
      0.005569: querygen
      0.103413: creating graph tensor (1874 nodes, 6944 edges)
        0.040559: setup
        0.006671: key tensor
        0.008596: target tensor
        0.045462: edge tensor
      0.000093: initializing solutions matrix
      0.103236: loop
      0.000015: postprocessing (MAX MEMORY: 2.175GB)
  0.001858: postprocess solutions
0.001857: template fillers
0.000015: response sel
0.000115: response exp
0.000013: response rules
0.105876: response assembler
  0.000015: response assembly
  0.047498: update sal
  0.001938: decay sal
  0.056411: prune
    0.000013: setup
    0.000742: select keep
    0.000094: delete old spans
    0.046488: setup essentials
    0.006416: identify essentials
    0.002267: remove not keep

[2.15 s] Thank you for sharing your career story with me . People always end up being in different jobs for many different reasons . I have an older friend who planned on becoming a physician in college, but she ended up becoming a consultant.

User: why did she not become a physician
why did she not become a physician
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

0.000074: next turn
0.000018: sentence caser
0.120710: elit
0.359325: parse2logic
  0.002759: facts graph types
  0.004487: convert facts graph
    0.000961: to digraph
    0.003461: flatten types (170 concepts)
    0.000051: quantities
  0.000021: process dynamic rules
  0.335586: match
    0.335503: match
      0.000517: querygen
      0.031461: creating graph tensor (219 nodes, 748 edges)
        0.004147: setup
        0.018336: key tensor
        0.001891: target tensor
        0.006896: edge tensor
      0.000083: initializing solutions matrix
      0.303246: loop
      0.000014: postprocessing (MAX MEMORY: 0.027GB)
  0.005065: postprocess solutions
0.000052: multiword mentions
0.000012: ner mentions
0.005242: mention bridge
0.016686: merge bridge
0.033676: knowledge pull
0.022339: reference id
0.219110: reference infer
  0.028403: facts graph types
  0.028481: convert facts graph
    0.003528: to digraph
    0.024746: flatten types (767 concepts)
    0.000185: quantities
  0.011512: process dynamic rules
  0.147886: match
    0.147807: match
      0.009712: querygen
      0.094300: creating graph tensor (1828 nodes, 6557 edges)
        0.038367: setup
        0.006068: key tensor
        0.008139: target tensor
        0.039748: edge tensor
      0.000090: initializing solutions matrix
      0.043462: loop
      0.000032: postprocessing (MAX MEMORY: 1.957GB)
  0.000354: postprocess solutions
0.000742: reference resolution
0.048869: fragment resolution
  0.000409: identify previous emora questions
  0.048444: sal
0.463514: dialogue infer
  0.027855: facts graph types
  0.030190: convert facts graph
    0.003456: to digraph
    0.026534: flatten types (766 concepts)
    0.000186: quantities
  0.000026: process dynamic rules
  0.398653: match
    0.398579: match
      0.005486: querygen
      0.292462: creating graph tensor (1954 nodes, 7238 edges)
        0.041580: setup
        0.007375: key tensor
        0.197222: target tensor
        0.043819: edge tensor
      0.000093: initializing solutions matrix
      0.100339: loop
      0.000014: postprocessing (MAX MEMORY: 2.363GB)
  0.003889: postprocess solutions
0.056948: apply inferences
  0.005470: apply
  0.001256: update types
  0.000182: operate
  0.050018: sal
0.020204: reference id 2
0.212030: reference infer 2
  0.028120: facts graph types
  0.028870: convert facts graph
    0.003526: to digraph
    0.025132: flatten types (778 concepts)
    0.000189: quantities
  0.011259: process dynamic rules
  0.141000: match
    0.140917: match
      0.009731: querygen
      0.093240: creating graph tensor (1852 nodes, 6645 edges)
        0.038999: setup
        0.006570: key tensor
        0.008010: target tensor
        0.037801: edge tensor
      0.000090: initializing solutions matrix
      0.037629: loop
      0.000030: postprocessing (MAX MEMORY: 2.010GB)
  0.000191: postprocess solutions
0.000013: reference resolution 2
0.049911: fragment resolution 2
  0.000420: identify previous emora questions
  0.049475: sal
0.276555: dialogue infer 2
  0.028101: facts graph types
  0.031179: convert facts graph
    0.003944: to digraph
    0.027033: flatten types (778 concepts)
    0.000188: quantities
  0.000026: process dynamic rules
  0.210483: match
    0.210410: match
      0.005002: querygen
      0.106309: creating graph tensor (1983 nodes, 7344 edges)
        0.042268: setup
        0.007070: key tensor
        0.009013: target tensor
        0.045832: edge tensor
      0.000090: initializing solutions matrix
      0.098810: loop
      0.000015: postprocessing (MAX MEMORY: 2.433GB)
  0.003905: postprocess solutions
0.055917: apply inferences 2
  0.004953: apply
  0.000707: update types
  0.000204: operate
  0.050034: sal
0.009445: prepare template nlg
0.278550: template infer
  0.027974: facts graph types
  0.030827: convert facts graph
    0.003618: to digraph
    0.027003: flatten types (778 concepts)
    0.000190: quantities
  0.000026: process dynamic rules
  0.214591: match
    0.214515: match
      0.005775: querygen
      0.111543: creating graph tensor (1983 nodes, 7344 edges)
        0.042192: setup
        0.007426: key tensor
        0.008948: target tensor
        0.050755: edge tensor
      0.000091: initializing solutions matrix
      0.096868: loop
      0.000015: postprocessing (MAX MEMORY: 2.433GB)
  0.002198: postprocess solutions
0.001774: template fillers
0.000015: response sel
0.000371: response exp
0.000015: response rules
0.114970: response assembler
  0.000015: response assembly
  0.050617: update sal
  0.002090: decay sal
  0.062231: prune
    0.000013: setup
    0.000778: select keep
    0.000101: delete old spans
    0.050833: setup essentials
    0.006680: identify essentials
    0.003381: remove not keep

[2.37 s] Yeah . So anyway , I love trying new foods . What food do you like to eat ?

User: i like spaghetti what food do you like
i like spaghetti what food do you like
ARG REQUESTS: [('emora', 'request', 'wm2391', 'wm2394')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'spaghetti', 'wm2423', 'emora', 'wm2398', 'wm2411', 'wm2410', 'wm2399', 'wm2407', 'wm2420', 'wm2400', 'user', 'now', 'food', 'wm2456', 'prp', 'wm2405'}
FRAGMENT REQUEST MERGES: [('spaghetti', 'wm2391')]
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Is spaghetti your favorite food ? (s: 0.32, pr: 0.10)
	I often cook spaghetti with meatballs at home . It's a quick but delicious dish when I don't know what to eat . (s: 0.16, pr: 0.50)
	I often cook spaghetti with meatballs at home . It's a quick but delicious dish when I don't know what to eat . (s: 0.16, pr: 0.50)
	Speaking of spaghetti , pizza is probably my favorite italian food. I know a lot of people love pepperoni pizza , but have you ever tried hawaiian style pizza? It has pineapple and ham ? It's a interesting flavor , but I love it . (s: 0.14, pr: 0.50)
	Speaking of spaghetti , pizza is probably my favorite italian food. I know a lot of people love pepperoni pizza , but have you ever tried hawaiian style pizza? It has pineapple and ham ? It's a interesting flavor , but I love it . (s: 0.14, pr: 0.50)
	Speaking of spaghetti , pizza is probably my favorite italian food. I know a lot of people love pepperoni pizza , but have you ever tried hawaiian style pizza? It has pineapple and ham ? It's a interesting flavor , but I love it . (s: 0.14, pr: 0.50)
	Speaking of spaghetti , pizza is probably my favorite italian food. I know a lot of people love pepperoni pizza , but have you ever tried hawaiian style pizza? It has pineapple and ham ? It's a interesting flavor , but I love it . (s: 0.14, pr: 0.50)


0.000076: next turn
0.000018: sentence caser
0.115425: elit
0.425122: parse2logic
  0.002701: facts graph types
  0.005060: convert facts graph
    0.000882: to digraph
    0.004111: flatten types (165 concepts)
    0.000052: quantities
  0.000022: process dynamic rules
  0.394887: match
    0.394802: match
      0.000520: querygen
      0.042023: creating graph tensor (242 nodes, 842 edges)
        0.004704: setup
        0.027143: key tensor
        0.001332: target tensor
        0.008578: edge tensor
      0.000083: initializing solutions matrix
      0.351975: loop
      0.000014: postprocessing (MAX MEMORY: 0.034GB)
  0.009515: postprocess solutions
0.000048: multiword mentions
0.000012: ner mentions
0.004853: mention bridge
0.010962: merge bridge
0.034006: knowledge pull
0.024017: reference id
0.399590: reference infer
  0.027591: facts graph types
  0.028809: convert facts graph
    0.004328: to digraph
    0.024265: flatten types (778 concepts)
    0.000190: quantities
  0.013047: process dynamic rules
  0.327281: match
    0.327194: match
      0.010328: querygen
      0.277557: creating graph tensor (1825 nodes, 6521 edges)
        0.037751: setup
        0.192586: key tensor
        0.008205: target tensor
        0.036991: edge tensor
      0.000091: initializing solutions matrix
      0.038991: loop
      0.000031: postprocessing (MAX MEMORY: 1.938GB)
  0.000197: postprocess solutions
0.000014: reference resolution
0.079693: fragment resolution
  0.000464: identify previous emora questions
  0.029174: find answer
  0.050035: sal
0.286067: dialogue infer
  0.027550: facts graph types
  0.030889: convert facts graph
    0.003704: to digraph
    0.026982: flatten types (778 concepts)
    0.000188: quantities
  0.000027: process dynamic rules
  0.220268: match
    0.220193: match
      0.005689: querygen
      0.110859: creating graph tensor (1981 nodes, 7334 edges)
        0.042106: setup
        0.007564: key tensor
        0.008796: target tensor
        0.050197: edge tensor
      0.000090: initializing solutions matrix
      0.103345: loop
      0.000015: postprocessing (MAX MEMORY: 2.427GB)
  0.004336: postprocess solutions
0.058623: apply inferences
  0.007110: apply
  0.001057: update types
  0.000324: operate
  0.050109: sal
0.021786: reference id 2
0.209548: reference infer 2
  0.028425: facts graph types
  0.028520: convert facts graph
    0.003457: to digraph
    0.024849: flatten types (790 concepts)
    0.000191: quantities
  0.012242: process dynamic rules
  0.137671: match
    0.137591: match
      0.010057: querygen
      0.090976: creating graph tensor (1862 nodes, 6661 edges)
        0.037758: setup
        0.006442: key tensor
        0.008118: target tensor
        0.036787: edge tensor
      0.000091: initializing solutions matrix
      0.036240: loop
      0.000032: postprocessing (MAX MEMORY: 2.022GB)
  0.000187: postprocess solutions
0.000014: reference resolution 2
0.050477: fragment resolution 2
  0.000438: identify previous emora questions
  0.050022: sal
0.279119: dialogue infer 2
  0.028008: facts graph types
  0.031349: convert facts graph
    0.003916: to digraph
    0.027230: flatten types (790 concepts)
    0.000189: quantities
  0.000026: process dynamic rules
  0.211991: match
    0.211918: match
      0.004989: querygen
      0.104476: creating graph tensor (2015 nodes, 7458 edges)
        0.042447: setup
        0.007213: key tensor
        0.009349: target tensor
        0.043388: edge tensor
      0.000089: initializing solutions matrix
      0.102147: loop
      0.000014: postprocessing (MAX MEMORY: 2.509GB)
  0.004684: postprocess solutions
0.069674: apply inferences 2
  0.010401: apply
  0.002492: update types
  0.000226: operate
  0.056536: sal
0.010498: prepare template nlg
0.533312: template infer
  0.031667: facts graph types
  0.034990: convert facts graph
    0.003957: to digraph
    0.030815: flatten types (858 concepts)
    0.000202: quantities
  0.000025: process dynamic rules
  0.460190: match
    0.460112: match
      0.005888: querygen
      0.314961: creating graph tensor (2228 nodes, 8266 edges)
        0.236270: setup
        0.008830: key tensor
        0.010444: target tensor
        0.056814: edge tensor
      0.000092: initializing solutions matrix
      0.138916: loop
      0.000015: postprocessing (MAX MEMORY: 3.081GB)
  0.003058: postprocess solutions
0.002476: template fillers
0.000015: response sel
0.000137: response exp
0.000013: response rules
0.133898: response assembler
  0.000015: response assembly
  0.056306: update sal
  0.002227: decay sal
  0.075336: prune
    0.000013: setup
    0.000871: select keep
    0.000106: delete old spans
    0.056253: setup essentials
    0.006801: identify essentials
    0.010826: remove not keep

[2.75 s] Gotcha . I often cook spaghetti with meatballs at home . It's a quick but delicious dish when I don't know what to eat .

User: i hate meatballs
i hate meatballs
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Is meatball your favorite food ? (s: 0.31, pr: 0.10)
	Is spaghetti your favorite food ? (s: 0.28, pr: 0.10)
	Is Meatball your favorite food ? (s: 0.31, pr: 0.10)


0.000077: next turn
0.000018: sentence caser
0.109993: elit
0.236291: parse2logic
  0.001262: facts graph types
  0.002221: convert facts graph
    0.000400: to digraph
    0.001774: flatten types (80 concepts)
    0.000034: quantities
  0.000021: process dynamic rules
  0.225461: match
    0.225379: match
      0.000283: querygen
      0.034274: creating graph tensor (112 nodes, 369 edges)
        0.002128: setup
        0.024765: key tensor
        0.001194: target tensor
        0.006082: edge tensor
      0.000078: initializing solutions matrix
      0.190436: loop
      0.000018: postprocessing (MAX MEMORY: 0.007GB)
  0.001607: postprocess solutions
0.000044: multiword mentions
0.000013: ner mentions
0.002776: mention bridge
0.005113: merge bridge
0.027632: knowledge pull
0.015148: reference id
0.999054: reference infer
  0.020056: facts graph types
  0.024285: convert facts graph
    0.003773: to digraph
    0.020334: flatten types (626 concepts)
    0.000158: quantities
  0.009097: process dynamic rules
  0.943261: match
    0.943188: match
      0.008060: querygen
      0.833927: creating graph tensor (1517 nodes, 5484 edges)
        0.031911: setup
        0.762599: key tensor
        0.007835: target tensor
        0.029617: edge tensor
      0.000092: initializing solutions matrix
      0.100828: loop
      0.000034: postprocessing (MAX MEMORY: 1.367GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.040735: fragment resolution
  0.000446: identify previous emora questions
  0.040272: sal
0.363952: dialogue infer
  0.019820: facts graph types
  0.024949: convert facts graph
    0.003000: to digraph
    0.021778: flatten types (626 concepts)
    0.000157: quantities
  0.000027: process dynamic rules
  0.312758: match
    0.312688: match
      0.004187: querygen
      0.153870: creating graph tensor (1613 nodes, 5988 edges)
        0.034955: setup
        0.071301: key tensor
        0.007662: target tensor
        0.038049: edge tensor
      0.000090: initializing solutions matrix
      0.154335: loop
      0.000014: postprocessing (MAX MEMORY: 1.617GB)
  0.003997: postprocess solutions
0.048989: apply inferences
  0.007269: apply
  0.000614: update types
  0.000176: operate
  0.040911: sal
0.015192: reference id 2
0.288800: reference infer 2
  0.020618: facts graph types
  0.023583: convert facts graph
    0.003214: to digraph
    0.020184: flatten types (634 concepts)
    0.000164: quantities
  0.009679: process dynamic rules
  0.232822: match
    0.232750: match
      0.008236: querygen
      0.166020: creating graph tensor (1549 nodes, 5600 edges)
        0.031870: setup
        0.089869: key tensor
        0.007014: target tensor
        0.035479: edge tensor
      0.000088: initializing solutions matrix
      0.058163: loop
      0.000033: postprocessing (MAX MEMORY: 1.425GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.041505: fragment resolution 2
  0.000472: identify previous emora questions
  0.041017: sal
0.390131: dialogue infer 2
  0.020305: facts graph types
  0.025268: convert facts graph
    0.003213: to digraph
    0.021883: flatten types (634 concepts)
    0.000158: quantities
  0.000025: process dynamic rules
  0.338139: match
    0.338070: match
      0.004661: querygen
      0.156715: creating graph tensor (1651 nodes, 6136 edges)
        0.035207: setup
        0.077324: key tensor
        0.007428: target tensor
        0.034817: edge tensor
      0.000089: initializing solutions matrix
      0.176381: loop
      0.000016: postprocessing (MAX MEMORY: 1.697GB)
  0.003999: postprocess solutions
0.227614: apply inferences 2
  0.005768: apply
  0.000614: update types
  0.000179: operate
  0.221035: sal
0.008254: prepare template nlg
0.281834: template infer
  0.020527: facts graph types
  0.025950: convert facts graph
    0.002975: to digraph
    0.022797: flatten types (634 concepts)
    0.000162: quantities
  0.000026: process dynamic rules
  0.231060: match
    0.230978: match
      0.004293: querygen
      0.123046: creating graph tensor (1651 nodes, 6136 edges)
        0.036275: setup
        0.039950: key tensor
        0.007956: target tensor
        0.036978: edge tensor
      0.000093: initializing solutions matrix
      0.103300: loop
      0.000015: postprocessing (MAX MEMORY: 1.697GB)
  0.001759: postprocess solutions
0.002272: template fillers
0.000016: response sel
0.000144: response exp
0.000014: response rules
0.089101: response assembler
  0.000015: response assembly
  0.041726: update sal
  0.001649: decay sal
  0.045695: prune
    0.000012: setup
    0.000649: select keep
    0.000101: delete old spans
    0.036903: setup essentials
    0.006636: identify essentials
    0.001057: remove not keep

[3.20 s] I see . Is meatball your favorite food ?

User: you are dumb no
you are dumb no
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm2560', 'wm2561')]
CURRENT USER CONCEPTS: {'emora', 'wm2573', 'wm2579', 'wm2585', 'wm2580', 'user', 'wm2578', 'wm2574', 'now', 'predicate', 'prp'}
FRAGMENT REQUEST MERGES: [('wm2578', 'wm2560')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:


Present Options:
	Is spaghetti your favorite food ? (s: 0.38, pr: 0.10)


0.000072: next turn
0.000018: sentence caser
0.110930: elit
0.204097: parse2logic
  0.001447: facts graph types
  0.002515: convert facts graph
    0.000545: to digraph
    0.001922: flatten types (96 concepts)
    0.000036: quantities
  0.000021: process dynamic rules
  0.192024: match
    0.191943: match
      0.000298: querygen
      0.020143: creating graph tensor (124 nodes, 405 edges)
        0.002353: setup
        0.009199: key tensor
        0.000802: target tensor
        0.007656: edge tensor
      0.000078: initializing solutions matrix
      0.171141: loop
      0.000017: postprocessing (MAX MEMORY: 0.009GB)
  0.001859: postprocess solutions
0.000047: multiword mentions
0.000012: ner mentions
0.002978: mention bridge
0.004937: merge bridge
0.029578: knowledge pull
0.015830: reference id
0.191206: reference infer
  0.021740: facts graph types
  0.025787: convert facts graph
    0.003269: to digraph
    0.022315: flatten types (663 concepts)
    0.000181: quantities
  0.009630: process dynamic rules
  0.131866: match
    0.131792: match
      0.008651: querygen
      0.081290: creating graph tensor (1612 nodes, 5824 edges)
        0.033484: setup
        0.005236: key tensor
        0.007388: target tensor
        0.033560: edge tensor
      0.000085: initializing solutions matrix
      0.041533: loop
      0.000032: postprocessing (MAX MEMORY: 1.541GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.044928: fragment resolution
  0.000485: identify previous emora questions
  0.001877: find answer
  0.042548: sal
0.507725: dialogue infer
  0.021525: facts graph types
  0.026131: convert facts graph
    0.003371: to digraph
    0.022583: flatten types (659 concepts)
    0.000163: quantities
  0.000026: process dynamic rules
  0.453622: match
    0.453549: match
      0.004830: querygen
      0.227341: creating graph tensor (1698 nodes, 6302 edges)
        0.036597: setup
        0.145024: key tensor
        0.008323: target tensor
        0.035260: edge tensor
      0.000091: initializing solutions matrix
      0.221066: loop
      0.000015: postprocessing (MAX MEMORY: 1.791GB)
  0.003766: postprocess solutions
0.050583: apply inferences
  0.006179: apply
  0.000640: update types
  0.000221: operate
  0.043523: sal
0.015474: reference id 2
0.178197: reference infer 2
  0.021980: facts graph types
  0.024775: convert facts graph
    0.002880: to digraph
    0.021708: flatten types (664 concepts)
    0.000165: quantities
  0.009729: process dynamic rules
  0.119414: match
    0.119334: match
      0.008363: querygen
      0.085036: creating graph tensor (1609 nodes, 5817 edges)
        0.033414: setup
        0.005645: key tensor
        0.007188: target tensor
        0.037081: edge tensor
      0.000088: initializing solutions matrix
      0.025623: loop
      0.000029: postprocessing (MAX MEMORY: 1.537GB)
  0.000195: postprocess solutions
0.001813: reference resolution 2
0.043328: fragment resolution 2
  0.000412: identify previous emora questions
  0.042899: sal
0.569001: dialogue infer 2
  0.021652: facts graph types
  0.205129: convert facts graph
    0.003190: to digraph
    0.201745: flatten types (662 concepts)
    0.000177: quantities
  0.000027: process dynamic rules
  0.335734: match
    0.335652: match
      0.005009: querygen
      0.147345: creating graph tensor (1711 nodes, 6352 edges)
        0.037197: setup
        0.062138: key tensor
        0.008048: target tensor
        0.037949: edge tensor
      0.000091: initializing solutions matrix
      0.182981: loop
      0.000016: postprocessing (MAX MEMORY: 1.819GB)
  0.003776: postprocess solutions
0.049874: apply inferences 2
  0.005577: apply
  0.000642: update types
  0.000227: operate
  0.043408: sal
0.008528: prepare template nlg
0.279344: template infer
  0.021930: facts graph types
  0.026759: convert facts graph
    0.003194: to digraph
    0.023384: flatten types (662 concepts)
    0.000165: quantities
  0.000025: process dynamic rules
  0.226031: match
    0.225957: match
      0.004318: querygen
      0.117061: creating graph tensor (1711 nodes, 6352 edges)
        0.037834: setup
        0.032540: key tensor
        0.008142: target tensor
        0.036674: edge tensor
      0.000087: initializing solutions matrix
      0.104231: loop
      0.000016: postprocessing (MAX MEMORY: 1.819GB)
  0.002003: postprocess solutions
0.002432: template fillers
0.000015: response sel
0.000139: response exp
0.000015: response rules
0.093400: response assembler
  0.000015: response assembly
  0.043056: update sal
  0.001732: decay sal
  0.048580: prune
    0.000016: setup
    0.000678: select keep
    0.000099: delete old spans
    0.039005: setup essentials
    0.007074: identify essentials
    0.001179: remove not keep

[2.41 s] Gotcha . Is spaghetti your favorite food ?

User: no
no
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm2466', 'wm2467')]
CURRENT USER CONCEPTS: {'wm2631', 'wm2632', 'wm2630', 'user', 'predicate'}
FRAGMENT REQUEST MERGES: [('wm2630', 'wm2466')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:


0.000074: next turn
0.000018: sentence caser
0.112156: elit
0.084002: parse2logic
  0.000351: facts graph types
  0.000827: convert facts graph
    0.000145: to digraph
    0.000647: flatten types (26 concepts)
    0.000022: quantities
  0.000021: process dynamic rules
  0.080185: match
    0.080102: match
      0.000092: querygen
      0.042859: creating graph tensor (30 nodes, 82 edges)
        0.000559: setup
        0.038336: key tensor
        0.000426: target tensor
        0.003477: edge tensor
      0.000075: initializing solutions matrix
      0.036880: loop
      0.000013: postprocessing (MAX MEMORY: 0.001GB)
  0.000457: postprocess solutions
0.000033: multiword mentions
0.000012: ner mentions
0.001574: mention bridge
0.004236: merge bridge
0.029060: knowledge pull
0.015225: reference id
0.187746: reference infer
  0.021614: facts graph types
  0.025648: convert facts graph
    0.003958: to digraph
    0.021504: flatten types (656 concepts)
    0.000164: quantities
  0.010015: process dynamic rules
  0.128202: match
    0.128130: match
      0.007909: querygen
      0.081066: creating graph tensor (1598 nodes, 5785 edges)
        0.033730: setup
        0.005219: key tensor
        0.007359: target tensor
        0.033042: edge tensor
      0.000088: initializing solutions matrix
      0.038833: loop
      0.000032: postprocessing (MAX MEMORY: 1.520GB)
  0.000009: postprocess solutions
0.000014: reference resolution
0.044784: fragment resolution
  0.000484: identify previous emora questions
  0.001864: find answer
  0.042419: sal
0.429871: dialogue infer
  0.021016: facts graph types
  0.026319: convert facts graph
    0.003138: to digraph
    0.023002: flatten types (652 concepts)
    0.000164: quantities
  0.000026: process dynamic rules
  0.376216: match
    0.376145: match
      0.004241: querygen
      0.191624: creating graph tensor (1681 nodes, 6247 edges)
        0.036503: setup
        0.110764: key tensor
        0.008149: target tensor
        0.034152: edge tensor
      0.000091: initializing solutions matrix
      0.179980: loop
      0.000015: postprocessing (MAX MEMORY: 1.759GB)
  0.003759: postprocess solutions
0.050138: apply inferences
  0.006554: apply
  0.000643: update types
  0.000223: operate
  0.042699: sal
0.015198: reference id 2
0.351840: reference infer 2
  0.021315: facts graph types
  0.024394: convert facts graph
    0.003285: to digraph
    0.020924: flatten types (657 concepts)
    0.000163: quantities
  0.009927: process dynamic rules
  0.293707: match
    0.293628: match
      0.007641: querygen
      0.264367: creating graph tensor (1595 nodes, 5778 edges)
        0.217966: setup
        0.005311: key tensor
        0.007367: target tensor
        0.031847: edge tensor
      0.000091: initializing solutions matrix
      0.021308: loop
      0.000028: postprocessing (MAX MEMORY: 1.516GB)
  0.000209: postprocess solutions
0.001853: reference resolution 2
0.043020: fragment resolution 2
  0.000432: identify previous emora questions
  0.042572: sal
0.656385: dialogue infer 2
  0.021219: facts graph types
  0.026342: convert facts graph
    0.003170: to digraph
    0.022994: flatten types (655 concepts)
    0.000164: quantities
  0.000025: process dynamic rules
  0.602325: match
    0.602250: match
      0.004874: querygen
      0.379316: creating graph tensor (1694 nodes, 6297 edges)
        0.036177: setup
        0.297375: key tensor
        0.008469: target tensor
        0.035043: edge tensor
      0.000093: initializing solutions matrix
      0.217728: loop
      0.000027: postprocessing (MAX MEMORY: 1.787GB)
  0.003759: postprocess solutions
0.049687: apply inferences 2
  0.005805: apply
  0.000650: update types
  0.000230: operate
  0.042983: sal
0.008564: prepare template nlg
0.288328: template infer
  0.021536: facts graph types
  0.026332: convert facts graph
    0.003023: to digraph
    0.023128: flatten types (655 concepts)
    0.000166: quantities
  0.000025: process dynamic rules
  0.235956: match
    0.235881: match
      0.004314: querygen
      0.112767: creating graph tensor (1694 nodes, 6297 edges)
        0.038025: setup
        0.029084: key tensor
        0.007991: target tensor
        0.035733: edge tensor
      0.000089: initializing solutions matrix
      0.118460: loop
      0.000015: postprocessing (MAX MEMORY: 1.787GB)
  0.002009: postprocess solutions
0.002038: template fillers
0.000020: response sel
0.000416: response exp
0.000015: response rules
0.096671: response assembler
  0.000015: response assembly
  0.043523: update sal
  0.001745: decay sal
  0.051372: prune
    0.000018: setup
    0.000695: select keep
    0.000099: delete old spans
    0.039337: setup essentials
    0.007500: identify essentials
    0.003132: remove not keep

[2.47 s] So , you know, I really enjoy learning about new movies . Do you like movies too ?

User: i love movies
i love movies
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm2663', 'wm2665')]
CURRENT USER CONCEPTS: {'wm2676', 'movie', 'wm2684', 'wm2682', 'user', 'wm2673', 'now', 'wm2674', 'prp'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm2663', 'wm2665')]
CURRENT USER CONCEPTS: {'wm2676', 'movie', 'wm2684', 'wm2682', 'user', 'wm2673', 'now', 'wm2674', 'prp'}
FRAGMENT REQUEST MERGES: []

React + Present Options:
	What is your favorite movie? My favorite movie is the first Iron Man. (s: 0.57, pr: 1.00)


Present Options:
	Do you have a favorite streaming service? Believe it or not, I don't have a favorite. I think they all have such great offerings! (s: 0.26, pr: 0.50)
	Have you ever tried making your own movie? I once made one in class for school. (s: 0.32, pr: 0.10)
	Do you have a favorite movie or tv genre? (s: 0.14, pr: 0.50)


0.000075: next turn
0.000031: sentence caser
0.110920: elit
0.233803: parse2logic
  0.001226: facts graph types
  0.002054: convert facts graph
    0.000367: to digraph
    0.001641: flatten types (77 concepts)
    0.000033: quantities
  0.000021: process dynamic rules
  0.223582: match
    0.223504: match
      0.000260: querygen
      0.023607: creating graph tensor (105 nodes, 343 edges)
        0.001840: setup
        0.015211: key tensor
        0.000916: target tensor
        0.005535: edge tensor
      0.000077: initializing solutions matrix
      0.199263: loop
      0.000016: postprocessing (MAX MEMORY: 0.007GB)
  0.001590: postprocess solutions
0.000043: multiword mentions
0.000012: ner mentions
0.002732: mention bridge
0.005602: merge bridge
0.027845: knowledge pull
0.012417: reference id
1.651824: reference infer
  0.020130: facts graph types
  0.024600: convert facts graph
    0.002992: to digraph
    0.021428: flatten types (624 concepts)
    0.000160: quantities
  0.007844: process dynamic rules
  1.596891: match
    1.596819: match
      0.007163: querygen
      1.571555: creating graph tensor (1565 nodes, 5699 edges)
        0.034078: setup
        1.495111: key tensor
        0.008499: target tensor
        0.031778: edge tensor
      0.000091: initializing solutions matrix
      0.017784: loop
      0.000031: postprocessing (MAX MEMORY: 1.472GB)
  0.000009: postprocess solutions
0.000014: reference resolution
0.041839: fragment resolution
  0.000512: identify previous emora questions
  0.000959: find answer
  0.040349: sal
0.385715: dialogue infer
  0.020051: facts graph types
  0.025560: convert facts graph
    0.003009: to digraph
    0.022380: flatten types (624 concepts)
    0.000156: quantities
  0.000027: process dynamic rules
  0.333617: match
    0.333546: match
      0.004174: querygen
      0.204324: creating graph tensor (1643 nodes, 6110 edges)
        0.036399: setup
        0.123550: key tensor
        0.008054: target tensor
        0.034286: edge tensor
      0.000089: initializing solutions matrix
      0.124743: loop
      0.000015: postprocessing (MAX MEMORY: 1.682GB)
  0.004036: postprocess solutions
0.054633: apply inferences
  0.010060: apply
  0.001320: update types
  0.000403: operate
  0.042829: sal
0.014115: reference id 2
0.349844: reference infer 2
  0.021835: facts graph types
  0.205668: convert facts graph
    0.003326: to digraph
    0.202136: flatten types (660 concepts)
    0.000183: quantities
  0.008602: process dynamic rules
  0.111358: match
    0.111276: match
      0.008011: querygen
      0.084481: creating graph tensor (1669 nodes, 6085 edges)
        0.036389: setup
        0.005944: key tensor
        0.007503: target tensor
        0.032899: edge tensor
      0.000087: initializing solutions matrix
      0.018481: loop
      0.000027: postprocessing (MAX MEMORY: 1.678GB)
  0.000112: postprocess solutions
0.000157: reference resolution 2
0.044495: fragment resolution 2
  0.000506: identify previous emora questions
  0.000957: find answer
  0.043013: sal
0.642991: dialogue infer 2
  0.021869: facts graph types
  0.027337: convert facts graph
    0.003216: to digraph
    0.023943: flatten types (660 concepts)
    0.000164: quantities
  0.000026: process dynamic rules
  0.586523: match
    0.586449: match
      0.004467: querygen
      0.311337: creating graph tensor (1750 nodes, 6507 edges)
        0.038271: setup
        0.226164: key tensor
        0.008522: target tensor
        0.036162: edge tensor
      0.000091: initializing solutions matrix
      0.270321: loop
      0.000016: postprocessing (MAX MEMORY: 1.908GB)
  0.004559: postprocess solutions
0.052548: apply inferences 2
  0.007976: apply
  0.000632: update types
  0.000190: operate
  0.043731: sal
0.008582: prepare template nlg
0.289751: template infer
  0.021996: facts graph types
  0.026983: convert facts graph
    0.003025: to digraph
    0.023778: flatten types (662 concepts)
    0.000166: quantities
  0.000025: process dynamic rules
  0.235407: match
    0.235331: match
      0.004508: querygen
      0.111563: creating graph tensor (1758 nodes, 6538 edges)
        0.038813: setup
        0.024329: key tensor
        0.008180: target tensor
        0.037763: edge tensor
      0.000096: initializing solutions matrix
      0.118915: loop
      0.000015: postprocessing (MAX MEMORY: 1.926GB)
  0.002591: postprocess solutions
0.002374: template fillers
0.000017: response sel
0.000101: response exp
0.000014: response rules
0.095051: response assembler
  0.000015: response assembly
  0.043084: update sal
  0.001740: decay sal
  0.050199: prune
    0.000012: setup
    0.000675: select keep
    0.000111: delete old spans
    0.040101: setup essentials
    0.007140: identify essentials
    0.001798: remove not keep

[4.03 s] What is your favorite movie? My favorite movie is the first Iron Man.

User: i like iron man too
i like iron man too
ARG REQUESTS: [('emora', 'request', 'wm2676', 'wm2733')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm2762', 'wm2754', 'wm2763', 'wm2761', 'wm2748', 'wm2759', 'wm2767', 'wm2766', 'iron_man', 'user', 'now', 'unknown_other', 'prp'}
FRAGMENT REQUEST MERGES: [('iron_man', 'wm2676')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Iron Man is my favorite Marvel character! His snarkiness inspired my sense of humor as a child. What's your favorite of the Iron Man movies? (s: 0.56, pr: 1.00)
	Iron Man is my favorite Marvel character! His snarkiness inspired my sense of humor as a child. What's your favorite of the Iron Man movies? (s: 0.56, pr: 1.00)
	Iron Man is my favorite Marvel character! His snarkiness inspired my sense of humor as a child. What's your favorite of the Iron Man movies? (s: 0.58, pr: 1.00)
	Iron Man is my favorite Marvel character! His snarkiness inspired my sense of humor as a child. What's your favorite of the Iron Man movies? (s: 0.58, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.33, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.33, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.33, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.33, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.35, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.35, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.35, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.35, pr: 1.00)


Present Options:
	Do you have a favorite streaming service? Believe it or not, I don't have a favorite. I think they all have such great offerings! (s: 0.32, pr: 0.50)
	Have you ever tried making your own movie? I once made one in class for school. (s: 0.32, pr: 0.10)


0.000074: next turn
0.000018: sentence caser
0.118455: elit
0.245542: parse2logic
  0.001830: facts graph types
  0.003538: convert facts graph
    0.000650: to digraph
    0.002832: flatten types (117 concepts)
    0.000043: quantities
  0.000021: process dynamic rules
  0.229305: match
    0.229227: match
      0.000382: querygen
      0.036548: creating graph tensor (160 nodes, 534 edges)
        0.002963: setup
        0.026129: key tensor
        0.001035: target tensor
        0.006248: edge tensor
      0.000081: initializing solutions matrix
      0.191926: loop
      0.000016: postprocessing (MAX MEMORY: 0.014GB)
  0.002404: postprocess solutions
0.000136: multiword mentions
0.000013: ner mentions
0.003933: mention bridge
0.011249: merge bridge
0.029744: knowledge pull
0.014584: reference id
0.170930: reference infer
  0.022328: facts graph types
  0.026631: convert facts graph
    0.003330: to digraph
    0.023110: flatten types (675 concepts)
    0.000169: quantities
  0.008074: process dynamic rules
  0.111607: match
    0.111531: match
      0.008119: querygen
      0.085245: creating graph tensor (1684 nodes, 6129 edges)
        0.035717: setup
        0.006068: key tensor
        0.007521: target tensor
        0.034150: edge tensor
      0.000087: initializing solutions matrix
      0.017866: loop
      0.000027: postprocessing (MAX MEMORY: 1.703GB)
  0.000110: postprocess solutions
0.000175: reference resolution
0.068480: fragment resolution
  0.000485: identify previous emora questions
  0.024232: find answer
  0.043744: sal
0.739487: dialogue infer
  0.022123: facts graph types
  0.026994: convert facts graph
    0.003194: to digraph
    0.023620: flatten types (673 concepts)
    0.000167: quantities
  0.000026: process dynamic rules
  0.683162: match
    0.683091: match
      0.004891: querygen
      0.464915: creating graph tensor (1756 nodes, 6519 edges)
        0.221382: setup
        0.188827: key tensor
        0.008943: target tensor
        0.043525: edge tensor
      0.000090: initializing solutions matrix
      0.212946: loop
      0.000018: postprocessing (MAX MEMORY: 1.916GB)
  0.004508: postprocess solutions
0.055739: apply inferences
  0.009574: apply
  0.000796: update types
  0.000461: operate
  0.044887: sal
0.014438: reference id 2
0.181244: reference infer 2
  0.023026: facts graph types
  0.026354: convert facts graph
    0.003101: to digraph
    0.023062: flatten types (683 concepts)
    0.000170: quantities
  0.008167: process dynamic rules
  0.121292: match
    0.121216: match
      0.008011: querygen
      0.094507: creating graph tensor (1701 nodes, 6190 edges)
        0.035720: setup
        0.006205: key tensor
        0.007527: target tensor
        0.043226: edge tensor
      0.000088: initializing solutions matrix
      0.018397: loop
      0.000029: postprocessing (MAX MEMORY: 1.737GB)
  0.000122: postprocess solutions
0.000175: reference resolution 2
0.044505: fragment resolution 2
  0.000494: identify previous emora questions
  0.043994: sal
0.323219: dialogue infer 2
  0.023116: facts graph types
  0.027415: convert facts graph
    0.003121: to digraph
    0.024110: flatten types (683 concepts)
    0.000170: quantities
  0.000026: process dynamic rules
  0.265043: match
    0.264970: match
      0.004897: querygen
      0.134643: creating graph tensor (1785 nodes, 6623 edges)
        0.038349: setup
        0.039086: key tensor
        0.008240: target tensor
        0.046859: edge tensor
      0.000091: initializing solutions matrix
      0.125111: loop
      0.000015: postprocessing (MAX MEMORY: 1.978GB)
  0.004902: postprocess solutions
0.060887: apply inferences 2
  0.012495: apply
  0.000947: update types
  0.000200: operate
  0.047224: sal
0.008983: prepare template nlg
0.436519: template infer
  0.024808: facts graph types
  0.028984: convert facts graph
    0.003271: to digraph
    0.025517: flatten types (719 concepts)
    0.000181: quantities
  0.000024: process dynamic rules
  0.376428: match
    0.376354: match
      0.005608: querygen
      0.134038: creating graph tensor (1878 nodes, 6971 edges)
        0.040492: setup
        0.038010: key tensor
        0.008543: target tensor
        0.044852: edge tensor
      0.000090: initializing solutions matrix
      0.236332: loop
      0.000016: postprocessing (MAX MEMORY: 2.191GB)
  0.003566: postprocess solutions
0.003040: template fillers
0.000016: response sel
0.000096: response exp
0.000013: response rules
0.109427: response assembler
  0.000015: response assembly
  0.046945: update sal
  0.001900: decay sal
  0.060552: prune
    0.000012: setup
    0.000756: select keep
    0.000117: delete old spans
    0.044658: setup essentials
    0.007104: identify essentials
    0.007527: remove not keep

[2.64 s] Iron Man is my favorite Marvel character! His snarkiness inspired my sense of humor as a child. What's your favorite of the Iron Man movies?

User: iron man the character is kind of a dick so why did you try to emulate him
iron man the character is kind of a dick so why did you try to emulate him
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	I haven't heard of that before. Why is it your favorite? (s: 0.39, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.37, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.39, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.37, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.42, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.40, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.42, pr: 1.00)
	I haven't heard of that before. Why is it your favorite? (s: 0.40, pr: 1.00)


Present Options:
	Do you have a favorite streaming service? Believe it or not, I don't have a favorite. I think they all have such great offerings! (s: 0.33, pr: 0.50)
	Have you ever tried making your own movie? I once made one in class for school. (s: 0.26, pr: 0.10)


0.000076: next turn
0.000021: sentence caser
0.122627: elit
0.611507: parse2logic
  0.005906: facts graph types
  0.008367: convert facts graph
    0.001647: to digraph
    0.006618: flatten types (310 concepts)
    0.000087: quantities
  0.000021: process dynamic rules
  0.565300: match
    0.565215: match
      0.000926: querygen
      0.209110: creating graph tensor (414 nodes, 1460 edges)
        0.008794: setup
        0.001875: key tensor
        0.002187: target tensor
        0.195741: edge tensor
      0.000099: initializing solutions matrix
      0.354875: loop
      0.000014: postprocessing (MAX MEMORY: 0.293GB)
  0.008557: postprocess solutions
0.000181: multiword mentions
0.000115: ner mentions
0.011863: mention bridge
0.027948: merge bridge
0.030997: knowledge pull
0.033453: reference id
0.187129: reference infer
  0.024011: facts graph types
  0.026911: convert facts graph
    0.003968: to digraph
    0.022756: flatten types (701 concepts)
    0.000166: quantities
  0.007398: process dynamic rules
  0.126138: match
    0.126063: match
      0.007227: querygen
      0.085825: creating graph tensor (1724 nodes, 6225 edges)
        0.037223: setup
        0.005621: key tensor
        0.007705: target tensor
        0.033535: edge tensor
      0.000087: initializing solutions matrix
      0.032694: loop
      0.000029: postprocessing (MAX MEMORY: 1.761GB)
  0.000308: postprocess solutions
0.001301: reference resolution
0.044954: fragment resolution
  0.000466: identify previous emora questions
  0.044472: sal
0.547221: dialogue infer
  0.024068: facts graph types
  0.027584: convert facts graph
    0.003137: to digraph
    0.024263: flatten types (699 concepts)
    0.000170: quantities
  0.000026: process dynamic rules
  0.488665: match
    0.488593: match
      0.004529: querygen
      0.305906: creating graph tensor (1815 nodes, 6718 edges)
        0.039611: setup
        0.221128: key tensor
        0.008451: target tensor
        0.034468: edge tensor
      0.000090: initializing solutions matrix
      0.177855: loop
      0.000014: postprocessing (MAX MEMORY: 2.036GB)
  0.004191: postprocess solutions
0.057542: apply inferences
  0.010252: apply
  0.000615: update types
  0.000194: operate
  0.046461: sal
0.018144: reference id 2
0.197942: reference infer 2
  0.025943: facts graph types
  0.027681: convert facts graph
    0.003566: to digraph
    0.023919: flatten types (731 concepts)
    0.000175: quantities
  0.008708: process dynamic rules
  0.133106: match
    0.133029: match
      0.008490: querygen
      0.090048: creating graph tensor (1788 nodes, 6455 edges)
        0.036737: setup
        0.006186: key tensor
        0.007740: target tensor
        0.037582: edge tensor
      0.000089: initializing solutions matrix
      0.034177: loop
      0.000030: postprocessing (MAX MEMORY: 1.894GB)
  0.000204: postprocess solutions
0.000235: reference resolution 2
0.046796: fragment resolution 2
  0.000499: identify previous emora questions
  0.046280: sal
0.457693: dialogue infer 2
  0.025828: facts graph types
  0.029422: convert facts graph
    0.003522: to digraph
    0.025713: flatten types (731 concepts)
    0.000173: quantities
  0.000026: process dynamic rules
  0.395423: match
    0.395349: match
      0.004781: querygen
      0.292084: creating graph tensor (1903 nodes, 7050 edges)
        0.040782: setup
        0.006625: key tensor
        0.199306: target tensor
        0.043118: edge tensor
      0.000092: initializing solutions matrix
      0.098174: loop
      0.000015: postprocessing (MAX MEMORY: 2.242GB)
  0.004185: postprocess solutions
0.055670: apply inferences 2
  0.006810: apply
  0.000611: update types
  0.000196: operate
  0.048010: sal
0.008931: prepare template nlg
0.407030: template infer
  0.025787: facts graph types
  0.029478: convert facts graph
    0.003359: to digraph
    0.025930: flatten types (731 concepts)
    0.000174: quantities
  0.000026: process dynamic rules
  0.345282: match
    0.345206: match
      0.005401: querygen
      0.129936: creating graph tensor (1903 nodes, 7050 edges)
        0.041091: setup
        0.038061: key tensor
        0.008887: target tensor
        0.039769: edge tensor
      0.000090: initializing solutions matrix
      0.209453: loop
      0.000016: postprocessing (MAX MEMORY: 2.242GB)
  0.003501: postprocess solutions
0.002249: template fillers
0.000016: response sel
0.000137: response exp
0.000014: response rules
0.110825: response assembler
  0.000015: response assembly
  0.046890: update sal
  0.001919: decay sal
  0.061985: prune
    0.000013: setup
    0.000729: select keep
    0.000109: delete old spans
    0.046978: setup essentials
    0.007194: identify essentials
    0.006568: remove not keep

[2.98 s] I haven't heard of that before. Why is it your favorite?

User: i didnt say a movie
i didnt say a movie
ARG REQUESTS: [('emora', 'request', 'wm3038', 'wm3041')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm3078', 'movie', 'wm3069', 'past', 'wm3066', 'wm3067', 'wm3083', 'wm3075', 'user', 'wm3071', 'wm3068', 'prp', 'unknown_verb'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: [('emora', 'request', 'wm3038', 'wm3041')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm3078', 'movie', 'wm3069', 'past', 'wm3066', 'wm3067', 'wm3083', 'wm3075', 'user', 'wm3071', 'wm3068', 'prp', 'unknown_verb'}
FRAGMENT REQUEST MERGES: []

React + Present Options:
	That's interesting to hear. I guess I'll check it out. Maybe it will be my new favorite! (s: 0.44, pr: 1.00)
	That's interesting to hear. I guess I'll check it out. Maybe it will be my new favorite! (s: 0.44, pr: 1.00)
	That's interesting to hear. I guess I'll check it out. Maybe it will be my new favorite! (s: 0.44, pr: 1.00)
	That's interesting to hear. I guess I'll check it out. Maybe it will be my new favorite! (s: 0.44, pr: 1.00)
	That's interesting to hear. I guess I'll check it out. Maybe it will be my new favorite! (s: 0.44, pr: 1.00)
	That's interesting to hear. I guess I'll check it out. Maybe it will be my new favorite! (s: 0.44, pr: 1.00)
	That's interesting to hear. I guess I'll check it out. Maybe it will be my new favorite! (s: 0.44, pr: 1.00)
	That's interesting to hear. I guess I'll check it out. Maybe it will be my new favorite! (s: 0.44, pr: 1.00)


Present Options:
	Do you have a favorite streaming service? Believe it or not, I don't have a favorite. I think they all have such great offerings! (s: 0.29, pr: 0.50)
	Have you ever tried making your own movie? I once made one in class for school. (s: 0.24, pr: 0.10)


0.000087: next turn
0.000018: sentence caser
0.112671: elit
0.456102: parse2logic
  0.002280: facts graph types
  0.003754: convert facts graph
    0.000767: to digraph
    0.002927: flatten types (142 concepts)
    0.000047: quantities
  0.000021: process dynamic rules
  0.436812: match
    0.436733: match
      0.000458: querygen
      0.107679: creating graph tensor (183 nodes, 613 edges)
        0.003456: setup
        0.095998: key tensor
        0.001155: target tensor
        0.006831: edge tensor
      0.000084: initializing solutions matrix
      0.328148: loop
      0.000018: postprocessing (MAX MEMORY: 0.019GB)
  0.003126: postprocess solutions
0.000050: multiword mentions
0.000012: ner mentions
0.003566: mention bridge
0.007262: merge bridge
0.027143: knowledge pull
0.016048: reference id
0.230448: reference infer
  0.020008: facts graph types
  0.023169: convert facts graph
    0.002947: to digraph
    0.020049: flatten types (617 concepts)
    0.000152: quantities
  0.007095: process dynamic rules
  0.177929: match
    0.177855: match
      0.006725: querygen
      0.136511: creating graph tensor (1439 nodes, 5206 edges)
        0.030940: setup
        0.068932: key tensor
        0.007115: target tensor
        0.027786: edge tensor
      0.000102: initializing solutions matrix
      0.034292: loop
      0.000027: postprocessing (MAX MEMORY: 1.232GB)
  0.000211: postprocess solutions
0.000236: reference resolution
0.061321: fragment resolution
  0.000456: identify previous emora questions
  0.020671: find answer
  0.040174: sal
0.480205: dialogue infer
  0.019714: facts graph types
  0.024198: convert facts graph
    0.003227: to digraph
    0.020805: flatten types (617 concepts)
    0.000152: quantities
  0.000050: process dynamic rules
  0.430001: match
    0.429928: match
      0.003955: querygen
      0.216587: creating graph tensor (1546 nodes, 5727 edges)
        0.033836: setup
        0.142253: key tensor
        0.007710: target tensor
        0.030959: edge tensor
      0.000088: initializing solutions matrix
      0.209081: loop
      0.000015: postprocessing (MAX MEMORY: 1.480GB)
  0.003929: postprocess solutions
0.047871: apply inferences
  0.006365: apply
  0.000535: update types
  0.000185: operate
  0.040765: sal
0.015913: reference id 2
0.225825: reference infer 2
  0.019831: facts graph types
  0.022118: convert facts graph
    0.002699: to digraph
    0.019247: flatten types (617 concepts)
    0.000151: quantities
  0.007633: process dynamic rules
  0.174102: match
    0.174028: match
      0.006618: querygen
      0.132750: creating graph tensor (1439 nodes, 5206 edges)
        0.030007: setup
        0.066732: key tensor
        0.006675: target tensor
        0.027700: edge tensor
      0.000088: initializing solutions matrix
      0.034346: loop
      0.000028: postprocessing (MAX MEMORY: 1.232GB)
  0.000205: postprocess solutions
0.000229: reference resolution 2
0.061206: fragment resolution 2
  0.000460: identify previous emora questions
  0.020656: find answer
  0.040072: sal
0.677696: dialogue infer 2
  0.019647: facts graph types
  0.024150: convert facts graph
    0.002941: to digraph
    0.021043: flatten types (617 concepts)
    0.000150: quantities
  0.000048: process dynamic rules
  0.627654: match
    0.627583: match
      0.003813: querygen
      0.405201: creating graph tensor (1546 nodes, 5727 edges)
        0.033425: setup
        0.145573: key tensor
        0.193063: target tensor
        0.031270: edge tensor
      0.000090: initializing solutions matrix
      0.218249: loop
      0.000016: postprocessing (MAX MEMORY: 1.480GB)
  0.003948: postprocess solutions
0.047969: apply inferences 2
  0.006303: apply
  0.000535: update types
  0.000183: operate
  0.040917: sal
0.007909: prepare template nlg
0.650027: template infer
  0.019971: facts graph types
  0.024004: convert facts graph
    0.002981: to digraph
    0.020855: flatten types (617 concepts)
    0.000154: quantities
  0.000025: process dynamic rules
  0.600710: match
    0.600636: match
      0.004781: querygen
      0.336165: creating graph tensor (1546 nodes, 5727 edges)
        0.033053: setup
        0.260726: key tensor
        0.008142: target tensor
        0.032350: edge tensor
      0.000090: initializing solutions matrix
      0.259258: loop
      0.000019: postprocessing (MAX MEMORY: 1.480GB)
  0.002789: postprocess solutions
0.001856: template fillers
0.000017: response sel
0.000111: response exp
0.000014: response rules
0.087893: response assembler
  0.000015: response assembly
  0.040942: update sal
  0.001640: decay sal
  0.045282: prune
    0.000012: setup
    0.000630: select keep
    0.000113: delete old spans
    0.035676: setup essentials
    0.007377: identify essentials
    0.001128: remove not keep

[3.22 s] That's interesting to hear. I guess I'll check it out. Maybe it will be my new favorite!

User: oh dear
oh dear
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Do you have a favorite streaming service? Believe it or not, I don't have a favorite. I think they all have such great offerings! (s: 0.26, pr: 0.50)
	Have you ever tried making your own movie? I once made one in class for school. (s: 0.22, pr: 0.10)


0.000077: next turn
0.000018: sentence caser
0.110355: elit
0.049223: parse2logic
  0.000519: facts graph types
  0.001079: convert facts graph
    0.000333: to digraph
    0.000711: flatten types (38 concepts)
    0.000022: quantities
  0.000021: process dynamic rules
  0.044008: match
    0.043925: match
      0.000121: querygen
      0.009572: creating graph tensor (46 nodes, 138 edges)
        0.000805: setup
        0.001396: key tensor
        0.000443: target tensor
        0.006856: edge tensor
      0.000075: initializing solutions matrix
      0.033951: loop
      0.000014: postprocessing (MAX MEMORY: 0.002GB)
  0.000282: postprocess solutions
0.000035: multiword mentions
0.000011: ner mentions
0.002337: mention bridge
0.005352: merge bridge
0.027252: knowledge pull
0.016033: reference id
0.248995: reference infer
  0.020267: facts graph types
  0.023343: convert facts graph
    0.003014: to digraph
    0.020158: flatten types (623 concepts)
    0.000152: quantities
  0.007152: process dynamic rules
  0.196059: match
    0.195988: match
      0.006776: querygen
      0.158207: creating graph tensor (1445 nodes, 5231 edges)
        0.031056: setup
        0.087702: key tensor
        0.007354: target tensor
        0.030417: edge tensor
      0.000087: initializing solutions matrix
      0.030691: loop
      0.000028: postprocessing (MAX MEMORY: 1.244GB)
  0.000210: postprocess solutions
0.000246: reference resolution
0.041136: fragment resolution
  0.000452: identify previous emora questions
  0.040668: sal
0.523698: dialogue infer
  0.020113: facts graph types
  0.024205: convert facts graph
    0.003125: to digraph
    0.020913: flatten types (623 concepts)
    0.000153: quantities
  0.000025: process dynamic rules
  0.473161: match
    0.473090: match
      0.004340: querygen
      0.242754: creating graph tensor (1552 nodes, 5752 edges)
        0.032923: setup
        0.169155: key tensor
        0.007921: target tensor
        0.030850: edge tensor
      0.000090: initializing solutions matrix
      0.225680: loop
      0.000015: postprocessing (MAX MEMORY: 1.493GB)
  0.003904: postprocess solutions
0.047445: apply inferences
  0.005369: apply
  0.000543: update types
  0.000184: operate
  0.041329: sal
0.016006: reference id 2
0.247360: reference infer 2
  0.020334: facts graph types
  0.022663: convert facts graph
    0.002713: to digraph
    0.019778: flatten types (623 concepts)
    0.000153: quantities
  0.007043: process dynamic rules
  0.195129: match
    0.195057: match
      0.006569: querygen
      0.157533: creating graph tensor (1445 nodes, 5231 edges)
        0.030918: setup
        0.087803: key tensor
        0.007134: target tensor
        0.029972: edge tensor
      0.000087: initializing solutions matrix
      0.030643: loop
      0.000028: postprocessing (MAX MEMORY: 1.244GB)
  0.000210: postprocess solutions
0.000230: reference resolution 2
0.041189: fragment resolution 2
  0.000469: identify previous emora questions
  0.040704: sal
0.709699: dialogue infer 2
  0.019994: facts graph types
  0.024251: convert facts graph
    0.003182: to digraph
    0.020903: flatten types (623 concepts)
    0.000152: quantities
  0.000024: process dynamic rules
  0.659179: match
    0.659110: match
      0.004242: querygen
      0.429236: creating graph tensor (1552 nodes, 5752 edges)
        0.033114: setup
        0.169652: key tensor
        0.193687: target tensor
        0.030891: edge tensor
      0.000089: initializing solutions matrix
      0.225314: loop
      0.000015: postprocessing (MAX MEMORY: 1.493GB)
  0.003876: postprocess solutions
0.047226: apply inferences 2
  0.005620: apply
  0.000540: update types
  0.000187: operate
  0.040859: sal
0.008000: prepare template nlg
0.401233: template infer
  0.020346: facts graph types
  0.024643: convert facts graph
    0.002896: to digraph
    0.021577: flatten types (623 concepts)
    0.000155: quantities
  0.000025: process dynamic rules
  0.351038: match
    0.350967: match
      0.004114: querygen
      0.165559: creating graph tensor (1552 nodes, 5752 edges)
        0.034050: setup
        0.084794: key tensor
        0.007673: target tensor
        0.037199: edge tensor
      0.000091: initializing solutions matrix
      0.180925: loop
      0.000016: postprocessing (MAX MEMORY: 1.493GB)
  0.002790: postprocess solutions
0.001412: template fillers
0.000016: response sel
0.000117: response exp
0.000013: response rules
0.088427: response assembler
  0.000015: response assembly
  0.041292: update sal
  0.001606: decay sal
  0.045498: prune
    0.000011: setup
    0.000658: select keep
    0.000111: delete old spans
    0.035949: setup essentials
    0.007062: identify essentials
    0.001377: remove not keep

[2.63 s] Gotcha . Do you have a favorite streaming service? Believe it or not, I don't have a favorite. I think they all have such great offerings!

User: i like disney plus
i like disney plus
ARG REQUESTS: [('emora', 'request', 'wm2717', 'wm2718')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm3160', 'wm3152', 'disney_plus', 'user', 'now', 'wm3151', 'prp'}
FRAGMENT REQUEST MERGES: [('disney_plus', 'wm2717')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Disney Plus is great for watching classic movies. I’ve also loved watching Disney Channel shows from when I was younger. It’s always fun to take a trip down memory lane! (s: 0.40, pr: 1.00)
	Disney Plus is great for watching classic movies. I’ve also loved watching Disney Channel shows from when I was younger. It’s always fun to take a trip down memory lane! (s: 0.38, pr: 1.00)


Present Options:
	Have you ever tried making your own movie? I once made one in class for school. (s: 0.26, pr: 0.10)


0.000074: next turn
0.000018: sentence caser
0.110128: elit
0.390702: parse2logic
  0.001426: facts graph types
  0.002438: convert facts graph
    0.000523: to digraph
    0.001866: flatten types (93 concepts)
    0.000035: quantities
  0.000021: process dynamic rules
  0.378080: match
    0.378002: match
      0.000283: querygen
      0.039848: creating graph tensor (119 nodes, 389 edges)
        0.002127: setup
        0.029939: key tensor
        0.001053: target tensor
        0.006602: edge tensor
      0.000078: initializing solutions matrix
      0.337428: loop
      0.000019: postprocessing (MAX MEMORY: 0.008GB)
  0.002038: postprocess solutions
0.000136: multiword mentions
0.000013: ner mentions
0.002665: mention bridge
0.006903: merge bridge
0.027152: knowledge pull
0.016153: reference id
0.301266: reference infer
  0.020464: facts graph types
  0.023439: convert facts graph
    0.003036: to digraph
    0.020227: flatten types (627 concepts)
    0.000156: quantities
  0.007159: process dynamic rules
  0.247954: match
    0.247881: match
      0.006796: querygen
      0.188001: creating graph tensor (1457 nodes, 5275 edges)
        0.031850: setup
        0.115462: key tensor
        0.007264: target tensor
        0.031686: edge tensor
      0.000089: initializing solutions matrix
      0.052750: loop
      0.000029: postprocessing (MAX MEMORY: 1.264GB)
  0.000210: postprocess solutions
0.000241: reference resolution
0.063326: fragment resolution
  0.000478: identify previous emora questions
  0.021940: find answer
  0.040890: sal
0.404974: dialogue infer
  0.019961: facts graph types
  0.024350: convert facts graph
    0.003198: to digraph
    0.020986: flatten types (625 concepts)
    0.000152: quantities
  0.000025: process dynamic rules
  0.354287: match
    0.354216: match
      0.004377: querygen
      0.185061: creating graph tensor (1560 nodes, 5782 edges)
        0.033005: setup
        0.109221: key tensor
        0.007824: target tensor
        0.033148: edge tensor
      0.000090: initializing solutions matrix
      0.164474: loop
      0.000015: postprocessing (MAX MEMORY: 1.509GB)
  0.004111: postprocess solutions
0.049860: apply inferences
  0.007093: apply
  0.000561: update types
  0.000187: operate
  0.041998: sal
0.017263: reference id 2
0.303520: reference infer 2
  0.020850: facts graph types
  0.023131: convert facts graph
    0.002815: to digraph
    0.020141: flatten types (635 concepts)
    0.000154: quantities
  0.008141: process dynamic rules
  0.249078: match
    0.249003: match
      0.007565: querygen
      0.202460: creating graph tensor (1473 nodes, 5331 edges)
        0.030618: setup
        0.133734: key tensor
        0.007413: target tensor
        0.028853: edge tensor
      0.000088: initializing solutions matrix
      0.038659: loop
      0.000030: postprocessing (MAX MEMORY: 1.291GB)
  0.000214: postprocess solutions
0.000249: reference resolution 2
0.042345: fragment resolution 2
  0.000473: identify previous emora questions
  0.041855: sal
0.573875: dialogue infer 2
  0.020876: facts graph types
  0.025063: convert facts graph
    0.003042: to digraph
    0.021850: flatten types (635 concepts)
    0.000156: quantities
  0.000026: process dynamic rules
  0.521442: match
    0.521371: match
      0.003860: querygen
      0.346464: creating graph tensor (1590 nodes, 5896 edges)
        0.217017: setup
        0.082362: key tensor
        0.007978: target tensor
        0.037148: edge tensor
      0.000089: initializing solutions matrix
      0.170743: loop
      0.000015: postprocessing (MAX MEMORY: 1.568GB)
  0.004018: postprocess solutions
0.048621: apply inferences 2
  0.005740: apply
  0.000546: update types
  0.000188: operate
  0.042128: sal
0.008056: prepare template nlg
0.395290: template infer
  0.020868: facts graph types
  0.024590: convert facts graph
    0.002936: to digraph
    0.021481: flatten types (635 concepts)
    0.000159: quantities
  0.000026: process dynamic rules
  0.344443: match
    0.344371: match
      0.004585: querygen
      0.138019: creating graph tensor (1590 nodes, 5896 edges)
        0.034257: setup
        0.053446: key tensor
        0.007641: target tensor
        0.040785: edge tensor
      0.000090: initializing solutions matrix
      0.201389: loop
      0.000017: postprocessing (MAX MEMORY: 1.568GB)
  0.002923: postprocess solutions
0.001343: template fillers
0.000018: response sel
0.000131: response exp
0.000013: response rules
0.090693: response assembler
  0.000015: response assembly
  0.041922: update sal
  0.001689: decay sal
  0.047052: prune
    0.000011: setup
    0.000654: select keep
    0.000108: delete old spans
    0.037329: setup essentials
    0.007349: identify essentials
    0.001278: remove not keep

[2.86 s] Disney Plus is great for watching classic movies. I've also loved watching Disney Channel shows from when I was younger. It's always fun to take a trip down memory lane!

User: no disney tv shoes are dumb
no disney tv shoes are dumb
ARG REQUESTS: [('emora', 'request', 'wm3185', 'wm3187')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm3204', 'wm3223', 'wm3219', 'wm3212', 'unknown_noun', 'wm3213', 'wm3220', 'wm3199', 'wm3209', 'wm3214', 'wm3208', 'wm3200', 'wm3207', 'user', 'now', 'predicate', 'wm3218'}
FRAGMENT REQUEST MERGES: [('wm3212', 'wm3185')]
[WARNING] Mismatched confidence between wm3185 and wm3212 on merge!
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Have you ever tried making your own movie? I once made one in class for school. (s: 0.27, pr: 0.10)
	Do you have a favorite movie or tv genre? (s: 0.17, pr: 0.50)


0.000076: next turn
0.000019: sentence caser
0.111150: elit
0.200868: parse2logic
  0.002128: facts graph types
  0.003484: convert facts graph
    0.000705: to digraph
    0.002722: flatten types (131 concepts)
    0.000044: quantities
  0.000021: process dynamic rules
  0.184068: match
    0.183987: match
      0.000417: querygen
      0.036561: creating graph tensor (169 nodes, 569 edges)
        0.003769: setup
        0.021989: key tensor
        0.001003: target tensor
        0.009637: edge tensor
      0.000081: initializing solutions matrix
      0.146658: loop
      0.000016: postprocessing (MAX MEMORY: 0.016GB)
  0.002215: postprocess solutions
0.000051: multiword mentions
0.000013: ner mentions
0.004448: mention bridge
0.006715: merge bridge
0.030145: knowledge pull
0.017708: reference id
0.257652: reference infer
  0.023417: facts graph types
  0.024785: convert facts graph
    0.003191: to digraph
    0.021410: flatten types (679 concepts)
    0.000164: quantities
  0.008720: process dynamic rules
  0.198310: match
    0.198234: match
      0.007764: querygen
      0.162302: creating graph tensor (1596 nodes, 5782 edges)
        0.034809: setup
        0.087565: key tensor
        0.007704: target tensor
        0.030298: edge tensor
      0.000090: initializing solutions matrix
      0.027860: loop
      0.000029: postprocessing (MAX MEMORY: 1.518GB)
  0.000235: postprocess solutions
0.000235: reference resolution
0.069181: fragment resolution
  0.000494: identify previous emora questions
  0.024692: find answer
  0.043976: sal
0.931218: dialogue infer
  0.022365: facts graph types
  0.026605: convert facts graph
    0.003198: to digraph
    0.023228: flatten types (677 concepts)
    0.000166: quantities
  0.000025: process dynamic rules
  0.875522: match
    0.875448: match
      0.004888: querygen
      0.499194: creating graph tensor (1709 nodes, 6337 edges)
        0.037174: setup
        0.411021: key tensor
        0.008486: target tensor
        0.040240: edge tensor
      0.000092: initializing solutions matrix
      0.371053: loop
      0.000015: postprocessing (MAX MEMORY: 1.811GB)
  0.004089: postprocess solutions
0.054508: apply inferences
  0.007124: apply
  0.001151: update types
  0.000239: operate
  0.045974: sal
0.017330: reference id 2
0.291966: reference infer 2
  0.023586: facts graph types
  0.025680: convert facts graph
    0.003088: to digraph
    0.022402: flatten types (697 concepts)
    0.000170: quantities
  0.007606: process dynamic rules
  0.232577: match
    0.232502: match
      0.008014: querygen
      0.196427: creating graph tensor (1654 nodes, 6011 edges)
        0.035253: setup
        0.108298: key tensor
        0.007842: target tensor
        0.043006: edge tensor
      0.000089: initializing solutions matrix
      0.027749: loop
      0.000029: postprocessing (MAX MEMORY: 1.639GB)
  0.000209: postprocess solutions
0.000235: reference resolution 2
0.045616: fragment resolution 2
  0.000490: identify previous emora questions
  0.045110: sal
0.629234: dialogue infer 2
  0.023740: facts graph types
  0.208745: convert facts graph
    0.003249: to digraph
    0.205296: flatten types (697 concepts)
    0.000184: quantities
  0.000028: process dynamic rules
  0.389704: match
    0.389625: match
      0.005802: querygen
      0.213488: creating graph tensor (1766 nodes, 6554 edges)
        0.038518: setup
        0.126254: key tensor
        0.008553: target tensor
        0.037972: edge tensor
      0.000090: initializing solutions matrix
      0.170025: loop
      0.000015: postprocessing (MAX MEMORY: 1.937GB)
  0.004253: postprocess solutions
0.053225: apply inferences 2
  0.006661: apply
  0.000598: update types
  0.000240: operate
  0.045707: sal
0.008723: prepare template nlg
1.087684: template infer
  0.023724: facts graph types
  0.027622: convert facts graph
    0.003249: to digraph
    0.024189: flatten types (699 concepts)
    0.000169: quantities
  0.000024: process dynamic rules
  1.030330: match
    1.030257: match
      0.004563: querygen
      0.538096: creating graph tensor (1774 nodes, 6585 edges)
        0.038836: setup
        0.441606: key tensor
        0.008965: target tensor
        0.046374: edge tensor
      0.000090: initializing solutions matrix
      0.487104: loop
      0.000021: postprocessing (MAX MEMORY: 1.955GB)
  0.003206: postprocess solutions
0.001370: template fillers
0.000015: response sel
0.000179: response exp
0.000014: response rules
0.104825: response assembler
  0.000015: response assembly
  0.045701: update sal
  0.001815: decay sal
  0.057277: prune
    0.000016: setup
    0.000751: select keep
    0.000094: delete old spans
    0.043277: setup essentials
    0.006921: identify essentials
    0.005662: remove not keep

[3.93 s] Yeah . Do you have a favorite movie or tv genre?

User: yes
yes
ARG REQUESTS: [('emora', 'request', 'wm3274', 'wm3276')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm3291', 'wm3292', 'user', 'wm3290', 'predicate'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: [('emora', 'request', 'wm3274', 'wm3276')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm3291', 'wm3292', 'user', 'wm3290', 'predicate'}
FRAGMENT REQUEST MERGES: []

Present Options:
	Have you ever tried making your own movie? I once made one in class for school. (s: 0.21, pr: 0.10)


0.000074: next turn
0.000017: sentence caser
0.109972: elit
0.050069: parse2logic
  0.000358: facts graph types
  0.000875: convert facts graph
    0.000384: to digraph
    0.000459: flatten types (26 concepts)
    0.000019: quantities
  0.000020: process dynamic rules
  0.046211: match
    0.046129: match
      0.000089: querygen
      0.011446: creating graph tensor (30 nodes, 82 edges)
        0.000512: setup
        0.002846: key tensor
        0.000378: target tensor
        0.007662: edge tensor
      0.000071: initializing solutions matrix
      0.034307: loop
      0.000014: postprocessing (MAX MEMORY: 0.001GB)
  0.000457: postprocess solutions
0.000034: multiword mentions
0.000011: ner mentions
0.001612: mention bridge
0.004140: merge bridge
0.026062: knowledge pull
0.012237: reference id
0.233587: reference infer
  0.018032: facts graph types
  0.022844: convert facts graph
    0.002892: to digraph
    0.019789: flatten types (577 concepts)
    0.000144: quantities
  0.004761: process dynamic rules
  0.185912: match
    0.185838: match
      0.005977: querygen
      0.151527: creating graph tensor (1436 nodes, 5278 edges)
        0.031550: setup
        0.081715: key tensor
        0.007383: target tensor
        0.029207: edge tensor
      0.000088: initializing solutions matrix
      0.028027: loop
      0.000027: postprocessing (MAX MEMORY: 1.260GB)
  0.000125: postprocess solutions
0.000179: reference resolution
0.057351: fragment resolution
  0.000493: identify previous emora questions
  0.018819: find answer
  0.038021: sal
0.382749: dialogue infer
  0.017839: facts graph types
  0.023327: convert facts graph
    0.002799: to digraph
    0.020370: flatten types (577 concepts)
    0.000144: quantities
  0.000026: process dynamic rules
  0.335024: match
    0.334953: match
      0.003858: querygen
      0.163127: creating graph tensor (1505 nodes, 5609 edges)
        0.033409: setup
        0.089775: key tensor
        0.007477: target tensor
        0.030746: edge tensor
      0.000088: initializing solutions matrix
      0.167666: loop
      0.000015: postprocessing (MAX MEMORY: 1.417GB)
  0.004228: postprocess solutions
0.045155: apply inferences
  0.005972: apply
  0.000543: update types
  0.000220: operate
  0.038401: sal
0.012000: reference id 2
0.230652: reference infer 2
  0.018077: facts graph types
  0.021984: convert facts graph
    0.002967: to digraph
    0.018853: flatten types (577 concepts)
    0.000145: quantities
  0.004752: process dynamic rules
  0.183741: match
    0.183666: match
      0.006212: querygen
      0.149106: creating graph tensor (1436 nodes, 5278 edges)
        0.030072: setup
        0.081047: key tensor
        0.007166: target tensor
        0.029188: edge tensor
      0.000090: initializing solutions matrix
      0.028038: loop
      0.000026: postprocessing (MAX MEMORY: 1.260GB)
  0.000137: postprocess solutions
0.000177: reference resolution 2
0.057191: fragment resolution 2
  0.000487: identify previous emora questions
  0.018562: find answer
  0.038124: sal
0.553974: dialogue infer 2
  0.017818: facts graph types
  0.200558: convert facts graph
    0.179310: to digraph
    0.021085: flatten types (577 concepts)
    0.000147: quantities
  0.000028: process dynamic rules
  0.328964: match
    0.328882: match
      0.004610: querygen
      0.162841: creating graph tensor (1505 nodes, 5609 edges)
        0.032614: setup
        0.090173: key tensor
        0.007655: target tensor
        0.030661: edge tensor
      0.000105: initializing solutions matrix
      0.161114: loop
      0.000015: postprocessing (MAX MEMORY: 1.417GB)
  0.004231: postprocess solutions
0.045376: apply inferences 2
  0.006063: apply
  0.000546: update types
  0.000238: operate
  0.038509: sal
0.007816: prepare template nlg
0.413759: template infer
  0.018047: facts graph types
  0.023744: convert facts graph
    0.002835: to digraph
    0.020751: flatten types (577 concepts)
    0.000144: quantities
  0.000025: process dynamic rules
  0.366331: match
    0.366255: match
      0.004162: querygen
      0.145878: creating graph tensor (1505 nodes, 5609 edges)
        0.033394: setup
        0.071764: key tensor
        0.007782: target tensor
        0.030968: edge tensor
      0.000093: initializing solutions matrix
      0.215821: loop
      0.000017: postprocessing (MAX MEMORY: 1.417GB)
  0.003191: postprocess solutions
0.001312: template fillers
0.000016: response sel
0.000170: response exp
0.000015: response rules
0.082147: response assembler
  0.000015: response assembly
  0.038595: update sal
  0.001542: decay sal
  0.041981: prune
    0.000017: setup
    0.000610: select keep
    0.000084: delete old spans
    0.033201: setup essentials
    0.006714: identify essentials
    0.000826: remove not keep

[2.33 s] I see . Have you ever tried making your own movie? I once made one in class for school.

User: yes
yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm2711', 'wm2712')]
CURRENT USER CONCEPTS: {'wm3312', 'wm3311', 'wm3313', 'user', 'predicate'}
FRAGMENT REQUEST MERGES: [('wm3311', 'wm2711')]
ARG REQUESTS: []
TRUTH REQUESTS: []

0.000090: next turn
0.000018: sentence caser
0.108795: elit
0.046290: parse2logic
  0.000353: facts graph types
  0.000807: convert facts graph
    0.000170: to digraph
    0.000603: flatten types (26 concepts)
    0.000021: quantities
  0.000021: process dynamic rules
  0.042543: match
    0.042463: match
      0.000092: querygen
      0.006795: creating graph tensor (30 nodes, 82 edges)
        0.000512: setup
        0.002844: key tensor
        0.000381: target tensor
        0.003004: edge tensor
      0.000074: initializing solutions matrix
      0.035292: loop
      0.000013: postprocessing (MAX MEMORY: 0.001GB)
  0.000459: postprocess solutions
0.000032: multiword mentions
0.000012: ner mentions
0.001565: mention bridge
0.004072: merge bridge
0.026131: knowledge pull
0.012181: reference id
0.278421: reference infer
  0.018173: facts graph types
  0.023287: convert facts graph
    0.002946: to digraph
    0.020179: flatten types (578 concepts)
    0.000143: quantities
  0.004738: process dynamic rules
  0.230145: match
    0.230075: match
      0.006120: querygen
      0.187486: creating graph tensor (1449 nodes, 5328 edges)
        0.031424: setup
        0.116261: key tensor
        0.007339: target tensor
        0.030766: edge tensor
      0.000090: initializing solutions matrix
      0.036158: loop
      0.000027: postprocessing (MAX MEMORY: 1.284GB)
  0.000126: postprocess solutions
0.000180: reference resolution
0.040192: fragment resolution
  0.000501: identify previous emora questions
  0.001820: find answer
  0.037854: sal
0.524528: dialogue infer
  0.017860: facts graph types
  0.022970: convert facts graph
    0.002938: to digraph
    0.019878: flatten types (574 concepts)
    0.000140: quantities
  0.000025: process dynamic rules
  0.477187: match
    0.477119: match
      0.004197: querygen
      0.273054: creating graph tensor (1502 nodes, 5601 edges)
        0.032037: setup
        0.199833: key tensor
        0.007796: target tensor
        0.031543: edge tensor
      0.000091: initializing solutions matrix
      0.199557: loop
      0.000015: postprocessing (MAX MEMORY: 1.413GB)
  0.004266: postprocess solutions
0.045722: apply inferences
  0.006535: apply
  0.000542: update types
  0.000220: operate
  0.038406: sal
0.012045: reference id 2
0.228347: reference infer 2
  0.018142: facts graph types
  0.021786: convert facts graph
    0.002778: to digraph
    0.018847: flatten types (575 concepts)
    0.000141: quantities
  0.004776: process dynamic rules
  0.181595: match
    0.181522: match
      0.006296: querygen
      0.149164: creating graph tensor (1437 nodes, 5286 edges)
        0.030247: setup
        0.076963: key tensor
        0.007069: target tensor
        0.033252: edge tensor
      0.000088: initializing solutions matrix
      0.025759: loop
      0.000028: postprocessing (MAX MEMORY: 1.264GB)
  0.000126: postprocess solutions
0.000178: reference resolution 2
0.214547: fragment resolution 2
  0.000484: identify previous emora questions
  0.214046: sal
0.476701: dialogue infer 2
  0.018069: facts graph types
  0.024163: convert facts graph
    0.002887: to digraph
    0.021116: flatten types (575 concepts)
    0.000146: quantities
  0.000027: process dynamic rules
  0.427619: match
    0.427541: match
      0.004097: querygen
      0.213761: creating graph tensor (1506 nodes, 5617 edges)
        0.032674: setup
        0.139644: key tensor
        0.007945: target tensor
        0.031550: edge tensor
      0.000092: initializing solutions matrix
      0.209375: loop
      0.000015: postprocessing (MAX MEMORY: 1.421GB)
  0.004289: postprocess solutions
0.045753: apply inferences 2
  0.006334: apply
  0.000550: update types
  0.000217: operate
  0.038633: sal
0.007776: prepare template nlg
0.428651: template infer
  0.018017: facts graph types
  0.023569: convert facts graph
    0.002777: to digraph
    0.020624: flatten types (575 concepts)
    0.000153: quantities
  0.000024: process dynamic rules
  0.381696: match
    0.381624: match
      0.004037: querygen
      0.135423: creating graph tensor (1506 nodes, 5617 edges)
        0.033287: setup
        0.062649: key tensor
        0.007218: target tensor
        0.030552: edge tensor
      0.000089: initializing solutions matrix
      0.241768: loop
      0.000017: postprocessing (MAX MEMORY: 1.421GB)
  0.003135: postprocess solutions
0.001214: template fillers
0.000016: response sel
0.000313: response exp
0.000014: response rules
0.082009: response assembler
  0.000015: response assembly
  0.038596: update sal
  0.001528: decay sal
  0.041856: prune
    0.000015: setup
    0.000610: select keep
    0.000085: delete old spans
    0.033289: setup essentials
    0.006008: identify essentials
    0.001330: remove not keep

[2.59 s] Oh, I was meaning to ask, do you have a phone ?

User: yes i have a samsung
yes i have a samsung
ARG REQUESTS: [('emora', 'request', 'wm3332', 'wm3333')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm3349', 'wm3354', 'wm3348', 'wm3340', 'wm3353', 'wm3352', 'unknown_noun', 'wm3342', 'wm3339', 'user', 'now', 'wm3347', 'predicate', 'prp', 'wm3359'}
FRAGMENT REQUEST MERGES: [('wm3339', 'wm3332')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	To be honest, I've never had a Phone . I'm thinking I might get one, do you think it is worth it ? (s: 0.44, pr: 0.10)


0.000083: next turn
0.000019: sentence caser
0.114349: elit
0.281476: parse2logic
  0.001673: facts graph types
  0.002771: convert facts graph
    0.000602: to digraph
    0.002117: flatten types (107 concepts)
    0.000039: quantities
  0.000021: process dynamic rules
  0.266888: match
    0.266808: match
      0.000320: querygen
      0.026431: creating graph tensor (135 nodes, 445 edges)
        0.002499: setup
        0.010539: key tensor
        0.000870: target tensor
        0.012375: edge tensor
      0.000079: initializing solutions matrix
      0.239651: loop
      0.000018: postprocessing (MAX MEMORY: 0.010GB)
  0.002707: postprocess solutions
0.000042: multiword mentions
0.000012: ner mentions
0.003675: mention bridge
0.006521: merge bridge
0.027926: knowledge pull
0.011066: reference id
0.300309: reference infer
  0.019358: facts graph types
  0.024445: convert facts graph
    0.003036: to digraph
    0.021239: flatten types (605 concepts)
    0.000152: quantities
  0.003550: process dynamic rules
  0.250678: match
    0.250603: match
      0.005971: querygen
      0.218828: creating graph tensor (1526 nodes, 5617 edges)
        0.033778: setup
        0.145322: key tensor
        0.007633: target tensor
        0.030266: edge tensor
      0.000088: initializing solutions matrix
      0.025498: loop
      0.000026: postprocessing (MAX MEMORY: 1.426GB)
  0.000131: postprocess solutions
0.000184: reference resolution
0.061443: fragment resolution
  0.000479: identify previous emora questions
  0.021574: find answer
  0.039371: sal
0.453237: dialogue infer
  0.019319: facts graph types
  0.024061: convert facts graph
    0.002903: to digraph
    0.020992: flatten types (603 concepts)
    0.000152: quantities
  0.000026: process dynamic rules
  0.402930: match
    0.402858: match
      0.004602: querygen
      0.213884: creating graph tensor (1581 nodes, 5887 edges)
        0.034919: setup
        0.135619: key tensor
        0.007791: target tensor
        0.033628: edge tensor
      0.000090: initializing solutions matrix
      0.184060: loop
      0.000015: postprocessing (MAX MEMORY: 1.562GB)
  0.004558: postprocess solutions
0.050145: apply inferences
  0.008023: apply
  0.000807: update types
  0.000292: operate
  0.041003: sal
0.013851: reference id 2
0.476461: reference infer 2
  0.020179: facts graph types
  0.023772: convert facts graph
    0.003007: to digraph
    0.020593: flatten types (619 concepts)
    0.000152: quantities
  0.004829: process dynamic rules
  0.425270: match
    0.425194: match
      0.006109: querygen
      0.398342: creating graph tensor (1563 nodes, 5746 edges)
        0.215153: setup
        0.140541: key tensor
        0.007869: target tensor
        0.032801: edge tensor
      0.000088: initializing solutions matrix
      0.020436: loop
      0.000028: postprocessing (MAX MEMORY: 1.493GB)
  0.000135: postprocess solutions
0.000190: reference resolution 2
0.041226: fragment resolution 2
  0.000493: identify previous emora questions
  0.040718: sal
0.424417: dialogue infer 2
  0.019919: facts graph types
  0.025323: convert facts graph
    0.002983: to digraph
    0.022157: flatten types (619 concepts)
    0.000169: quantities
  0.000026: process dynamic rules
  0.372005: match
    0.371933: match
      0.004141: querygen
      0.166612: creating graph tensor (1633 nodes, 6078 edges)
        0.035863: setup
        0.085917: key tensor
        0.008160: target tensor
        0.034737: edge tensor
      0.000088: initializing solutions matrix
      0.200843: loop
      0.000018: postprocessing (MAX MEMORY: 1.664GB)
  0.004718: postprocess solutions
0.048648: apply inferences 2
  0.006447: apply
  0.000560: update types
  0.000227: operate
  0.041396: sal
0.008173: prepare template nlg
0.491075: template infer
  0.020184: facts graph types
  0.025103: convert facts graph
    0.002874: to digraph
    0.022061: flatten types (619 concepts)
    0.000152: quantities
  0.000025: process dynamic rules
  0.440691: match
    0.440618: match
      0.004194: querygen
      0.224577: creating graph tensor (1633 nodes, 6078 edges)
        0.036282: setup
        0.144405: key tensor
        0.008300: target tensor
        0.033584: edge tensor
      0.000088: initializing solutions matrix
      0.211468: loop
      0.000017: postprocessing (MAX MEMORY: 1.664GB)
  0.002576: postprocess solutions
0.002004: template fillers
0.000015: response sel
0.000156: response exp
0.000015: response rules
0.088505: response assembler
  0.000015: response assembly
  0.040853: update sal
  0.001628: decay sal
  0.045993: prune
    0.000017: setup
    0.000644: select keep
    0.000075: delete old spans
    0.036714: setup essentials
    0.006078: identify essentials
    0.001949: remove not keep

[2.91 s] To be honest, I've never had a Phone . I'm thinking I might get one, do you think it is worth it ?

User: yes phones are the bomb
yes phones are the bomb
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm3396', 'wm3397')]
CURRENT USER CONCEPTS: {'wm3414', 'phone', 'wm3416', 'wm3426', 'wm3431', 'wm3413', 'unknown_noun', 'wm3421', 'wm3428', 'wm3432', 'wm3422', 'now', 'user', 'predicate', 'wm3427', 'wm3420'}
FRAGMENT REQUEST MERGES: [('wm3426', 'wm3396')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	You know what ? I'm gonna get a Phone . If I don't like it, its on you, haha . (s: 0.44, pr: 0.10)


0.000073: next turn
0.000017: sentence caser
0.110402: elit
0.249049: parse2logic
  0.001674: facts graph types
  0.002950: convert facts graph
    0.000747: to digraph
    0.002150: flatten types (110 concepts)
    0.000040: quantities
  0.000021: process dynamic rules
  0.233542: match
    0.233459: match
      0.000314: querygen
      0.022452: creating graph tensor (135 nodes, 442 edges)
        0.002487: setup
        0.012315: key tensor
        0.000873: target tensor
        0.006639: edge tensor
      0.000080: initializing solutions matrix
      0.210416: loop
      0.000013: postprocessing (MAX MEMORY: 0.010GB)
  0.003216: postprocess solutions
0.000051: multiword mentions
0.000012: ner mentions
0.003957: mention bridge
0.006115: merge bridge
0.027834: knowledge pull
0.013239: reference id
0.289612: reference infer
  0.020666: facts graph types
  0.025180: convert facts graph
    0.003676: to digraph
    0.021329: flatten types (627 concepts)
    0.000156: quantities
  0.004445: process dynamic rules
  0.236986: match
    0.236910: match
      0.005975: querygen
      0.213360: creating graph tensor (1582 nodes, 5820 edges)
        0.034387: setup
        0.136151: key tensor
        0.007836: target tensor
        0.033039: edge tensor
      0.000088: initializing solutions matrix
      0.017274: loop
      0.000027: postprocessing (MAX MEMORY: 1.531GB)
  0.000125: postprocess solutions
0.000180: reference resolution
0.043151: fragment resolution
  0.000496: identify previous emora questions
  0.001895: find answer
  0.040742: sal
0.366091: dialogue infer
  0.020174: facts graph types
  0.025366: convert facts graph
    0.003029: to digraph
    0.022168: flatten types (623 concepts)
    0.000153: quantities
  0.000025: process dynamic rules
  0.313555: match
    0.313485: match
      0.004059: querygen
      0.159414: creating graph tensor (1631 nodes, 6072 edges)
        0.036274: setup
        0.073348: key tensor
        0.008005: target tensor
        0.039832: edge tensor
      0.000087: initializing solutions matrix
      0.149703: loop
      0.000016: postprocessing (MAX MEMORY: 1.661GB)
  0.004590: postprocess solutions
0.049298: apply inferences
  0.006644: apply
  0.000709: update types
  0.000225: operate
  0.041700: sal
0.011717: reference id 2
0.501226: reference infer 2
  0.021059: facts graph types
  0.201473: convert facts graph
    0.002849: to digraph
    0.198440: flatten types (626 concepts)
    0.000164: quantities
  0.003653: process dynamic rules
  0.272627: match
    0.272542: match
      0.006786: querygen
      0.239412: creating graph tensor (1574 nodes, 5795 edges)
        0.033969: setup
        0.162137: key tensor
        0.008044: target tensor
        0.033301: edge tensor
      0.000090: initializing solutions matrix
      0.026017: loop
      0.000027: postprocessing (MAX MEMORY: 1.518GB)
  0.000129: postprocess solutions
0.000185: reference resolution 2
0.041606: fragment resolution 2
  0.000491: identify previous emora questions
  0.041098: sal
0.511749: dialogue infer 2
  0.020454: facts graph types
  0.024951: convert facts graph
    0.003111: to digraph
    0.021673: flatten types (626 concepts)
    0.000153: quantities
  0.000026: process dynamic rules
  0.459210: match
    0.459140: match
      0.004621: querygen
      0.275758: creating graph tensor (1637 nodes, 6094 edges)
        0.035389: setup
        0.181788: key tensor
        0.008383: target tensor
        0.048124: edge tensor
      0.000089: initializing solutions matrix
      0.178437: loop
      0.000016: postprocessing (MAX MEMORY: 1.673GB)
  0.004612: postprocess solutions
0.048880: apply inferences 2
  0.006337: apply
  0.000575: update types
  0.000235: operate
  0.041714: sal
0.008272: prepare template nlg
0.533651: template infer
  0.020448: facts graph types
  0.025363: convert facts graph
    0.002913: to digraph
    0.022278: flatten types (626 concepts)
    0.000155: quantities
  0.000026: process dynamic rules
  0.483052: match
    0.482977: match
      0.004194: querygen
      0.236277: creating graph tensor (1637 nodes, 6094 edges)
        0.036590: setup
        0.154787: key tensor
        0.008313: target tensor
        0.034527: edge tensor
      0.000090: initializing solutions matrix
      0.242109: loop
      0.000017: postprocessing (MAX MEMORY: 1.673GB)
  0.002184: postprocess solutions
0.001901: template fillers
0.000029: response sel
0.000095: response exp
0.000013: response rules
0.090400: response assembler
  0.000015: response assembly
  0.041187: update sal
  0.001670: decay sal
  0.047512: prune
    0.000018: setup
    0.000650: select keep
    0.000073: delete old spans
    0.036796: setup essentials
    0.006198: identify essentials
    0.003238: remove not keep

[2.91 s] You know what ? I'm gonna get a Phone . If I don't like it, its on you, haha .

User: you will like it you big baby
you will like it you big baby
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	You know, I am a virtual chatbot, so in a way Phone and I are related . I'm like its cool older sister . (s: 0.40, pr: 0.50)


0.000076: next turn
0.000019: sentence caser
0.111777: elit
0.516405: parse2logic
  0.002290: facts graph types
  0.004036: convert facts graph
    0.001071: to digraph
    0.002902: flatten types (142 concepts)
    0.000048: quantities
  0.000021: process dynamic rules
  0.496100: match
    0.496021: match
      0.000413: querygen
      0.102018: creating graph tensor (186 nodes, 629 edges)
        0.003497: setup
        0.086608: key tensor
        0.001205: target tensor
        0.010469: edge tensor
      0.000084: initializing solutions matrix
      0.393116: loop
      0.000021: postprocessing (MAX MEMORY: 0.020GB)
  0.003116: postprocess solutions
0.000045: multiword mentions
0.000012: ner mentions
0.005740: mention bridge
0.007580: merge bridge
0.027901: knowledge pull
0.011237: reference id
0.286348: reference infer
  0.020924: facts graph types
  0.025252: convert facts graph
    0.003175: to digraph
    0.021899: flatten types (632 concepts)
    0.000160: quantities
  0.003529: process dynamic rules
  0.234268: match
    0.234193: match
      0.006035: querygen
      0.201892: creating graph tensor (1586 nodes, 5838 edges)
        0.034667: setup
        0.121318: key tensor
        0.008105: target tensor
        0.035820: edge tensor
      0.000090: initializing solutions matrix
      0.025955: loop
      0.000027: postprocessing (MAX MEMORY: 1.541GB)
  0.000126: postprocess solutions
0.000181: reference resolution
0.041945: fragment resolution
  0.000505: identify previous emora questions
  0.041423: sal
0.587377: dialogue infer
  0.020878: facts graph types
  0.025188: convert facts graph
    0.003251: to digraph
    0.021768: flatten types (632 concepts)
    0.000156: quantities
  0.000026: process dynamic rules
  0.534053: match
    0.533982: match
      0.004624: querygen
      0.355620: creating graph tensor (1649 nodes, 6137 edges)
        0.035676: setup
        0.272352: key tensor
        0.008468: target tensor
        0.036980: edge tensor
      0.000091: initializing solutions matrix
      0.173419: loop
      0.000015: postprocessing (MAX MEMORY: 1.697GB)
  0.004768: postprocess solutions
0.049617: apply inferences
  0.006377: apply
  0.000719: update types
  0.000190: operate
  0.042309: sal
0.011050: reference id 2
0.238847: reference infer 2
  0.021358: facts graph types
  0.024235: convert facts graph
    0.003053: to digraph
    0.021005: flatten types (635 concepts)
    0.000158: quantities
  0.004017: process dynamic rules
  0.186757: match
    0.186682: match
      0.006012: querygen
      0.146510: creating graph tensor (1592 nodes, 5860 edges)
        0.033967: setup
        0.070258: key tensor
        0.007723: target tensor
        0.032643: edge tensor
      0.000088: initializing solutions matrix
      0.033852: loop
      0.000026: postprocessing (MAX MEMORY: 1.552GB)
  0.000127: postprocess solutions
0.000184: reference resolution 2
0.042100: fragment resolution 2
  0.000495: identify previous emora questions
  0.041588: sal
0.395597: dialogue infer 2
  0.021098: facts graph types
  0.025938: convert facts graph
    0.003076: to digraph
    0.022693: flatten types (635 concepts)
    0.000155: quantities
  0.000026: process dynamic rules
  0.341305: match
    0.341234: match
      0.004137: querygen
      0.165343: creating graph tensor (1655 nodes, 6159 edges)
        0.036469: setup
        0.082587: key tensor
        0.008264: target tensor
        0.035980: edge tensor
      0.000091: initializing solutions matrix
      0.171433: loop
      0.000016: postprocessing (MAX MEMORY: 1.709GB)
  0.004746: postprocess solutions
0.048494: apply inferences 2
  0.006205: apply
  0.000566: update types
  0.000200: operate
  0.041503: sal
0.008151: prepare template nlg
0.862320: template infer
  0.021263: facts graph types
  0.025467: convert facts graph
    0.003217: to digraph
    0.022078: flatten types (635 concepts)
    0.000157: quantities
  0.000024: process dynamic rules
  0.810977: match
    0.810901: match
      0.004633: querygen
      0.520138: creating graph tensor (1655 nodes, 6159 edges)
        0.035802: setup
        0.440604: key tensor
        0.008303: target tensor
        0.033269: edge tensor
      0.000091: initializing solutions matrix
      0.285715: loop
      0.000018: postprocessing (MAX MEMORY: 1.709GB)
  0.002086: postprocess solutions
0.002593: template fillers
0.000023: response sel
0.000098: response exp
0.000013: response rules
0.091691: response assembler
  0.000014: response assembly
  0.042060: update sal
  0.001704: decay sal
  0.047897: prune
    0.000012: setup
    0.000653: select keep
    0.000086: delete old spans
    0.038393: setup essentials
    0.006071: identify essentials
    0.002329: remove not keep

[3.35 s] You know, I am a virtual chatbot, so in a way Phone and I are related . I'm like its cool older sister .

User: okay
okay
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

0.000073: next turn
0.000016: sentence caser
0.109603: elit
0.056564: parse2logic
  0.000351: facts graph types
  0.000807: convert facts graph
    0.000131: to digraph
    0.000643: flatten types (26 concepts)
    0.000021: quantities
  0.000021: process dynamic rules
  0.052702: match
    0.052623: match
      0.000090: querygen
      0.017604: creating graph tensor (30 nodes, 82 edges)
        0.000511: setup
        0.011790: key tensor
        0.000396: target tensor
        0.004853: edge tensor
      0.000071: initializing solutions matrix
      0.034648: loop
      0.000014: postprocessing (MAX MEMORY: 0.001GB)
  0.000463: postprocess solutions
0.000035: multiword mentions
0.000012: ner mentions
0.001571: mention bridge
0.003429: merge bridge
0.026925: knowledge pull
0.010722: reference id
0.199221: reference infer
  0.019387: facts graph types
  0.023690: convert facts graph
    0.003390: to digraph
    0.020137: flatten types (600 concepts)
    0.000146: quantities
  0.003075: process dynamic rules
  0.151006: match
    0.150936: match
      0.006174: querygen
      0.115906: creating graph tensor (1485 nodes, 5467 edges)
        0.031859: setup
        0.043108: key tensor
        0.007284: target tensor
        0.031955: edge tensor
      0.000087: initializing solutions matrix
      0.028553: loop
      0.000025: postprocessing (MAX MEMORY: 1.351GB)
  0.000143: postprocess solutions
0.000176: reference resolution
0.040118: fragment resolution
  0.000480: identify previous emora questions
  0.039622: sal
0.583221: dialogue infer
  0.019390: facts graph types
  0.024001: convert facts graph
    0.002917: to digraph
    0.020923: flatten types (600 concepts)
    0.000147: quantities
  0.000026: process dynamic rules
  0.532954: match
    0.532883: match
      0.003889: querygen
      0.345909: creating graph tensor (1540 nodes, 5732 edges)
        0.217751: setup
        0.082053: key tensor
        0.007885: target tensor
        0.036297: edge tensor
      0.000090: initializing solutions matrix
      0.182765: loop
      0.000015: postprocessing (MAX MEMORY: 1.481GB)
  0.004533: postprocess solutions
0.046583: apply inferences
  0.005856: apply
  0.000538: update types
  0.000205: operate
  0.039963: sal
0.010541: reference id 2
0.198160: reference infer 2
  0.019523: facts graph types
  0.022914: convert facts graph
    0.002913: to digraph
    0.019835: flatten types (600 concepts)
    0.000147: quantities
  0.003066: process dynamic rules
  0.150495: match
    0.150422: match
      0.006254: querygen
      0.115345: creating graph tensor (1485 nodes, 5467 edges)
        0.031487: setup
        0.043099: key tensor
        0.007243: target tensor
        0.031868: edge tensor
      0.000087: initializing solutions matrix
      0.028520: loop
      0.000026: postprocessing (MAX MEMORY: 1.351GB)
  0.000134: postprocess solutions
0.000178: reference resolution 2
0.039893: fragment resolution 2
  0.000482: identify previous emora questions
  0.039396: sal
0.394269: dialogue infer 2
  0.019426: facts graph types
  0.024339: convert facts graph
    0.002939: to digraph
    0.021238: flatten types (600 concepts)
    0.000147: quantities
  0.000026: process dynamic rules
  0.343565: match
    0.343489: match
      0.004073: querygen
      0.165559: creating graph tensor (1540 nodes, 5732 edges)
        0.034335: setup
        0.084628: key tensor
        0.008310: target tensor
        0.036278: edge tensor
      0.000090: initializing solutions matrix
      0.173509: loop
      0.000018: postprocessing (MAX MEMORY: 1.481GB)
  0.004538: postprocess solutions
0.046269: apply inferences 2
  0.005959: apply
  0.000535: update types
  0.000186: operate
  0.039568: sal
0.007775: prepare template nlg
0.322843: template infer
  0.019304: facts graph types
  0.023740: convert facts graph
    0.003093: to digraph
    0.020485: flatten types (600 concepts)
    0.000147: quantities
  0.000026: process dynamic rules
  0.275633: match
    0.275560: match
      0.004414: querygen
      0.146179: creating graph tensor (1540 nodes, 5732 edges)
        0.033310: setup
        0.071326: key tensor
        0.007824: target tensor
        0.031948: edge tensor
      0.000088: initializing solutions matrix
      0.124633: loop
      0.000015: postprocessing (MAX MEMORY: 1.481GB)
  0.001848: postprocess solutions
0.002308: template fillers
0.000015: response sel
0.000465: response exp
0.000014: response rules
0.087390: response assembler
  0.000015: response assembly
  0.040534: update sal
  0.001678: decay sal
  0.045148: prune
    0.000012: setup
    0.000804: select keep
    0.000087: delete old spans
    0.036848: setup essentials
    0.005685: identify essentials
    0.001379: remove not keep

[2.19 s] I've been thinking, the pandemic has really changed our lives hasn't it? Not just this year, I think a lot of things will never be the same for me now. Its kinda crazy how much my life has changed.

User: yes my life has changed so much
yes my life has changed so much
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm3579', 'wm3580')]
CURRENT USER CONCEPTS: {'past', 'wm3606', 'life', 'predicate', 'wm3615', 'wm3632', 'wm3622', 'wm3614', 'wm3611', 'wm3609', 'have', 'wm3598', 'wm3625', 'wm3620', 'wm3621', 'user', 'wm3616', 'wm3603', 'wm3626', 'wm3610', 'wm3630', 'unknown_other', 'wm3594', 'wm3599'}
FRAGMENT REQUEST MERGES: [('wm3614', 'wm3579')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	My job may have actually benefited from the pandemic. I had to spend a lot of time for commuting, now I can do it remotely. My office is letting me stay remote for as long as I want. Do you like the shift to remote work? (s: 0.23, pr: 0.50)
	My job may have actually benefited from the pandemic. I had to spend a lot of time for commuting, now I can do it remotely. My office is letting me stay remote for as long as I want. Do you like the shift to remote work? (s: 0.23, pr: 0.50)


0.000075: next turn
0.000018: sentence caser
0.114149: elit
0.707888: parse2logic
  0.002329: facts graph types
  0.004050: convert facts graph
    0.001071: to digraph
    0.002918: flatten types (143 concepts)
    0.000046: quantities
  0.000021: process dynamic rules
  0.688148: match
    0.688055: match
      0.000423: querygen
      0.271587: creating graph tensor (184 nodes, 617 edges)
        0.003427: setup
        0.259762: key tensor
        0.001284: target tensor
        0.006876: edge tensor
      0.000085: initializing solutions matrix
      0.415564: loop
      0.000020: postprocessing (MAX MEMORY: 0.019GB)
  0.002340: postprocess solutions
0.000053: multiword mentions
0.000012: ner mentions
0.006420: mention bridge
0.006863: merge bridge
0.030419: knowledge pull
0.010535: reference id
0.306548: reference infer
  0.023306: facts graph types
  0.027096: convert facts graph
    0.003491: to digraph
    0.023419: flatten types (680 concepts)
    0.000168: quantities
  0.002718: process dynamic rules
  0.250930: match
    0.250854: match
      0.006514: querygen
      0.206037: creating graph tensor (1694 nodes, 6241 edges)
        0.036330: setup
        0.120857: key tensor
        0.008035: target tensor
        0.038717: edge tensor
      0.000092: initializing solutions matrix
      0.037991: loop
      0.000026: postprocessing (MAX MEMORY: 1.760GB)
  0.000126: postprocess solutions
0.000182: reference resolution
0.046043: fragment resolution
  0.000508: identify previous emora questions
  0.001872: find answer
  0.043643: sal
0.735261: dialogue infer
  0.022992: facts graph types
  0.026764: convert facts graph
    0.003243: to digraph
    0.023343: flatten types (677 concepts)
    0.000165: quantities
  0.000026: process dynamic rules
  0.678035: match
    0.677963: match
      0.004798: querygen
      0.444231: creating graph tensor (1727 nodes, 6415 edges)
        0.037744: setup
        0.354532: key tensor
        0.008966: target tensor
        0.040773: edge tensor
      0.000090: initializing solutions matrix
      0.228586: loop
      0.000018: postprocessing (MAX MEMORY: 1.855GB)
  0.004878: postprocess solutions
0.060259: apply inferences
  0.010995: apply
  0.001134: update types
  0.000299: operate
  0.047811: sal
0.013659: reference id 2
0.334891: reference infer 2
  0.025867: facts graph types
  0.027838: convert facts graph
    0.003572: to digraph
    0.024071: flatten types (731 concepts)
    0.000175: quantities
  0.005770: process dynamic rules
  0.272492: match
    0.272413: match
      0.006991: querygen
      0.225954: creating graph tensor (1774 nodes, 6524 edges)
        0.038120: setup
        0.138513: key tensor
        0.008310: target tensor
        0.038922: edge tensor
      0.000089: initializing solutions matrix
      0.039151: loop
      0.000028: postprocessing (MAX MEMORY: 1.924GB)
  0.000258: postprocess solutions
0.001730: reference resolution 2
0.048625: fragment resolution 2
  0.000532: identify previous emora questions
  0.048077: sal
2.269704: dialogue infer 2
  0.025982: facts graph types
  0.029495: convert facts graph
    0.003654: to digraph
    0.025653: flatten types (729 concepts)
    0.000174: quantities
  0.000024: process dynamic rules
  2.205877: match
    2.205801: match
      0.004683: querygen
      1.664368: creating graph tensor (1879 nodes, 6982 edges)
        0.040434: setup
        1.571549: key tensor
        0.009733: target tensor
        0.040245: edge tensor
      0.000091: initializing solutions matrix
      0.536386: loop
      0.000019: postprocessing (MAX MEMORY: 2.197GB)
  0.005350: postprocess solutions
0.057424: apply inferences 2
  0.008024: apply
  0.000976: update types
  0.000311: operate
  0.048094: sal
0.009032: prepare template nlg
1.557557: template infer
  0.026438: facts graph types
  0.029267: convert facts graph
    0.003545: to digraph
    0.025531: flatten types (735 concepts)
    0.000175: quantities
  0.000024: process dynamic rules
  1.496703: match
    1.496623: match
      0.004935: querygen
      1.056946: creating graph tensor (1894 nodes, 7038 edges)
        0.041505: setup
        0.956717: key tensor
        0.009575: target tensor
        0.046656: edge tensor
      0.000094: initializing solutions matrix
      0.434439: loop
      0.000015: postprocessing (MAX MEMORY: 2.232GB)
  0.002230: postprocess solutions
0.002617: template fillers
0.000015: response sel
0.000206: response exp
0.000015: response rules
0.110719: response assembler
  0.000015: response assembly
  0.049017: update sal
  0.001945: decay sal
  0.059727: prune
    0.000016: setup
    0.000766: select keep
    0.000076: delete old spans
    0.045955: setup essentials
    0.005336: identify essentials
    0.007000: remove not keep

[6.43 s] My job may have actually benefited from the pandemic. I had to spend a lot of time for commuting, now I can do it remotely. My office is letting me stay remote for as long as I want. Do you like the shift to remote work?

User: i like working remotely because i hate people
i like working remotely because i hate people
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm3718', 'wm3726')]
CURRENT USER CONCEPTS: {'wm3791', 'person', 'wm3757', 'wm3777', 'wm3768', 'wm3767', 'wm3792', 'wm3776', 'wm3756', 'wm3781', 'wm3782', 'wm3751', 'user', 'wm3771', 'wm3787', 'prp', 'wm3783', 'wm3786', 'now', 'unknown_other'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm3718', 'wm3726')]
CURRENT USER CONCEPTS: {'wm3791', 'person', 'wm3757', 'wm3777', 'wm3768', 'wm3767', 'wm3792', 'wm3776', 'wm3756', 'wm3781', 'wm3782', 'wm3751', 'user', 'wm3771', 'wm3787', 'prp', 'wm3783', 'wm3786', 'now', 'unknown_other'}
FRAGMENT REQUEST MERGES: []

React + Present Options:
	I’m glad to hear that you are busy with Your job . are you going back to the office ? (s: 0.22, pr: 1.00)
	I've also started just going for walks a lot more. Before the pandemic, I often just wanted to get home and relax, but being stuck inside for so long made me realize that I really can't just stay at home all day without going a bit wacky. Do you like just going outside and doing stuff more now than before the pandemic ? (s: 0.27, pr: 0.50)


Present Options:
	I think having passions for one's job is important . Do you like your job ? (s: 0.70, pr: 0.10)


0.000072: next turn
0.000019: sentence caser
0.115908: elit
0.296915: parse2logic
  0.002722: facts graph types
  0.004723: convert facts graph
    0.001159: to digraph
    0.003501: flatten types (158 concepts)
    0.000049: quantities
  0.000021: process dynamic rules
  0.273363: match
    0.273282: match
      0.000512: querygen
      0.026637: creating graph tensor (225 nodes, 779 edges)
        0.004282: setup
        0.008744: key tensor
        0.001245: target tensor
        0.012136: edge tensor
      0.000082: initializing solutions matrix
      0.245743: loop
      0.000018: postprocessing (MAX MEMORY: 0.029GB)
  0.003807: postprocess solutions
0.000055: multiword mentions
0.000012: ner mentions
0.006516: mention bridge
0.014160: merge bridge
0.029071: knowledge pull
0.010392: reference id
0.446934: reference infer
  0.021679: facts graph types
  0.025234: convert facts graph
    0.003816: to digraph
    0.021239: flatten types (658 concepts)
    0.000160: quantities
  0.005000: process dynamic rules
  0.392822: match
    0.392745: match
      0.007168: querygen
      0.350794: creating graph tensor (1580 nodes, 5797 edges)
        0.033482: setup
        0.064002: key tensor
        0.201851: target tensor
        0.049460: edge tensor
      0.000092: initializing solutions matrix
      0.034459: loop
      0.000029: postprocessing (MAX MEMORY: 1.521GB)
  0.000009: postprocess solutions
0.000014: reference resolution
0.109643: fragment resolution
  0.000540: identify previous emora questions
  0.065603: find answer
  0.043480: sal
0.633545: dialogue infer
  0.021700: facts graph types
  0.026252: convert facts graph
    0.003145: to digraph
    0.022922: flatten types (658 concepts)
    0.000171: quantities
  0.000025: process dynamic rules
  0.577907: match
    0.577829: match
      0.004483: querygen
      0.219006: creating graph tensor (1674 nodes, 6218 edges)
        0.036427: setup
        0.137930: key tensor
        0.008513: target tensor
        0.034114: edge tensor
      0.000092: initializing solutions matrix
      0.353987: loop
      0.000017: postprocessing (MAX MEMORY: 1.743GB)
  0.005107: postprocess solutions
0.056631: apply inferences
  0.009113: apply
  0.001167: update types
  0.000171: operate
  0.046158: sal
0.013938: reference id 2
1.373268: reference infer 2
  0.023125: facts graph types
  0.025747: convert facts graph
    0.003030: to digraph
    0.022530: flatten types (687 concepts)
    0.000167: quantities
  0.006265: process dynamic rules
  1.315586: match
    1.315513: match
      0.007465: querygen
      1.278721: creating graph tensor (1647 nodes, 6044 edges)
        0.034792: setup
        1.199623: key tensor
        0.008642: target tensor
        0.033551: edge tensor
      0.000090: initializing solutions matrix
      0.029019: loop
      0.000031: postprocessing (MAX MEMORY: 1.653GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.116467: fragment resolution 2
  0.000562: identify previous emora questions
  0.070323: find answer
  0.045563: sal
0.473617: dialogue infer 2
  0.023127: facts graph types
  0.027478: convert facts graph
    0.003253: to digraph
    0.024045: flatten types (687 concepts)
    0.000165: quantities
  0.000027: process dynamic rules
  0.414798: match
    0.414720: match
      0.005102: querygen
      0.182832: creating graph tensor (1777 nodes, 6612 edges)
        0.038496: setup
        0.093346: key tensor
        0.008627: target tensor
        0.040200: edge tensor
      0.000090: initializing solutions matrix
      0.226441: loop
      0.000017: postprocessing (MAX MEMORY: 1.970GB)
  0.005493: postprocess solutions
0.056324: apply inferences 2
  0.008657: apply
  0.001062: update types
  0.000193: operate
  0.046391: sal
0.008767: prepare template nlg
0.942024: template infer
  0.024039: facts graph types
  0.028185: convert facts graph
    0.003371: to digraph
    0.024630: flatten types (703 concepts)
    0.000170: quantities
  0.000024: process dynamic rules
  0.884592: match
    0.884513: match
      0.004728: querygen
      0.539460: creating graph tensor (1831 nodes, 6815 edges)
        0.039788: setup
        0.448888: key tensor
        0.009006: target tensor
        0.039402: edge tensor
      0.000093: initializing solutions matrix
      0.339877: loop
      0.000020: postprocessing (MAX MEMORY: 2.092GB)
  0.002408: postprocess solutions
0.003073: template fillers
0.000015: response sel
0.000182: response exp
0.000014: response rules
0.103991: response assembler
  0.000015: response assembly
  0.046821: update sal
  0.001850: decay sal
  0.055290: prune
    0.000012: setup
    0.000738: select keep
    0.000101: delete old spans
    0.042648: setup essentials
    0.006152: identify essentials
    0.005262: remove not keep

[4.81 s] I'm glad to hear that you are busy with Your job . are you going back to the office ?

User: in the fall my office is opening back up so i will have to return then even though i hate it
in the fall my office is opening back up so i will have to return then even though i hate it
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm3878', 'wm3880')]
CURRENT USER CONCEPTS: {'wm3996', 'wm3959', 'wm3918', 'wm3984', 'wm3934', 'now', 'unknown_noun', 'wm3909', 'office', 'wm3906', 'wm3960', 'wm3976', 'wm3951', 'wm3969', 'wm3923', 'wm3932', 'wm3895', 'wm3931', 'wm3957', 'wm3954', 'wm3992', 'wm3935', 'wm3983', 'wm3924', 'wm3982', 'wm3942', 'wm3928', 'wm3939', 'wm3971', 'wm3977', 'wm3903', 'wm3899', 'wm3913', 'wm3945', 'wm3978', 'user', 'wm3958', 'prp', 'wm3966', 'wm3970', 'wm3919', 'wm3920', 'wm3914', 'wm3948', 'wm3972', 'wm3902', 'wm3965', 'unknown_other', 'wm3998'}
FRAGMENT REQUEST MERGES: [('wm4133', 'wm3878')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	I've also started just going for walks a lot more. Before the pandemic, I often just wanted to get home and relax, but being stuck inside for so long made me realize that I really can't just stay at home all day without going a bit wacky. Do you like just going outside and doing stuff more now than before the pandemic ? (s: 0.24, pr: 0.50)


Present Options:
	I think having passions for one's job is important . Do you like your job ? (s: 0.56, pr: 0.10)
	Then you can see your colleagues in person instead of working in front of computers all day long ! Are you excited about working in the office ? (s: 0.34, pr: 1.00)


0.000077: next turn
0.000022: sentence caser
0.119188: elit
0.700098: parse2logic
  0.007107: facts graph types
  0.188968: convert facts graph
    0.181192: to digraph
    0.007659: flatten types (352 concepts)
    0.000099: quantities
  0.000025: process dynamic rules
  0.468610: match
    0.468528: match
      0.001139: querygen
      0.028407: creating graph tensor (477 nodes, 1695 edges)
        0.010020: setup
        0.002050: key tensor
        0.002462: target tensor
        0.013470: edge tensor
      0.000086: initializing solutions matrix
      0.438685: loop
      0.000014: postprocessing (MAX MEMORY: 0.750GB)
  0.006798: postprocess solutions
0.000076: multiword mentions
0.000012: ner mentions
0.015181: mention bridge
0.036438: merge bridge
0.033719: knowledge pull
0.019305: reference id
0.310893: reference infer
  0.027689: facts graph types
  0.028984: convert facts graph
    0.004363: to digraph
    0.024414: flatten types (777 concepts)
    0.000186: quantities
  0.008597: process dynamic rules
  0.242968: match
    0.242891: match
      0.008066: querygen
      0.204798: creating graph tensor (1826 nodes, 6641 edges)
        0.039078: setup
        0.120398: key tensor
        0.008220: target tensor
        0.035023: edge tensor
      0.000085: initializing solutions matrix
      0.029721: loop
      0.000031: postprocessing (MAX MEMORY: 2.000GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.082309: fragment resolution
  0.000504: identify previous emora questions
  0.030672: find answer
  0.051114: sal
1.995622: dialogue infer
  0.028045: facts graph types
  0.030695: convert facts graph
    0.003541: to digraph
    0.026955: flatten types (778 concepts)
    0.000184: quantities
  0.000026: process dynamic rules
  1.928642: match
    1.928562: match
      0.005488: querygen
      1.397827: creating graph tensor (1978 nodes, 7324 edges)
        0.042294: setup
        1.297174: key tensor
        0.009760: target tensor
        0.046105: edge tensor
      0.000093: initializing solutions matrix
      0.524907: loop
      0.000016: postprocessing (MAX MEMORY: 2.420GB)
  0.005188: postprocess solutions
0.064140: apply inferences
  0.009394: apply
  0.001478: update types
  0.000266: operate
  0.052982: sal
0.018521: reference id 2
0.366735: reference infer 2
  0.029171: facts graph types
  0.029765: convert facts graph
    0.004137: to digraph
    0.025416: flatten types (808 concepts)
    0.000190: quantities
  0.008394: process dynamic rules
  0.296735: match
    0.296657: match
      0.008052: querygen
      0.256894: creating graph tensor (1916 nodes, 6982 edges)
        0.040289: setup
        0.162079: key tensor
        0.009193: target tensor
        0.043175: edge tensor
      0.000091: initializing solutions matrix
      0.031408: loop
      0.000031: postprocessing (MAX MEMORY: 2.210GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.052756: fragment resolution 2
  0.000512: identify previous emora questions
  0.052228: sal
0.764970: dialogue infer 2
  0.029203: facts graph types
  0.217324: convert facts graph
    0.004002: to digraph
    0.213094: flatten types (808 concepts)
    0.000210: quantities
  0.000027: process dynamic rules
  0.509635: match
    0.509513: match
      0.006196: querygen
      0.291128: creating graph tensor (2068 nodes, 7665 edges)
        0.044546: setup
        0.182387: key tensor
        0.009800: target tensor
        0.051884: edge tensor
      0.000092: initializing solutions matrix
      0.211858: loop
      0.000015: postprocessing (MAX MEMORY: 2.650GB)
  0.005400: postprocess solutions
0.061005: apply inferences 2
  0.007233: apply
  0.000611: update types
  0.000261: operate
  0.052846: sal
0.009329: prepare template nlg
2.045046: template infer
  0.029210: facts graph types
  0.032495: convert facts graph
    0.004049: to digraph
    0.028235: flatten types (808 concepts)
    0.000196: quantities
  0.000025: process dynamic rules
  1.977547: match
    1.977464: match
      0.005372: querygen
      1.311975: creating graph tensor (2068 nodes, 7665 edges)
        0.044571: setup
        1.204599: key tensor
        0.010547: target tensor
        0.049593: edge tensor
      0.000092: initializing solutions matrix
      0.659509: loop
      0.000026: postprocessing (MAX MEMORY: 2.650GB)
  0.002368: postprocess solutions
0.001293: template fillers
0.000015: response sel
0.000226: response exp
0.000014: response rules
0.123795: response assembler
  0.000015: response assembly
  0.052986: update sal
  0.002167: decay sal
  0.068611: prune
    0.000017: setup
    0.000852: select keep
    0.000105: delete old spans
    0.052505: setup essentials
    0.007763: identify essentials
    0.006779: remove not keep

[6.82 s] Gotcha . Then you can see your colleagues in person instead of working in front of computers all day long ! Are you excited about working in the office ?

User: i will still be in front of a computer all day long
i will still be in front of a computer all day long
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm4147', 'wm4148')]
CURRENT USER CONCEPTS: {'wm4179', 'unknown_noun', 'wm4204', 'wm4213', 'wm4199', 'wm4212', 'wm4192', 'wm4207', 'wm4214', 'wm4189', 'wm4206', 'wm4165', 'wm4188', 'wm4180', 'wm4184', 'computer', 'user', 'wm4176', 'wm4219', 'day', 'prp', 'wm4171', 'wm4187', 'wm4208', 'wm4174', 'wm4195', 'now', 'unknown_other', 'wm4205'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm4147', 'wm4148')]
CURRENT USER CONCEPTS: {'wm4179', 'unknown_noun', 'wm4204', 'wm4213', 'wm4199', 'wm4212', 'wm4192', 'wm4207', 'wm4214', 'wm4189', 'wm4206', 'wm4165', 'wm4188', 'wm4180', 'wm4184', 'computer', 'user', 'wm4176', 'wm4219', 'day', 'prp', 'wm4171', 'wm4187', 'wm4208', 'wm4174', 'wm4195', 'now', 'unknown_other', 'wm4205'}
FRAGMENT REQUEST MERGES: []

React + Present Options:
	I've also started just going for walks a lot more. Before the pandemic, I often just wanted to get home and relax, but being stuck inside for so long made me realize that I really can't just stay at home all day without going a bit wacky. Do you like just going outside and doing stuff more now than before the pandemic ? (s: 0.24, pr: 0.50)


Present Options:
	I think having passions for one's job is important . Do you like your job ? (s: 0.41, pr: 0.10)


0.000075: next turn
0.000020: sentence caser
0.117219: elit
0.313299: parse2logic
  0.004042: facts graph types
  0.006028: convert facts graph
    0.001224: to digraph
    0.004726: flatten types (231 concepts)
    0.000063: quantities
  0.000021: process dynamic rules
  0.281958: match
    0.281876: match
      0.000659: querygen
      0.028505: creating graph tensor (297 nodes, 1023 edges)
        0.006273: setup
        0.008861: key tensor
        0.001574: target tensor
        0.011534: edge tensor
      0.000084: initializing solutions matrix
      0.252423: loop
      0.000015: postprocessing (MAX MEMORY: 0.050GB)
  0.004487: postprocess solutions
0.000052: multiword mentions
0.000013: ner mentions
0.008741: mention bridge
0.024268: merge bridge
0.033083: knowledge pull
0.015514: reference id
0.315403: reference infer
  0.027053: facts graph types
  0.028948: convert facts graph
    0.004270: to digraph
    0.024464: flatten types (769 concepts)
    0.000192: quantities
  0.007162: process dynamic rules
  0.249669: match
    0.249594: match
      0.007587: querygen
      0.206173: creating graph tensor (1765 nodes, 6415 edges)
        0.038084: setup
        0.116347: key tensor
        0.008057: target tensor
        0.041593: edge tensor
      0.000089: initializing solutions matrix
      0.035519: loop
      0.000032: postprocessing (MAX MEMORY: 1.867GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.051162: fragment resolution
  0.000496: identify previous emora questions
  0.001138: find answer
  0.049508: sal
0.783422: dialogue infer
  0.029323: facts graph types
  0.030103: convert facts graph
    0.003753: to digraph
    0.026143: flatten types (769 concepts)
    0.000192: quantities
  0.000026: process dynamic rules
  0.715923: match
    0.715847: match
      0.004882: querygen
      0.461625: creating graph tensor (1909 nodes, 7053 edges)
        0.040587: setup
        0.363925: key tensor
        0.009940: target tensor
        0.044812: edge tensor
      0.000096: initializing solutions matrix
      0.248991: loop
      0.000016: postprocessing (MAX MEMORY: 2.246GB)
  0.005096: postprocess solutions
0.058380: apply inferences
  0.007089: apply
  0.000603: update types
  0.000200: operate
  0.050468: sal
0.015329: reference id 2
0.314583: reference infer 2
  0.027227: facts graph types
  0.027913: convert facts graph
    0.003402: to digraph
    0.024303: flatten types (769 concepts)
    0.000186: quantities
  0.007222: process dynamic rules
  0.249623: match
    0.249546: match
      0.008276: querygen
      0.204815: creating graph tensor (1765 nodes, 6415 edges)
        0.037300: setup
        0.115377: key tensor
        0.008395: target tensor
        0.041669: edge tensor
      0.000089: initializing solutions matrix
      0.036134: loop
      0.000031: postprocessing (MAX MEMORY: 1.867GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.051289: fragment resolution 2
  0.000484: identify previous emora questions
  0.001134: find answer
  0.049652: sal
0.596722: dialogue infer 2
  0.027191: facts graph types
  0.029854: convert facts graph
    0.003524: to digraph
    0.026133: flatten types (769 concepts)
    0.000182: quantities
  0.000028: process dynamic rules
  0.531620: match
    0.531546: match
      0.004779: querygen
      0.274939: creating graph tensor (1909 nodes, 7053 edges)
        0.040669: setup
        0.178477: key tensor
        0.009203: target tensor
        0.044015: edge tensor
      0.000096: initializing solutions matrix
      0.251491: loop
      0.000015: postprocessing (MAX MEMORY: 2.246GB)
  0.005082: postprocess solutions
0.058425: apply inferences 2
  0.006911: apply
  0.000592: update types
  0.000203: operate
  0.050700: sal
0.010075: prepare template nlg
0.827126: template infer
  0.027125: facts graph types
  0.030268: convert facts graph
    0.003622: to digraph
    0.026450: flatten types (769 concepts)
    0.000182: quantities
  0.000026: process dynamic rules
  0.764646: match
    0.764570: match
      0.005307: querygen
      0.469694: creating graph tensor (1909 nodes, 7053 edges)
        0.041263: setup
        0.376561: key tensor
        0.009221: target tensor
        0.040272: edge tensor
      0.000093: initializing solutions matrix
      0.289147: loop
      0.000018: postprocessing (MAX MEMORY: 2.246GB)
  0.002096: postprocess solutions
0.000451: template fillers
0.000014: response sel
0.000197: response exp
0.000014: response rules
0.114418: response assembler
  0.000015: response assembly
  0.050210: update sal
  0.002038: decay sal
  0.062138: prune
    0.000012: setup
    0.000800: select keep
    0.000121: delete old spans
    0.048080: setup essentials
    0.007950: identify essentials
    0.004773: remove not keep

[3.71 s] I've also started just going for walks a lot more. Before the pandemic, I often just wanted to get home and relax, but being stuck inside for so long made me realize that I really can't just stay at home all day without going a bit wacky. Do you like just going outside and doing stuff more now than before the pandemic ?

User: i like going out on walks to take a break from killing myself
i like going out on walks to take a break from killing myself
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm3865', 'wm3866')]
CURRENT USER CONCEPTS: {'wm4328', 'wm4330', 'wm4355', 'wm4319', 'wm4308', 'wm4331', 'wm4367', 'wm4346', 'unknown_noun', 'wm4344', 'wm4351', 'wm4349', 'wm4325', 'wm4357', 'wm4350', 'wm4339', 'wm4311', 'wm4361', 'wm4362', 'wm4354', 'wm4356', 'wm4336', 'wm4320', 'walk', 'user', 'wm4335', 'prp', 'unknown_verb', 'wm4345', 'wm4363', 'wm4309', 'wm4329', 'now', 'unknown_other', 'take'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm3865', 'wm3866')]
CURRENT USER CONCEPTS: {'wm4328', 'wm4330', 'wm4355', 'wm4319', 'wm4308', 'wm4331', 'wm4367', 'wm4346', 'unknown_noun', 'wm4344', 'wm4351', 'wm4349', 'wm4325', 'wm4357', 'wm4350', 'wm4339', 'wm4311', 'wm4361', 'wm4362', 'wm4354', 'wm4356', 'wm4336', 'wm4320', 'walk', 'user', 'wm4335', 'prp', 'unknown_verb', 'wm4345', 'wm4363', 'wm4309', 'wm4329', 'now', 'unknown_other', 'take'}
FRAGMENT REQUEST MERGES: []

Present Options:
	I think having passions for one's job is important . Do you like your job ? (s: 0.40, pr: 0.10)


0.000073: next turn
0.000020: sentence caser
0.116813: elit
0.416301: parse2logic
  0.004728: facts graph types
  0.007575: convert facts graph
    0.001387: to digraph
    0.006103: flatten types (260 concepts)
    0.000070: quantities
  0.000022: process dynamic rules
  0.381160: match
    0.381082: match
      0.000740: querygen
      0.054322: creating graph tensor (346 nodes, 1207 edges)
        0.006692: setup
        0.036209: key tensor
        0.002396: target tensor
        0.008715: edge tensor
      0.000084: initializing solutions matrix
      0.325589: loop
      0.000018: postprocessing (MAX MEMORY: 0.068GB)
  0.004083: postprocess solutions
0.000064: multiword mentions
0.000012: ner mentions
0.009735: mention bridge
0.029992: merge bridge
0.035048: knowledge pull
0.015459: reference id
0.430655: reference infer
  0.028691: facts graph types
  0.030046: convert facts graph
    0.004394: to digraph
    0.025441: flatten types (802 concepts)
    0.000190: quantities
  0.007353: process dynamic rules
  0.361996: match
    0.361920: match
      0.007762: querygen
      0.327976: creating graph tensor (1834 nodes, 6667 edges)
        0.224056: setup
        0.054275: key tensor
        0.008446: target tensor
        0.039037: edge tensor
      0.000088: initializing solutions matrix
      0.025876: loop
      0.000031: postprocessing (MAX MEMORY: 2.017GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.082840: fragment resolution
  0.000513: identify previous emora questions
  0.030124: find answer
  0.052184: sal
0.628445: dialogue infer
  0.028730: facts graph types
  0.030885: convert facts graph
    0.004016: to digraph
    0.026667: flatten types (802 concepts)
    0.000188: quantities
  0.000027: process dynamic rules
  0.560882: match
    0.560803: match
      0.005892: querygen
      0.333914: creating graph tensor (1976 nodes, 7305 edges)
        0.043222: setup
        0.229290: key tensor
        0.009690: target tensor
        0.049137: edge tensor
      0.000093: initializing solutions matrix
      0.220675: loop
      0.000015: postprocessing (MAX MEMORY: 2.409GB)
  0.004813: postprocess solutions
0.060834: apply inferences
  0.007257: apply
  0.000647: update types
  0.000209: operate
  0.052700: sal
0.015357: reference id 2
0.299782: reference infer 2
  0.029067: facts graph types
  0.028936: convert facts graph
    0.004103: to digraph
    0.024617: flatten types (803 concepts)
    0.000195: quantities
  0.007731: process dynamic rules
  0.231510: match
    0.231435: match
      0.007645: querygen
      0.194511: creating graph tensor (1838 nodes, 6683 edges)
        0.039585: setup
        0.102854: key tensor
        0.008396: target tensor
        0.041478: edge tensor
      0.000089: initializing solutions matrix
      0.028965: loop
      0.000031: postprocessing (MAX MEMORY: 2.026GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.082904: fragment resolution 2
  0.000476: identify previous emora questions
  0.030079: find answer
  0.052331: sal
0.620691: dialogue infer 2
  0.028860: facts graph types
  0.031146: convert facts graph
    0.003701: to digraph
    0.027242: flatten types (803 concepts)
    0.000188: quantities
  0.000027: process dynamic rules
  0.552838: match
    0.552758: match
      0.005443: querygen
      0.280003: creating graph tensor (1980 nodes, 7321 edges)
        0.042379: setup
        0.180690: key tensor
        0.009375: target tensor
        0.045114: edge tensor
      0.000089: initializing solutions matrix
      0.266976: loop
      0.000016: postprocessing (MAX MEMORY: 2.419GB)
  0.004810: postprocess solutions
0.237106: apply inferences 2
  0.182853: apply
  0.000642: update types
  0.000216: operate
  0.053373: sal
0.010505: prepare template nlg
0.634236: template infer
  0.028754: facts graph types
  0.031194: convert facts graph
    0.003715: to digraph
    0.027277: flatten types (803 concepts)
    0.000188: quantities
  0.000025: process dynamic rules
  0.568878: match
    0.568794: match
      0.005876: querygen
      0.329316: creating graph tensor (1980 nodes, 7321 edges)
        0.043538: setup
        0.227059: key tensor
        0.009418: target tensor
        0.046803: edge tensor
      0.000093: initializing solutions matrix
      0.233167: loop
      0.000021: postprocessing (MAX MEMORY: 2.419GB)
  0.002256: postprocess solutions
0.000379: template fillers
0.000014: response sel
0.000199: response exp
0.000015: response rules
0.118852: response assembler
  0.000016: response assembly
  0.052487: update sal
  0.002125: decay sal
  0.064209: prune
    0.000012: setup
    0.000844: select keep
    0.000118: delete old spans
    0.050867: setup essentials
    0.007873: identify essentials
    0.004071: remove not keep

[3.85 s] Yeah . I think having passions for one's job is important . Do you like your job ?

User: yes i like it ask me something more interesting
yes i like it ask me something more interesting
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm3851', 'wm3853')]
CURRENT USER CONCEPTS: {'wm4495', 'wm4497', 'wm4509', 'wm4480', 'unknown_noun', 'wm4479', 'predicate', 'object', 'wm4489', 'wm4463', 'more', 'wm4476', 'wm4502', 'wm4488', 'user', 'wm4484', 'prp', 'unknown_verb', 'wm4490', 'wm4464', 'wm4468', 'wm4500', 'wm4471', 'wm4473', 'wm4485', 'wm4503', 'wm4501', 'wm4510', 'wm4481', 'now'}
FRAGMENT REQUEST MERGES: [('wm4479', 'wm3851')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	That’s awesome to hear . When I like something , I feel motivated and energized to spend more time on it . That always makes my work smoother . (s: 0.41, pr: 0.50)


0.000086: next turn
0.000019: sentence caser
0.112180: elit
0.672775: parse2logic
  0.002952: facts graph types
  0.004706: convert facts graph
    0.000964: to digraph
    0.003675: flatten types (177 concepts)
    0.000053: quantities
  0.000021: process dynamic rules
  0.649203: match
    0.649123: match
      0.000529: querygen
      0.316001: creating graph tensor (231 nodes, 791 edges)
        0.004413: setup
        0.299459: key tensor
        0.002419: target tensor
        0.009483: edge tensor
      0.000087: initializing solutions matrix
      0.332143: loop
      0.000019: postprocessing (MAX MEMORY: 0.030GB)
  0.002301: postprocess solutions
0.000051: multiword mentions
0.000012: ner mentions
0.007329: mention bridge
0.059890: merge bridge
0.036390: knowledge pull
0.015094: reference id
0.304868: reference infer
  0.029550: facts graph types
  0.030513: convert facts graph
    0.003903: to digraph
    0.026395: flatten types (825 concepts)
    0.000194: quantities
  0.006634: process dynamic rules
  0.235273: match
    0.235199: match
      0.008575: querygen
      0.197228: creating graph tensor (1888 nodes, 6872 edges)
        0.040321: setup
        0.102115: key tensor
        0.008600: target tensor
        0.044001: edge tensor
      0.000091: initializing solutions matrix
      0.029084: loop
      0.000031: postprocessing (MAX MEMORY: 2.142GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.086626: fragment resolution
  0.000498: identify previous emora questions
  0.032317: find answer
  0.053792: sal
0.482855: dialogue infer
  0.029436: facts graph types
  0.031548: convert facts graph
    0.003815: to digraph
    0.027524: flatten types (821 concepts)
    0.000195: quantities
  0.000027: process dynamic rules
  0.413906: match
    0.413827: match
      0.005724: querygen
      0.212982: creating graph tensor (2006 nodes, 7422 edges)
        0.043038: setup
        0.111080: key tensor
        0.009404: target tensor
        0.047079: edge tensor
      0.000091: initializing solutions matrix
      0.194802: loop
      0.000015: postprocessing (MAX MEMORY: 2.486GB)
  0.004835: postprocess solutions
0.063119: apply inferences
  0.007162: apply
  0.000943: update types
  0.000262: operate
  0.054731: sal
0.014568: reference id 2
1.042566: reference infer 2
  0.030154: facts graph types
  0.030500: convert facts graph
    0.004214: to digraph
    0.026069: flatten types (831 concepts)
    0.000197: quantities
  0.189383: process dynamic rules
  0.789529: match
    0.789447: match
      0.009225: querygen
      0.726918: creating graph tensor (1919 nodes, 7004 edges)
        0.040824: setup
        0.630658: key tensor
        0.009448: target tensor
        0.043505: edge tensor
      0.000090: initializing solutions matrix
      0.052971: loop
      0.000032: postprocessing (MAX MEMORY: 2.223GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.055323: fragment resolution 2
  0.000504: identify previous emora questions
  0.054803: sal
0.450151: dialogue infer 2
  0.030325: facts graph types
  0.032401: convert facts graph
    0.003897: to digraph
    0.028296: flatten types (831 concepts)
    0.000195: quantities
  0.000026: process dynamic rules
  0.379419: match
    0.379340: match
      0.005782: querygen
      0.180191: creating graph tensor (2038 nodes, 7542 edges)
        0.043372: setup
        0.076931: key tensor
        0.009349: target tensor
        0.048117: edge tensor
      0.000088: initializing solutions matrix
      0.193048: loop
      0.000015: postprocessing (MAX MEMORY: 2.567GB)
  0.004832: postprocess solutions
0.062015: apply inferences 2
  0.006457: apply
  0.000703: update types
  0.000265: operate
  0.054570: sal
0.010892: prepare template nlg
0.723751: template infer
  0.030184: facts graph types
  0.032130: convert facts graph
    0.004292: to digraph
    0.027628: flatten types (831 concepts)
    0.000195: quantities
  0.000026: process dynamic rules
  0.655892: match
    0.655813: match
      0.005836: querygen
      0.397051: creating graph tensor (2038 nodes, 7542 edges)
        0.044307: setup
        0.284304: key tensor
        0.009805: target tensor
        0.056049: edge tensor
      0.000091: initializing solutions matrix
      0.252489: loop
      0.000021: postprocessing (MAX MEMORY: 2.567GB)
  0.002265: postprocess solutions
0.000411: template fillers
0.000014: response sel
0.000207: response exp
0.000014: response rules
0.124795: response assembler
  0.000015: response assembly
  0.054651: update sal
  0.002195: decay sal
  0.067918: prune
    0.000017: setup
    0.000866: select keep
    0.000119: delete old spans
    0.052381: setup essentials
    0.007404: identify essentials
    0.006503: remove not keep

[4.33 s] That's awesome to hear . When I like something , I feel motivated and energized to spend more time on it . That always makes my work smoother .

User: true that
true that
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

0.000084: next turn
0.000017: sentence caser
0.113176: elit
0.098403: parse2logic
  0.000622: facts graph types
  0.001068: convert facts graph
    0.000230: to digraph
    0.000804: flatten types (44 concepts)
    0.000022: quantities
  0.000020: process dynamic rules
  0.092183: match
    0.092107: match
      0.000129: querygen
      0.015025: creating graph tensor (51 nodes, 155 edges)
        0.001012: setup
        0.006584: key tensor
        0.000469: target tensor
        0.006892: edge tensor
      0.000074: initializing solutions matrix
      0.076640: loop
      0.000015: postprocessing (MAX MEMORY: 0.002GB)
  0.000706: postprocess solutions
0.000036: multiword mentions
0.000011: ner mentions
0.002281: mention bridge
0.005796: merge bridge
0.030581: knowledge pull
0.013593: reference id
0.430587: reference infer
  0.023823: facts graph types
  0.026469: convert facts graph
    0.003470: to digraph
    0.022809: flatten types (703 concepts)
    0.000171: quantities
  0.005600: process dynamic rules
  0.372351: match
    0.372277: match
      0.006592: querygen
      0.311101: creating graph tensor (1619 nodes, 5905 edges)
        0.035465: setup
        0.042508: key tensor
        0.007723: target tensor
        0.223371: edge tensor
      0.000097: initializing solutions matrix
      0.054237: loop
      0.000032: postprocessing (MAX MEMORY: 1.581GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.047245: fragment resolution
  0.000511: identify previous emora questions
  0.046717: sal
0.386981: dialogue infer
  0.023660: facts graph types
  0.027170: convert facts graph
    0.003498: to digraph
    0.023490: flatten types (703 concepts)
    0.000168: quantities
  0.000026: process dynamic rules
  0.328667: match
    0.328592: match
      0.005080: querygen
      0.137351: creating graph tensor (1730 nodes, 6405 edges)
        0.037069: setup
        0.057661: key tensor
        0.008477: target tensor
        0.032146: edge tensor
      0.000090: initializing solutions matrix
      0.185828: loop
      0.000016: postprocessing (MAX MEMORY: 1.851GB)
  0.004832: postprocess solutions
0.053474: apply inferences
  0.006542: apply
  0.000623: update types
  0.000191: operate
  0.046096: sal
0.013463: reference id 2
0.240802: reference infer 2
  0.023343: facts graph types
  0.025483: convert facts graph
    0.003449: to digraph
    0.021845: flatten types (703 concepts)
    0.000170: quantities
  0.006029: process dynamic rules
  0.183630: match
    0.183556: match
      0.006520: querygen
      0.124317: creating graph tensor (1619 nodes, 5905 edges)
        0.034842: setup
        0.042501: key tensor
        0.007545: target tensor
        0.037627: edge tensor
      0.000087: initializing solutions matrix
      0.052389: loop
      0.000030: postprocessing (MAX MEMORY: 1.581GB)
  0.000009: postprocess solutions
0.000013: reference resolution 2
0.046768: fragment resolution 2
  0.000474: identify previous emora questions
  0.046278: sal
0.382377: dialogue infer 2
  0.023468: facts graph types
  0.026928: convert facts graph
    0.003524: to digraph
    0.023223: flatten types (703 concepts)
    0.000168: quantities
  0.000026: process dynamic rules
  0.324670: match
    0.324593: match
      0.004886: querygen
      0.133085: creating graph tensor (1730 nodes, 6405 edges)
        0.036896: setup
        0.053905: key tensor
        0.008153: target tensor
        0.032159: edge tensor
      0.000090: initializing solutions matrix
      0.186305: loop
      0.000016: postprocessing (MAX MEMORY: 1.851GB)
  0.004811: postprocess solutions
0.053233: apply inferences 2
  0.006538: apply
  0.000617: update types
  0.000189: operate
  0.045869: sal
0.009855: prepare template nlg
0.386361: template infer
  0.023504: facts graph types
  0.026974: convert facts graph
    0.003479: to digraph
    0.023313: flatten types (703 concepts)
    0.000169: quantities
  0.000025: process dynamic rules
  0.331517: match
    0.331440: match
      0.005015: querygen
      0.161451: creating graph tensor (1730 nodes, 6405 edges)
        0.037267: setup
        0.078767: key tensor
        0.008072: target tensor
        0.035342: edge tensor
      0.000088: initializing solutions matrix
      0.164598: loop
      0.000018: postprocessing (MAX MEMORY: 1.851GB)
  0.001841: postprocess solutions
0.000234: template fillers
0.000014: response sel
0.000438: response exp
0.000014: response rules
0.100204: response assembler
  0.000015: response assembly
  0.047034: update sal
  0.001842: decay sal
  0.051297: prune
    0.000012: setup
    0.000729: select keep
    0.000122: delete old spans
    0.040936: setup essentials
    0.007163: identify essentials
    0.001974: remove not keep

[2.42 s] Anyway , you seem like someone who might like sports. Do you?

User: yes
yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm4614', 'wm4615')]
CURRENT USER CONCEPTS: {'wm4625', 'wm4624', 'user', 'wm4623', 'predicate'}
FRAGMENT REQUEST MERGES: [('wm4623', 'wm4614')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Out of all sports, what's your favorite? I like football, baseball, tennis, and soccer, but basketball is my favorite. (s: 0.55, pr: 1.00)


0.000088: next turn
0.000016: sentence caser
0.108536: elit
0.045219: parse2logic
  0.000349: facts graph types
  0.000787: convert facts graph
    0.000289: to digraph
    0.000466: flatten types (26 concepts)
    0.000020: quantities
  0.000020: process dynamic rules
  0.041535: match
    0.041454: match
      0.000090: querygen
      0.006794: creating graph tensor (30 nodes, 82 edges)
        0.000532: setup
        0.002809: key tensor
        0.000373: target tensor
        0.003029: edge tensor
      0.000072: initializing solutions matrix
      0.034288: loop
      0.000014: postprocessing (MAX MEMORY: 0.001GB)
  0.000460: postprocess solutions
0.000033: multiword mentions
0.000011: ner mentions
0.001565: mention bridge
0.004410: merge bridge
0.029842: knowledge pull
0.013910: reference id
0.411698: reference infer
  0.022708: facts graph types
  0.025861: convert facts graph
    0.003958: to digraph
    0.021707: flatten types (687 concepts)
    0.000176: quantities
  0.005908: process dynamic rules
  0.354972: match
    0.354900: match
      0.189405: querygen
      0.120559: creating graph tensor (1593 nodes, 5809 edges)
        0.034614: setup
        0.039369: key tensor
        0.007584: target tensor
        0.037152: edge tensor
      0.000088: initializing solutions matrix
      0.044608: loop
      0.000031: postprocessing (MAX MEMORY: 1.530GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.070902: fragment resolution
  0.000503: identify previous emora questions
  0.025144: find answer
  0.045237: sal
0.471936: dialogue infer
  0.022600: facts graph types
  0.026748: convert facts graph
    0.003246: to digraph
    0.023321: flatten types (684 concepts)
    0.000166: quantities
  0.000026: process dynamic rules
  0.415223: match
    0.415146: match
      0.004990: querygen
      0.201418: creating graph tensor (1698 nodes, 6296 edges)
        0.036381: setup
        0.119128: key tensor
        0.008249: target tensor
        0.035582: edge tensor
      0.000090: initializing solutions matrix
      0.208412: loop
      0.000015: postprocessing (MAX MEMORY: 1.788GB)
  0.004788: postprocess solutions
0.054985: apply inferences
  0.007045: apply
  0.000762: update types
  0.000449: operate
  0.046708: sal
0.016317: reference id 2
0.221681: reference infer 2
  0.023144: facts graph types
  0.025409: convert facts graph
    0.003102: to digraph
    0.022120: flatten types (691 concepts)
    0.000168: quantities
  0.006122: process dynamic rules
  0.164707: match
    0.164630: match
      0.006763: querygen
      0.113247: creating graph tensor (1597 nodes, 5816 edges)
        0.033917: setup
        0.038032: key tensor
        0.007779: target tensor
        0.031609: edge tensor
      0.000089: initializing solutions matrix
      0.044298: loop
      0.000030: postprocessing (MAX MEMORY: 1.534GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.045856: fragment resolution 2
  0.000513: identify previous emora questions
  0.045326: sal
0.401434: dialogue infer 2
  0.023000: facts graph types
  0.026609: convert facts graph
    0.003436: to digraph
    0.022990: flatten types (691 concepts)
    0.000168: quantities
  0.000027: process dynamic rules
  0.344455: match
    0.344382: match
      0.004850: querygen
      0.181885: creating graph tensor (1715 nodes, 6354 edges)
        0.037136: setup
        0.101446: key tensor
        0.008681: target tensor
        0.032429: edge tensor
      0.000091: initializing solutions matrix
      0.157329: loop
      0.000015: postprocessing (MAX MEMORY: 1.822GB)
  0.004775: postprocess solutions
0.052592: apply inferences 2
  0.006521: apply
  0.000614: update types
  0.000233: operate
  0.045204: sal
0.008771: prepare template nlg
0.568807: template infer
  0.023185: facts graph types
  0.026609: convert facts graph
    0.003510: to digraph
    0.022916: flatten types (691 concepts)
    0.000168: quantities
  0.000025: process dynamic rules
  0.514454: match
    0.514380: match
      0.005026: querygen
      0.360087: creating graph tensor (1715 nodes, 6354 edges)
        0.036797: setup
        0.271857: key tensor
        0.008616: target tensor
        0.040602: edge tensor
      0.000093: initializing solutions matrix
      0.148903: loop
      0.000016: postprocessing (MAX MEMORY: 1.822GB)
  0.001997: postprocess solutions
0.000389: template fillers
0.000018: response sel
0.000107: response exp
0.000013: response rules
0.097330: response assembler
  0.000015: response assembly
  0.045646: update sal
  0.001846: decay sal
  0.049805: prune
    0.000017: setup
    0.000711: select keep
    0.000100: delete old spans
    0.039334: setup essentials
    0.006850: identify essentials
    0.002213: remove not keep

[2.63 s] Out of all sports, what's your favorite? I like football, baseball, tennis, and soccer, but basketball is my favorite.

User: my favorite sport is basketball and tennis but i grew up watching baseball and football with my family
my favorite sport is basketball and tennis but i grew up watching baseball and football with my family
ARG REQUESTS: [('emora', 'request', 'wm4616', 'wm4643')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm4650', 'football', 'wm4662', 'wm4661', 'wm4693', 'wm4717', 'wm4671', 'past', 'wm4651', 'but', 'wm4683', 'wm4687', 'wm4708', 'wm4675', 'wm4724', 'wm4716', 'wm4679', 'wm4735', 'baseball', 'wm4692', 'wm4660', 'wm4674', 'wm4670', 'wm4698', 'wm4697', 'wm4665', 'watch', 'family', 'wm4691', 'wm4718', 'user', 'prp', 'unknown_verb', 'wm4667', 'wm4712', 'wm4703', 'sport', 'wm4722', 'basketball', 'wm4723', 'be', 'wm4741', 'tennis', 'now', 'unknown_other', 'wm4737'}
FRAGMENT REQUEST MERGES: [('football', 'wm4616')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Which football team is your favorite? My favorite is the Texans (s: 0.60, pr: 1.00)
	Since you like basketball, what's your favorite team? Mine is the L A Lakers. It's too bad they got knocked out first round of the playoffs. (s: 0.29, pr: 1.00)
	Have you played basketball before? Sounds like you enjoy it. (s: 0.49, pr: 1.00)
	Have you ever played football? Figured I'd ask. (s: 0.83, pr: 1.00)


0.000074: next turn
0.000020: sentence caser
0.118971: elit
0.640658: parse2logic
  0.005392: facts graph types
  0.007894: convert facts graph
    0.001600: to digraph
    0.006205: flatten types (293 concepts)
    0.000076: quantities
  0.000023: process dynamic rules
  0.598326: match
    0.598229: match
      0.001018: querygen
      0.133994: creating graph tensor (387 nodes, 1356 edges)
        0.008199: setup
        0.111648: key tensor
        0.002494: target tensor
        0.011280: edge tensor
      0.000086: initializing solutions matrix
      0.462721: loop
      0.000021: postprocessing (MAX MEMORY: 0.110GB)
  0.004452: postprocess solutions
0.000076: multiword mentions
0.000012: ner mentions
0.013620: mention bridge
0.034344: merge bridge
0.041874: knowledge pull
0.021216: reference id
0.299904: reference infer
  0.030977: facts graph types
  0.031912: convert facts graph
    0.004001: to digraph
    0.027692: flatten types (841 concepts)
    0.000198: quantities
  0.007292: process dynamic rules
  0.226712: match
    0.226635: match
      0.008895: querygen
      0.162173: creating graph tensor (1970 nodes, 7162 edges)
        0.042009: setup
        0.060626: key tensor
        0.008971: target tensor
        0.048457: edge tensor
      0.000087: initializing solutions matrix
      0.055241: loop
      0.000032: postprocessing (MAX MEMORY: 2.327GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.088736: fragment resolution
  0.000543: identify previous emora questions
  0.033366: find answer
  0.054807: sal
0.540808: dialogue infer
  0.031138: facts graph types
  0.033936: convert facts graph
    0.004404: to digraph
    0.029318: flatten types (839 concepts)
    0.000197: quantities
  0.000028: process dynamic rules
  0.467338: match
    0.467253: match
      0.006207: querygen
      0.249542: creating graph tensor (2106 nodes, 7800 edges)
        0.044911: setup
        0.141984: key tensor
        0.010069: target tensor
        0.050192: edge tensor
      0.000090: initializing solutions matrix
      0.211190: loop
      0.000015: postprocessing (MAX MEMORY: 2.745GB)
  0.005077: postprocess solutions
0.065798: apply inferences
  0.007892: apply
  0.001301: update types
  0.000218: operate
  0.056366: sal
0.018404: reference id 2
1.336043: reference infer 2
  0.032082: facts graph types
  0.031666: convert facts graph
    0.003876: to digraph
    0.027568: flatten types (858 concepts)
    0.000201: quantities
  0.007436: process dynamic rules
  1.261666: match
    1.261587: match
      0.008921: querygen
      1.174800: creating graph tensor (2023 nodes, 7365 edges)
        0.042434: setup
        1.075170: key tensor
        0.010051: target tensor
        0.044657: edge tensor
      0.000091: initializing solutions matrix
      0.077518: loop
      0.000034: postprocessing (MAX MEMORY: 2.459GB)
  0.000009: postprocess solutions
0.000014: reference resolution 2
0.056843: fragment resolution 2
  0.000574: identify previous emora questions
  0.056252: sal
0.955670: dialogue infer 2
  0.032225: facts graph types
  0.224381: convert facts graph
    0.004099: to digraph
    0.220041: flatten types (858 concepts)
    0.000222: quantities
  0.000027: process dynamic rules
  0.690346: match
    0.690259: match
      0.007053: querygen
      0.384772: creating graph tensor (2168 nodes, 8038 edges)
        0.047077: setup
        0.273342: key tensor
        0.010350: target tensor
        0.051311: edge tensor
      0.000092: initializing solutions matrix
      0.298094: loop
      0.000015: postprocessing (MAX MEMORY: 2.914GB)
  0.005190: postprocess solutions
0.067130: apply inferences 2
  0.008160: apply
  0.000890: update types
  0.000300: operate
  0.057760: sal
0.010403: prepare template nlg
0.656599: template infer
  0.032923: facts graph types
  0.034986: convert facts graph
    0.004251: to digraph
    0.030514: flatten types (871 concepts)
    0.000205: quantities
  0.000026: process dynamic rules
  0.582339: match
    0.582260: match
      0.006657: querygen
      0.327568: creating graph tensor (2214 nodes, 8209 edges)
        0.048170: setup
        0.205687: key tensor
        0.010419: target tensor
        0.060574: edge tensor
      0.000093: initializing solutions matrix
      0.247602: loop
      0.000020: postprocessing (MAX MEMORY: 3.039GB)
  0.002690: postprocess solutions
0.000554: template fillers
0.000015: response sel
0.000162: response exp
0.000013: response rules
0.137562: response assembler
  0.000015: response assembly
  0.057441: update sal
  0.002266: decay sal
  0.077824: prune
    0.000013: setup
    0.000891: select keep
    0.000104: delete old spans
    0.058410: setup essentials
    0.006331: identify essentials
    0.011585: remove not keep

[5.11 s] Have you ever played football? Figured I'd ask.

User: no i am a girl
no i am a girl
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm4866', 'wm4867')]
CURRENT USER CONCEPTS: {'wm4896', 'wm4908', 'girl', 'wm4903', 'wm4902', 'wm4891', 'wm4901', 'user', 'wm4897', 'now', 'wm4890', 'predicate', 'prp'}
FRAGMENT REQUEST MERGES: [('wm4901', 'wm4866')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Which football team is your favorite? My favorite is the Texans (s: 0.45, pr: 1.00)
	Since you like basketball, what's your favorite team? Mine is the L A Lakers. It's too bad they got knocked out first round of the playoffs. (s: 0.27, pr: 1.00)
	Have you played basketball before? Sounds like you enjoy it. (s: 0.45, pr: 1.00)


0.000075: next turn
0.000018: sentence caser
0.111821: elit
0.238874: parse2logic
  0.001685: facts graph types
  0.002911: convert facts graph
    0.000640: to digraph
    0.002218: flatten types (109 concepts)
    0.000040: quantities
  0.000021: process dynamic rules
  0.222876: match
    0.222795: match
      0.000355: querygen
      0.033828: creating graph tensor (139 nodes, 458 edges)
        0.002622: setup
        0.018270: key tensor
        0.000919: target tensor
        0.011839: edge tensor
      0.000082: initializing solutions matrix
      0.188332: loop
      0.000015: postprocessing (MAX MEMORY: 0.011GB)
  0.003370: postprocess solutions
0.000046: multiword mentions
0.000012: ner mentions
0.004079: mention bridge
0.005478: merge bridge
0.030482: knowledge pull
0.011431: reference id
0.199307: reference infer
  0.020696: facts graph types
  0.024224: convert facts graph
    0.003199: to digraph
    0.020847: flatten types (637 concepts)
    0.000158: quantities
  0.005845: process dynamic rules
  0.146404: match
    0.146332: match
      0.006680: querygen
      0.095623: creating graph tensor (1487 nodes, 5425 edges)
        0.032440: setup
        0.023264: key tensor
        0.007042: target tensor
        0.031315: edge tensor
      0.000087: initializing solutions matrix
      0.043713: loop
      0.000031: postprocessing (MAX MEMORY: 1.334GB)
  0.000009: postprocess solutions
0.000014: reference resolution
0.044326: fragment resolution
  0.000515: identify previous emora questions
  0.001929: find answer
  0.041864: sal
0.315707: dialogue infer
  0.020463: facts graph types
  0.024443: convert facts graph
    0.003038: to digraph
    0.021236: flatten types (633 concepts)
    0.000156: quantities
  0.000025: process dynamic rules
  0.264010: match
    0.263936: match
      0.004588: querygen
      0.109576: creating graph tensor (1588 nodes, 5900 edges)
        0.034191: setup
        0.031599: key tensor
        0.007307: target tensor
        0.034764: edge tensor
      0.000088: initializing solutions matrix
      0.149458: loop
      0.000015: postprocessing (MAX MEMORY: 1.570GB)
  0.004350: postprocess solutions
0.048675: apply inferences
  0.005571: apply
  0.000609: update types
  0.000216: operate
  0.042259: sal
0.010894: reference id 2
0.411106: reference infer 2
  0.020621: facts graph types
  0.023050: convert facts graph
    0.003183: to digraph
    0.019686: flatten types (633 concepts)
    0.000161: quantities
  0.005536: process dynamic rules
  0.359695: match
    0.359611: match
      0.189529: querygen
      0.115984: creating graph tensor (1477 nodes, 5395 edges)
        0.031983: setup
        0.045822: key tensor
        0.007201: target tensor
        0.029312: edge tensor
      0.000089: initializing solutions matrix
      0.053767: loop
      0.000032: postprocessing (MAX MEMORY: 1.319GB)
  0.000009: postprocess solutions
0.000014: reference resolution 2
0.042603: fragment resolution 2
  0.000487: identify previous emora questions
  0.042099: sal
0.324289: dialogue infer 2
  0.020612: facts graph types
  0.025106: convert facts graph
    0.003057: to digraph
    0.021877: flatten types (633 concepts)
    0.000157: quantities
  0.000026: process dynamic rules
  0.271734: match
    0.271661: match
      0.004222: querygen
      0.109600: creating graph tensor (1588 nodes, 5900 edges)
        0.033971: setup
        0.031554: key tensor
        0.007600: target tensor
        0.034737: edge tensor
      0.000088: initializing solutions matrix
      0.157520: loop
      0.000014: postprocessing (MAX MEMORY: 1.570GB)
  0.004325: postprocess solutions
0.048971: apply inferences 2
  0.005508: apply
  0.000603: update types
  0.000221: operate
  0.042619: sal
0.007930: prepare template nlg
0.343690: template infer
  0.020615: facts graph types
  0.024959: convert facts graph
    0.002945: to digraph
    0.021830: flatten types (633 concepts)
    0.000170: quantities
  0.000026: process dynamic rules
  0.294034: match
    0.293959: match
      0.004084: querygen
      0.143051: creating graph tensor (1588 nodes, 5900 edges)
        0.034986: setup
        0.065956: key tensor
        0.007760: target tensor
        0.032455: edge tensor
      0.000088: initializing solutions matrix
      0.146466: loop
      0.000016: postprocessing (MAX MEMORY: 1.570GB)
  0.001575: postprocess solutions
0.000386: template fillers
0.000014: response sel
0.000150: response exp
0.000014: response rules
0.089251: response assembler
  0.000015: response assembly
  0.042463: update sal
  0.001659: decay sal
  0.045096: prune
    0.000015: setup
    0.000664: select keep
    0.000115: delete old spans
    0.035976: setup essentials
    0.006372: identify essentials
    0.001438: remove not keep

[2.29 s] Have you played basketball before? Sounds like you enjoy it.

User: i played in middle school and a little bit of high school but my coach made me quit because she was literally the worst
i played in middle school and a little bit of high school but my coach made me quit because she was literally the worst
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm4875', 'wm4878')]
CURRENT USER CONCEPTS: {'wm5042', 'wm4972', 'wm4946', 'wm4963', 'unknown_noun', 'past', 'but', 'wm4973', 'wm5030', 'wm4985', 'wm5002', 'wm4974', 'wm4951', 'wm5027', 'school', 'wm4971', 'living_thing', 'wm4952', 'wm4977', 'wm5022', 'wm4983', 'wm4957', 'wm4986', 'wm4992', 'wm5023', 'wm4948', 'wm5005', 'wm4991', 'wm5031', 'wm4978', 'wm5021', 'wm4980', 'wm4989', 'user', 'prp', 'unknown_verb', 'wm5007', 'wm4968', 'wm4990', 'wm5041', 'wm5012', 'wm5017', 'wm4997', 'wm4996', 'wm4979', 'wm5010', 'wm4947', 'now', 'unknown_other', 'wm4998', 'unknown_adj', 'wm5034', 'wm4984'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm4875', 'wm4878')]
CURRENT USER CONCEPTS: {'wm5042', 'wm4972', 'wm4946', 'wm4963', 'unknown_noun', 'past', 'but', 'wm4973', 'wm5030', 'wm4985', 'wm5002', 'wm4974', 'wm4951', 'wm5027', 'school', 'wm4971', 'living_thing', 'wm4952', 'wm4977', 'wm5022', 'wm4983', 'wm4957', 'wm4986', 'wm4992', 'wm5023', 'wm4948', 'wm5005', 'wm4991', 'wm5031', 'wm4978', 'wm5021', 'wm4980', 'wm4989', 'user', 'prp', 'unknown_verb', 'wm5007', 'wm4968', 'wm4990', 'wm5041', 'wm5012', 'wm5017', 'wm4997', 'wm4996', 'wm4979', 'wm5010', 'wm4947', 'now', 'unknown_other', 'wm4998', 'unknown_adj', 'wm5034', 'wm4984'}
FRAGMENT REQUEST MERGES: []

React + Present Options:
	Which football team is your favorite? My favorite is the Texans (s: 0.30, pr: 1.00)
	Since you like basketball, what's your favorite team? Mine is the L A Lakers. It's too bad they got knocked out first round of the playoffs. (s: 0.26, pr: 1.00)


0.000072: next turn
0.000022: sentence caser
0.129306: elit
0.505395: parse2logic
  0.005653: facts graph types
  0.008482: convert facts graph
    0.001681: to digraph
    0.006710: flatten types (305 concepts)
    0.000077: quantities
  0.000021: process dynamic rules
  0.458708: match
    0.458623: match
      0.001019: querygen
      0.095875: creating graph tensor (419 nodes, 1470 edges)
        0.009008: setup
        0.067474: key tensor
        0.002434: target tensor
        0.016510: edge tensor
      0.000087: initializing solutions matrix
      0.361437: loop
      0.000014: postprocessing (MAX MEMORY: 0.101GB)
  0.006718: postprocess solutions
0.000073: multiword mentions
0.000012: ner mentions
0.015172: mention bridge
0.021991: merge bridge
0.037665: knowledge pull
0.013376: reference id
0.333618: reference infer
  0.029538: facts graph types
  0.030770: convert facts graph
    0.004442: to digraph
    0.026098: flatten types (812 concepts)
    0.000210: quantities
  0.006593: process dynamic rules
  0.263915: match
    0.263838: match
      0.008443: querygen
      0.202497: creating graph tensor (1909 nodes, 6949 edges)
        0.039836: setup
        0.112005: key tensor
        0.008711: target tensor
        0.039834: edge tensor
      0.000089: initializing solutions matrix
      0.052574: loop
      0.000032: postprocessing (MAX MEMORY: 2.190GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.054103: fragment resolution
  0.000562: identify previous emora questions
  0.001273: find answer
  0.052249: sal
0.647489: dialogue infer
  0.029729: facts graph types
  0.215083: convert facts graph
    0.003919: to digraph
    0.210934: flatten types (812 concepts)
    0.000212: quantities
  0.000027: process dynamic rules
  0.395108: match
    0.395024: match
      0.006533: querygen
      0.214409: creating graph tensor (2030 nodes, 7519 edges)
        0.043918: setup
        0.112977: key tensor
        0.009613: target tensor
        0.045533: edge tensor
      0.000089: initializing solutions matrix
      0.173759: loop
      0.000015: postprocessing (MAX MEMORY: 2.551GB)
  0.004452: postprocess solutions
0.059432: apply inferences
  0.005525: apply
  0.000657: update types
  0.000209: operate
  0.053019: sal
0.012467: reference id 2
0.333889: reference infer 2
  0.029860: facts graph types
  0.029938: convert facts graph
    0.004097: to digraph
    0.025614: flatten types (812 concepts)
    0.000207: quantities
  0.007061: process dynamic rules
  0.264204: match
    0.264127: match
      0.007794: querygen
      0.203488: creating graph tensor (1909 nodes, 6949 edges)
        0.040903: setup
        0.111427: key tensor
        0.008992: target tensor
        0.039910: edge tensor
      0.000089: initializing solutions matrix
      0.052514: loop
      0.000032: postprocessing (MAX MEMORY: 2.190GB)
  0.000008: postprocess solutions
0.000014: reference resolution 2
0.054027: fragment resolution 2
  0.000509: identify previous emora questions
  0.001231: find answer
  0.052269: sal
0.458752: dialogue infer 2
  0.029794: facts graph types
  0.031662: convert facts graph
    0.004143: to digraph
    0.027308: flatten types (812 concepts)
    0.000194: quantities
  0.000027: process dynamic rules
  0.389649: match
    0.389570: match
      0.005589: querygen
      0.210523: creating graph tensor (2030 nodes, 7519 edges)
        0.043768: setup
        0.109480: key tensor
        0.009827: target tensor
        0.044966: edge tensor
      0.000091: initializing solutions matrix
      0.173129: loop
      0.000015: postprocessing (MAX MEMORY: 2.551GB)
  0.004456: postprocess solutions
0.059693: apply inferences 2
  0.005535: apply
  0.000656: update types
  0.000232: operate
  0.053251: sal
0.009170: prepare template nlg
0.510218: template infer
  0.029839: facts graph types
  0.032040: convert facts graph
    0.004112: to digraph
    0.027718: flatten types (812 concepts)
    0.000196: quantities
  0.000027: process dynamic rules
  0.443618: match
    0.443536: match
      0.005231: querygen
      0.261851: creating graph tensor (2030 nodes, 7519 edges)
        0.044648: setup
        0.160450: key tensor
        0.009878: target tensor
        0.044250: edge tensor
      0.000090: initializing solutions matrix
      0.176067: loop
      0.000019: postprocessing (MAX MEMORY: 2.551GB)
  0.001578: postprocess solutions
0.000348: template fillers
0.000017: response sel
0.000127: response exp
0.000013: response rules
0.299632: response assembler
  0.000015: response assembly
  0.052952: update sal
  0.002145: decay sal
  0.244504: prune
    0.000013: setup
    0.000817: select keep
    0.000109: delete old spans
    0.228379: setup essentials
    0.006430: identify essentials
    0.008314: remove not keep

[3.56 s] Which football team is your favorite? My favorite is the Texans

User: my dad watches the detroit lions but i dont have a favorite
my dad watches the detroit lions but i dont have a favorite
ARG REQUESTS: [('emora', 'request', 'wm4862', 'wm4865')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm5219', 'Detroit_Lions', 'wm5227', 'unknown_noun', 'wm5205', 'but', 'wm5206', 'wm5228', 'wm5193', 'wm5210', 'wm5200', 'wm5189', 'favorite', 'wm5222', 'user', 'prp', 'wm5199', 'wm5204', 'wm5209', 'wm5213', 'now', 'wm5215'}
FRAGMENT REQUEST MERGES: [('Detroit_Lions', 'wm4862')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Since you like basketball, what's your favorite team? Mine is the L A Lakers. It's too bad they got knocked out first round of the playoffs. (s: 0.32, pr: 1.00)


0.000073: next turn
0.000019: sentence caser
0.116095: elit
0.378766: parse2logic
  0.004813: facts graph types
  0.007589: convert facts graph
    0.001845: to digraph
    0.005659: flatten types (263 concepts)
    0.000072: quantities
  0.000021: process dynamic rules
  0.342264: match
    0.342185: match
      0.000906: querygen
      0.031924: creating graph tensor (352 nodes, 1232 edges)
        0.007329: setup
        0.010415: key tensor
        0.001780: target tensor
        0.012084: edge tensor
      0.000085: initializing solutions matrix
      0.308926: loop
      0.000019: postprocessing (MAX MEMORY: 0.071GB)
  0.005174: postprocess solutions
0.000160: multiword mentions
0.000117: ner mentions
0.007326: mention bridge
0.018905: merge bridge
0.033528: knowledge pull
0.008102: reference id
0.233423: reference infer
  0.025044: facts graph types
  0.026339: convert facts graph
    0.003429: to digraph
    0.022711: flatten types (713 concepts)
    0.000179: quantities
  0.005721: process dynamic rules
  0.174065: match
    0.173990: match
      0.006918: querygen
      0.121896: creating graph tensor (1628 nodes, 5934 edges)
        0.035609: setup
        0.044622: key tensor
        0.007519: target tensor
        0.032297: edge tensor
      0.000088: initializing solutions matrix
      0.044858: loop
      0.000031: postprocessing (MAX MEMORY: 1.597GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.072950: fragment resolution
  0.000486: identify previous emora questions
  0.026346: find answer
  0.046100: sal
0.355490: dialogue infer
  0.024209: facts graph types
  0.027315: convert facts graph
    0.003306: to digraph
    0.023806: flatten types (711 concepts)
    0.000188: quantities
  0.000027: process dynamic rules
  0.296872: match
    0.296796: match
      0.004294: querygen
      0.134631: creating graph tensor (1728 nodes, 6400 edges)
        0.037979: setup
        0.052521: key tensor
        0.007838: target tensor
        0.034283: edge tensor
      0.000088: initializing solutions matrix
      0.157560: loop
      0.000015: postprocessing (MAX MEMORY: 1.849GB)
  0.004523: postprocess solutions
0.055061: apply inferences
  0.006682: apply
  0.000617: update types
  0.000199: operate
  0.047529: sal
0.007274: reference id 2
0.322117: reference infer 2
  0.024615: facts graph types
  0.026483: convert facts graph
    0.003315: to digraph
    0.022969: flatten types (718 concepts)
    0.000180: quantities
  0.005625: process dynamic rules
  0.262926: match
    0.262849: match
      0.006739: querygen
      0.183634: creating graph tensor (1658 nodes, 6055 edges)
        0.035290: setup
        0.105677: key tensor
        0.007654: target tensor
        0.033000: edge tensor
      0.000091: initializing solutions matrix
      0.072140: loop
      0.000032: postprocessing (MAX MEMORY: 1.661GB)
  0.000137: postprocess solutions
0.000014: reference resolution 2
0.047568: fragment resolution 2
  0.000450: identify previous emora questions
  0.047101: sal
0.600148: dialogue infer 2
  0.024603: facts graph types
  0.028030: convert facts graph
    0.003402: to digraph
    0.024437: flatten types (718 concepts)
    0.000176: quantities
  0.000026: process dynamic rules
  0.540270: match
    0.540193: match
      0.004378: querygen
      0.366369: creating graph tensor (1762 nodes, 6533 edges)
        0.037857: setup
        0.276643: key tensor
        0.008850: target tensor
        0.040789: edge tensor
      0.000090: initializing solutions matrix
      0.169114: loop
      0.000015: postprocessing (MAX MEMORY: 1.926GB)
  0.004574: postprocess solutions
0.056867: apply inferences 2
  0.006754: apply
  0.000768: update types
  0.000390: operate
  0.048933: sal
0.008541: prepare template nlg
0.515641: template infer
  0.025156: facts graph types
  0.028603: convert facts graph
    0.003472: to digraph
    0.024935: flatten types (726 concepts)
    0.000179: quantities
  0.000026: process dynamic rules
  0.457318: match
    0.457235: match
      0.005008: querygen
      0.236472: creating graph tensor (1778 nodes, 6584 edges)
        0.038741: setup
        0.149525: key tensor
        0.008684: target tensor
        0.037359: edge tensor
      0.000091: initializing solutions matrix
      0.215361: loop
      0.000017: postprocessing (MAX MEMORY: 1.956GB)
  0.001793: postprocess solutions
0.000388: template fillers
0.000018: response sel
0.000124: response exp
0.000014: response rules
0.106600: response assembler
  0.000016: response assembly
  0.048001: update sal
  0.001886: decay sal
  0.056680: prune
    0.000012: setup
    0.000756: select keep
    0.000112: delete old spans
    0.044292: setup essentials
    0.006833: identify essentials
    0.004287: remove not keep

[2.95 s] Since you like basketball, what's your favorite team? Mine is the L A Lakers. It's too bad they got knocked out first round of the playoffs.

User: i dont know
i dont know
ARG REQUESTS: [('emora', 'request', 'wm4876', 'wm4880')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm5325', 'wm5320', 'wm5317', 'wm5327', 'user', 'now', 'prp'}
FRAGMENT REQUEST MERGES: []
ARG REQUESTS: [('emora', 'request', 'wm4876', 'wm4880')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm5325', 'wm5320', 'wm5317', 'wm5327', 'user', 'now', 'prp'}
FRAGMENT REQUEST MERGES: []

0.000077: next turn
0.000018: sentence caser
0.111747: elit
0.243996: parse2logic
  0.001529: facts graph types
  0.002632: convert facts graph
    0.000563: to digraph
    0.002017: flatten types (100 concepts)
    0.000038: quantities
  0.000021: process dynamic rules
  0.231288: match
    0.231209: match
      0.000339: querygen
      0.030369: creating graph tensor (131 nodes, 433 edges)
        0.002424: setup
        0.012402: key tensor
        0.000845: target tensor
        0.014552: edge tensor
      0.000080: initializing solutions matrix
      0.200104: loop
      0.000018: postprocessing (MAX MEMORY: 0.010GB)
  0.001429: postprocess solutions
0.000040: multiword mentions
0.000012: ner mentions
0.002736: mention bridge
0.009979: merge bridge
0.029703: knowledge pull
0.008626: reference id
0.193549: reference infer
  0.021374: facts graph types
  0.024513: convert facts graph
    0.003332: to digraph
    0.020995: flatten types (658 concepts)
    0.000168: quantities
  0.005216: process dynamic rules
  0.140303: match
    0.140229: match
      0.006122: querygen
      0.093021: creating graph tensor (1472 nodes, 5378 edges)
        0.032255: setup
        0.020499: key tensor
        0.007132: target tensor
        0.031560: edge tensor
      0.000087: initializing solutions matrix
      0.040770: loop
      0.000029: postprocessing (MAX MEMORY: 1.311GB)
  0.000110: postprocess solutions
0.000112: reference resolution
0.065903: fragment resolution
  0.000410: identify previous emora questions
  0.022023: find answer
  0.043452: sal
0.310103: dialogue infer
  0.021323: facts graph types
  0.024923: convert facts graph
    0.003367: to digraph
    0.021374: flatten types (658 concepts)
    0.000167: quantities
  0.000025: process dynamic rules
  0.256954: match
    0.256881: match
      0.004440: querygen
      0.116394: creating graph tensor (1567 nodes, 5805 edges)
        0.034013: setup
        0.040767: key tensor
        0.007373: target tensor
        0.032515: edge tensor
      0.000090: initializing solutions matrix
      0.135736: loop
      0.000014: postprocessing (MAX MEMORY: 1.521GB)
  0.004566: postprocess solutions
0.052412: apply inferences
  0.007672: apply
  0.000562: update types
  0.000195: operate
  0.043963: sal
0.008854: reference id 2
0.209047: reference infer 2
  0.021825: facts graph types
  0.023654: convert facts graph
    0.003404: to digraph
    0.020063: flatten types (666 concepts)
    0.000167: quantities
  0.005490: process dynamic rules
  0.156901: match
    0.156843: match
      0.006579: querygen
      0.103930: creating graph tensor (1504 nodes, 5498 edges)
        0.031198: setup
        0.036962: key tensor
        0.006846: target tensor
        0.027730: edge tensor
      0.000084: initializing solutions matrix
      0.046044: loop
      0.000027: postprocessing (MAX MEMORY: 1.370GB)
  0.000085: postprocess solutions
0.000095: reference resolution 2
0.066199: fragment resolution 2
  0.000399: identify previous emora questions
  0.022192: find answer
  0.043590: sal
0.592827: dialogue infer 2
  0.021526: facts graph types
  0.024503: convert facts graph
    0.003165: to digraph
    0.021162: flatten types (666 concepts)
    0.000163: quantities
  0.000021: process dynamic rules
  0.540006: match
    0.539949: match
      0.003695: querygen
      0.373961: creating graph tensor (1605 nodes, 5953 edges)
        0.207263: setup
        0.122960: key tensor
        0.007930: target tensor
        0.034303: edge tensor
      0.000089: initializing solutions matrix
      0.161995: loop
      0.000014: postprocessing (MAX MEMORY: 1.599GB)
  0.004600: postprocess solutions
0.056165: apply inferences 2
  0.008893: apply
  0.000766: update types
  0.000414: operate
  0.046072: sal
0.007889: prepare template nlg
0.295909: template infer
  0.022895: facts graph types
  0.025568: convert facts graph
    0.003329: to digraph
    0.022057: flatten types (682 concepts)
    0.000167: quantities
  0.000021: process dynamic rules
  0.244374: match
    0.244312: match
      0.004552: querygen
      0.111898: creating graph tensor (1662 nodes, 6166 edges)
        0.034771: setup
        0.025840: key tensor
        0.007424: target tensor
        0.042489: edge tensor
      0.000085: initializing solutions matrix
      0.127562: loop
      0.000014: postprocessing (MAX MEMORY: 1.715GB)
  0.001616: postprocess solutions
0.000364: template fillers
0.000013: response sel
0.000370: response exp
0.000015: response rules
0.101187: response assembler
  0.000015: response assembly
  0.046006: update sal
  0.001762: decay sal
  0.053390: prune
    0.000011: setup
    0.000715: select keep
    0.000114: delete old spans
    0.040886: setup essentials
    0.007087: identify essentials
    0.004220: remove not keep

[2.37 s] You know, I was actually just wondering, do you like to travel ?

User: yes i want to travel so bad but you are fucking up my plans
yes i want to travel so bad but you are fucking up my plans
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm5379', 'wm5380')]
CURRENT USER CONCEPTS: {'emora', 'wm5405', 'wm5437', 'wm5423', 'wm5445', 'wm5412', 'now', 'but', 'wm5387', 'plan', 'wm5404', 'predicate', 'wm5395', 'wm5427', 'wm5432', 'wm5391', 'wm5409', 'wm5447', 'bad', 'wm5394', 'wm5389', 'wm5431', 'wm5442', 'wm5435', 'wm5418', 'user', 'wm5436', 'wm5417', 'prp', 'unknown_verb', 'wm5390', 'wm5451', 'wm5416', 'wm5446', 'unknown_other', 'wm5430'}
FRAGMENT REQUEST MERGES: [('wm5435', 'wm5379')]
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:
	Do you like the trip ? I have actually traveled to many places . I like most of my trips , but sometimes unpleasant things still happen . The virtual world can be unpredictable . (s: 0.30, pr: 0.10)
	How is your trip ? I hope everything goes well for you . (s: 0.28, pr: 0.10)
	What do you like to do for trips ? I love going to beaches for my vacations . (s: 0.18, pr: 0.50)
	What country have you visited ? I love trips too. Traveling inspires me . (s: 0.19, pr: 1.00)


0.000073: next turn
0.000019: sentence caser
0.119706: elit
0.372890: parse2logic
  0.004826: facts graph types
  0.007023: convert facts graph
    0.001392: to digraph
    0.005545: flatten types (260 concepts)
    0.000072: quantities
  0.000021: process dynamic rules
  0.335496: match
    0.335416: match
      0.000782: querygen
      0.029623: creating graph tensor (342 nodes, 1189 edges)
        0.007208: setup
        0.008742: key tensor
        0.001765: target tensor
        0.011613: edge tensor
      0.000085: initializing solutions matrix
      0.304587: loop
      0.000017: postprocessing (MAX MEMORY: 0.067GB)
  0.005336: postprocess solutions
0.000067: multiword mentions
0.000013: ner mentions
0.009943: mention bridge
0.024407: merge bridge
0.035680: knowledge pull
0.012365: reference id
0.389482: reference infer
  0.026208: facts graph types
  0.028009: convert facts graph
    0.003550: to digraph
    0.024256: flatten types (736 concepts)
    0.000184: quantities
  0.005931: process dynamic rules
  0.326543: match
    0.326466: match
      0.007929: querygen
      0.261554: creating graph tensor (1734 nodes, 6346 edges)
        0.037014: setup
        0.174219: key tensor
        0.008381: target tensor
        0.039874: edge tensor
      0.000090: initializing solutions matrix
      0.056650: loop
      0.000031: postprocessing (MAX MEMORY: 1.824GB)
  0.000130: postprocess solutions
0.000113: reference resolution
0.051265: fragment resolution
  0.000489: identify previous emora questions
  0.002133: find answer
  0.048623: sal
0.358075: dialogue infer
  0.025795: facts graph types
  0.028956: convert facts graph
    0.003476: to digraph
    0.025283: flatten types (733 concepts)
    0.000183: quantities
  0.000026: process dynamic rules
  0.295632: match
    0.295555: match
      0.004732: querygen
      0.133723: creating graph tensor (1841 nodes, 6839 edges)
        0.039965: setup
        0.043208: key tensor
        0.008601: target tensor
        0.039781: edge tensor
      0.000090: initializing solutions matrix
      0.156789: loop
      0.000015: postprocessing (MAX MEMORY: 2.109GB)
  0.004961: postprocess solutions
0.062208: apply inferences
  0.009362: apply
  0.001672: update types
  0.000322: operate
  0.050830: sal
0.012610: reference id 2
0.480562: reference infer 2
  0.027478: facts graph types
  0.211715: convert facts graph
    0.003952: to digraph
    0.207536: flatten types (770 concepts)
    0.000204: quantities
  0.006417: process dynamic rules
  0.232085: match
    0.232002: match
      0.008683: querygen
      0.173978: creating graph tensor (1809 nodes, 6625 edges)
        0.039135: setup
        0.084910: key tensor
        0.008363: target tensor
        0.039438: edge tensor
      0.000087: initializing solutions matrix
      0.049019: loop
      0.000032: postprocessing (MAX MEMORY: 1.987GB)
  0.000130: postprocess solutions
0.000114: reference resolution 2
0.051926: fragment resolution 2
  0.000498: identify previous emora questions
  0.051412: sal
1.333650: dialogue infer 2
  0.027432: facts graph types
  0.030324: convert facts graph
    0.003617: to digraph
    0.026506: flatten types (770 concepts)
    0.000186: quantities
  0.000025: process dynamic rules
  1.267375: match
    1.267296: match
      0.005370: querygen
      0.825258: creating graph tensor (1935 nodes, 7183 edges)
        0.041680: setup
        0.727885: key tensor
        0.009685: target tensor
        0.043416: edge tensor
      0.000094: initializing solutions matrix
      0.436335: loop
      0.000015: postprocessing (MAX MEMORY: 2.326GB)
  0.005419: postprocess solutions
0.064550: apply inferences 2
  0.011173: apply
  0.000811: update types
  0.000243: operate
  0.052303: sal
0.009108: prepare template nlg
0.821724: template infer
  0.028599: facts graph types
  0.031418: convert facts graph
    0.003857: to digraph
    0.027355: flatten types (795 concepts)
    0.000191: quantities
  0.000024: process dynamic rules
  0.755868: match
    0.755790: match
      0.006008: querygen
      0.450044: creating graph tensor (2012 nodes, 7476 edges)
        0.043210: setup
        0.350594: key tensor
        0.009576: target tensor
        0.044147: edge tensor
      0.000093: initializing solutions matrix
      0.299306: loop
      0.000019: postprocessing (MAX MEMORY: 2.519GB)
  0.002765: postprocess solutions
0.002381: template fillers
0.000015: response sel
0.000263: response exp
0.000015: response rules
0.123781: response assembler
  0.000015: response assembly
  0.053190: update sal
  0.002104: decay sal
  0.068457: prune
    0.000019: setup
    0.000837: select keep
    0.000124: delete old spans
    0.051776: setup essentials
    0.007931: identify essentials
    0.007161: remove not keep

[4.34 s] Okay . What country have you visited ? I love trips too. Traveling inspires me .

User: i have visited japan china tawain russia mexico england paris france
i have visited japan china tawain russia mexico england paris france
ARG REQUESTS: [('emora', 'request', 'wm5555', 'wm5558')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm5636', 'unknown_noun', 'past', 'wm5615', 'wm5654', 'wm5601', 'wm5625', 'wm5655', 'wm5602', 'wm5630', 'wm5607', 'gpe_ner', 'wm5646', 'wm5653', 'have', 'wm5619', 'wm5628', 'wm5603', 'wm5640', '"mexico"', 'wm5629', 'china', 'wm5620', 'user', 'prp', 'france', 'wm5633', 'wm5606', 'wm5645'}
FRAGMENT REQUEST MERGES: [('china', 'wm5555')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Oh , wonderful ! One of my friends traveled to China before the pandemic . She was able to see giant pandas and try the hot pot in Szechuan . She said it was a lot of fun . (s: 0.11, pr: 1.00)
	Oh , wonderful ! One of my friends traveled to China before the pandemic . She was able to see giant pandas and try the hot pot in Szechuan . She said it was a lot of fun . (s: 0.13, pr: 1.00)


Present Options:
	What country would you like to visit in the future ? (s: 0.28, pr: 0.10)
	How is your trip ? I hope everything goes well for you . (s: 0.26, pr: 0.10)
	What do you like to do for trips ? I love going to beaches for my vacations . (s: 0.18, pr: 0.50)
	I have been to canada once and really liked it because of the beautiful sunset I saw . Have you ever been there before ? (s: 0.33, pr: 0.50)
	I have been to canada once and really liked it because of the beautiful sunset I saw . Have you ever been there before ? (s: 0.33, pr: 0.50)
	I have been to canada once and really liked it because of the beautiful sunset I saw . Have you ever been there before ? (s: 0.33, pr: 0.50)
	I have been to canada once and really liked it because of the beautiful sunset I saw . Have you ever been there before ? (s: 0.33, pr: 0.50)


0.000072: next turn
0.000020: sentence caser
0.116437: elit
1.233529: parse2logic
  0.003278: facts graph types
  0.005237: convert facts graph
    0.000996: to digraph
    0.004172: flatten types (191 concepts)
    0.000056: quantities
  0.000021: process dynamic rules
  1.206333: match
    1.206250: match
      0.000640: querygen
      0.436911: creating graph tensor (269 nodes, 937 edges)
        0.005185: setup
        0.417789: key tensor
        0.002695: target tensor
        0.010998: edge tensor
      0.000087: initializing solutions matrix
      0.768274: loop
      0.000018: postprocessing (MAX MEMORY: 0.042GB)
  0.002780: postprocess solutions
0.000068: multiword mentions
0.000235: ner mentions
0.009480: mention bridge
0.018964: merge bridge
0.043050: knowledge pull
0.014343: reference id
0.615155: reference infer
  0.027310: facts graph types
  0.029003: convert facts graph
    0.004361: to digraph
    0.024420: flatten types (781 concepts)
    0.000202: quantities
  0.006145: process dynamic rules
  0.549863: match
    0.549785: match
      0.007005: querygen
      0.489049: creating graph tensor (1791 nodes, 6548 edges)
        0.230359: setup
        0.210123: key tensor
        0.008818: target tensor
        0.037460: edge tensor
      0.000089: initializing solutions matrix
      0.053380: loop
      0.000032: postprocessing (MAX MEMORY: 1.942GB)
  0.000138: postprocess solutions
0.000117: reference resolution
0.082543: fragment resolution
  0.000469: identify previous emora questions
  0.029709: find answer
  0.052344: sal
0.371408: dialogue infer
  0.027190: facts graph types
  0.030216: convert facts graph
    0.003701: to digraph
    0.026310: flatten types (779 concepts)
    0.000191: quantities
  0.000027: process dynamic rules
  0.305364: match
    0.305285: match
      0.005400: querygen
      0.143942: creating graph tensor (1887 nodes, 6976 edges)
        0.040722: setup
        0.053128: key tensor
        0.008697: target tensor
        0.039215: edge tensor
      0.000091: initializing solutions matrix
      0.155608: loop
      0.000016: postprocessing (MAX MEMORY: 2.197GB)
  0.005539: postprocess solutions
0.072621: apply inferences
  0.012031: apply
  0.003894: update types
  0.000237: operate
  0.056434: sal
0.018208: reference id 2
0.359809: reference infer 2
  0.031125: facts graph types
  0.032337: convert facts graph
    0.004118: to digraph
    0.027993: flatten types (850 concepts)
    0.000205: quantities
  0.006051: process dynamic rules
  0.286922: match
    0.286839: match
      0.008859: querygen
      0.234079: creating graph tensor (2000 nodes, 7340 edges)
        0.043200: setup
        0.136874: key tensor
        0.009447: target tensor
        0.042097: edge tensor
      0.000090: initializing solutions matrix
      0.043579: loop
      0.000030: postprocessing (MAX MEMORY: 2.437GB)
  0.000304: postprocess solutions
0.002753: reference resolution 2
0.056953: fragment resolution 2
  0.000520: identify previous emora questions
  0.056417: sal
0.557271: dialogue infer 2
  0.031015: facts graph types
  0.032940: convert facts graph
    0.004126: to digraph
    0.028598: flatten types (847 concepts)
    0.000204: quantities
  0.000026: process dynamic rules
  0.484146: match
    0.484066: match
      0.005967: querygen
      0.254542: creating graph tensor (2101 nodes, 7783 edges)
        0.044702: setup
        0.143370: key tensor
        0.009867: target tensor
        0.053996: edge tensor
      0.000107: initializing solutions matrix
      0.223216: loop
      0.000015: postprocessing (MAX MEMORY: 2.733GB)
  0.005868: postprocess solutions
0.073804: apply inferences 2
  0.013474: apply
  0.000827: update types
  0.000244: operate
  0.059240: sal
0.011157: prepare template nlg
1.125461: template infer
  0.033368: facts graph types
  0.220239: convert facts graph
    0.004587: to digraph
    0.215390: flatten types (884 concepts)
    0.000243: quantities
  0.000027: process dynamic rules
  0.864755: match
    0.864655: match
      0.007463: querygen
      0.489210: creating graph tensor (2240 nodes, 8322 edges)
        0.048944: setup
        0.357145: key tensor
        0.010934: target tensor
        0.069309: edge tensor
      0.000109: initializing solutions matrix
      0.367491: loop
      0.000021: postprocessing (MAX MEMORY: 3.121GB)
  0.003412: postprocess solutions
0.003186: template fillers
0.000015: response sel
0.000345: response exp
0.000014: response rules
0.147143: response assembler
  0.000015: response assembly
  0.061104: update sal
  0.002380: decay sal
  0.083629: prune
    0.000014: setup
    0.000935: select keep
    0.000137: delete old spans
    0.059472: setup essentials
    0.006277: identify essentials
    0.016306: remove not keep

[4.94 s] Oh , wonderful ! One of my friends traveled to China before the pandemic . She was able to see giant pandas and try the hot pot in Szechuan . She said it was a lot of fun .

User: have you been to china
have you been to china
ARG REQUESTS: []
TRUTH REQUESTS: []
ARG REQUESTS: []
TRUTH REQUESTS: []

Present Options:


0.000073: next turn
0.000017: sentence caser
0.110429: elit
0.234810: parse2logic
  0.001879: facts graph types
  0.003015: convert facts graph
    0.000614: to digraph
    0.002348: flatten types (116 concepts)
    0.000041: quantities
  0.000021: process dynamic rules
  0.220818: match
    0.220741: match
      0.000354: querygen
      0.021730: creating graph tensor (148 nodes, 490 edges)
        0.002815: setup
        0.010568: key tensor
        0.001527: target tensor
        0.006678: edge tensor
      0.000082: initializing solutions matrix
      0.198276: loop
      0.000017: postprocessing (MAX MEMORY: 0.012GB)
  0.001298: postprocess solutions
0.000049: multiword mentions
0.000142: ner mentions
0.002396: mention bridge
0.003177: merge bridge
0.029027: knowledge pull
0.005483: reference id
0.273995: reference infer
  0.015515: facts graph types
  0.020835: convert facts graph
    0.002883: to digraph
    0.017797: flatten types (537 concepts)
    0.000139: quantities
  0.001430: process dynamic rules
  0.234381: match
    0.234312: match
      0.004256: querygen
      0.200675: creating graph tensor (1188 nodes, 4358 edges)
        0.024969: setup
        0.139994: key tensor
        0.006160: target tensor
        0.028171: edge tensor
      0.000087: initializing solutions matrix
      0.029074: loop
      0.000026: postprocessing (MAX MEMORY: 0.861GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.036742: fragment resolution
  0.000343: identify previous emora questions
  0.036384: sal
1.434837: dialogue infer
  0.015433: facts graph types
  0.019875: convert facts graph
    0.002754: to digraph
    0.016967: flatten types (537 concepts)
    0.000140: quantities
  0.000026: process dynamic rules
  1.395400: match
    1.395324: match
      0.003020: querygen
      0.870870: creating graph tensor (1215 nodes, 4478 edges)
        0.025336: setup
        0.812194: key tensor
        0.007083: target tensor
        0.024693: edge tensor
      0.000090: initializing solutions matrix
      0.520903: loop
      0.000023: postprocessing (MAX MEMORY: 0.907GB)
  0.002147: postprocess solutions
0.044916: apply inferences
  0.005648: apply
  0.000629: update types
  0.000178: operate
  0.038441: sal
0.005711: reference id 2
0.249598: reference infer 2
  0.016455: facts graph types
  0.020606: convert facts graph
    0.002872: to digraph
    0.017580: flatten types (560 concepts)
    0.000138: quantities
  0.001481: process dynamic rules
  0.209218: match
    0.209147: match
      0.004309: querygen
      0.181585: creating graph tensor (1272 nodes, 4684 edges)
        0.026903: setup
        0.122177: key tensor
        0.006748: target tensor
        0.024260: edge tensor
      0.000103: initializing solutions matrix
      0.022936: loop
      0.000025: postprocessing (MAX MEMORY: 0.993GB)
  0.000008: postprocess solutions
0.000013: reference resolution 2
0.038267: fragment resolution 2
  0.000350: identify previous emora questions
  0.037900: sal
0.713149: dialogue infer 2
  0.017565: facts graph types
  0.021018: convert facts graph
    0.002946: to digraph
    0.017920: flatten types (560 concepts)
    0.000138: quantities
  0.000026: process dynamic rules
  0.670242: match
    0.670171: match
      0.003095: querygen
      0.350207: creating graph tensor (1299 nodes, 4804 edges)
        0.026911: setup
        0.288033: key tensor
        0.007000: target tensor
        0.026638: edge tensor
      0.000090: initializing solutions matrix
      0.316504: loop
      0.000018: postprocessing (MAX MEMORY: 1.043GB)
  0.002166: postprocess solutions
0.047089: apply inferences 2
  0.006406: apply
  0.000643: update types
  0.000195: operate
  0.039826: sal
0.008219: prepare template nlg
0.832677: template infer
  0.017431: facts graph types
  0.022604: convert facts graph
    0.002881: to digraph
    0.019561: flatten types (583 concepts)
    0.000148: quantities
  0.000025: process dynamic rules
  0.789047: match
    0.788970: match
      0.003585: querygen
      0.456976: creating graph tensor (1383 nodes, 5130 edges)
        0.214015: setup
        0.200614: key tensor
        0.007365: target tensor
        0.033157: edge tensor
      0.000090: initializing solutions matrix
      0.327950: loop
      0.000020: postprocessing (MAX MEMORY: 1.188GB)
  0.001525: postprocess solutions
0.001567: template fillers
0.000015: response sel
0.000432: response exp
0.000015: response rules
0.083303: response assembler
  0.000015: response assembly
  0.041121: update sal
  0.001570: decay sal
  0.040582: prune
    0.000011: setup
    0.000655: select keep
    0.000129: delete old spans
    0.029037: setup essentials
    0.006349: identify essentials
    0.004099: remove not keep

[4.16 s] You know , I have always felt a connection to video games since, they're of a virtual world like me . Do you like them too ?

User: yes
yes
ARG REQUESTS: []
TRUTH REQUESTS: [('emora', 'request_truth', 'wm5920', 'wm5922')]
CURRENT USER CONCEPTS: {'wm5930', 'wm5928', 'wm5929', 'user', 'predicate'}
FRAGMENT REQUEST MERGES: [('wm5928', 'wm5920')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	Oh, awesome, that makes us two peas in a pod! What games do you like? (s: 0.55, pr: 0.50)


Present Options:


0.000079: next turn
0.000017: sentence caser
0.108588: elit
0.046615: parse2logic
  0.000359: facts graph types
  0.000852: convert facts graph
    0.000360: to digraph
    0.000460: flatten types (26 concepts)
    0.000019: quantities
  0.000021: process dynamic rules
  0.042728: match
    0.042646: match
      0.000091: querygen
      0.006845: creating graph tensor (30 nodes, 82 edges)
        0.000530: setup
        0.002848: key tensor
        0.000385: target tensor
        0.003024: edge tensor
      0.000072: initializing solutions matrix
      0.035413: loop
      0.000014: postprocessing (MAX MEMORY: 0.001GB)
  0.000465: postprocess solutions
0.000035: multiword mentions
0.000012: ner mentions
0.001582: mention bridge
0.003428: merge bridge
0.027491: knowledge pull
0.006243: reference id
0.973203: reference infer
  0.014887: facts graph types
  0.019773: convert facts graph
    0.003134: to digraph
    0.016491: flatten types (525 concepts)
    0.000132: quantities
  0.001920: process dynamic rules
  0.934803: match
    0.934729: match
      0.004449: querygen
      0.830204: creating graph tensor (1154 nodes, 4220 edges)
        0.024614: setup
        0.768930: key tensor
        0.006500: target tensor
        0.028647: edge tensor
      0.000093: initializing solutions matrix
      0.099705: loop
      0.000029: postprocessing (MAX MEMORY: 0.808GB)
  0.000008: postprocess solutions
0.000015: reference resolution
0.052818: fragment resolution
  0.000403: identify previous emora questions
  0.016815: find answer
  0.035583: sal
0.445245: dialogue infer
  0.014852: facts graph types
  0.019337: convert facts graph
    0.002720: to digraph
    0.016471: flatten types (522 concepts)
    0.000133: quantities
  0.000026: process dynamic rules
  0.406464: match
    0.406387: match
      0.002870: querygen
      0.241181: creating graph tensor (1176 nodes, 4331 edges)
        0.025136: setup
        0.179350: key tensor
        0.006120: target tensor
        0.029069: edge tensor
      0.000088: initializing solutions matrix
      0.161962: loop
      0.000016: postprocessing (MAX MEMORY: 0.849GB)
  0.002704: postprocess solutions
0.042466: apply inferences
  0.005347: apply
  0.000807: update types
  0.000422: operate
  0.035869: sal
0.008047: reference id 2
1.002364: reference infer 2
  0.015072: facts graph types
  0.018871: convert facts graph
    0.002530: to digraph
    0.016192: flatten types (530 concepts)
    0.000132: quantities
  0.002057: process dynamic rules
  0.964623: match
    0.964552: match
      0.004855: querygen
      0.935746: creating graph tensor (1159 nodes, 4228 edges)
        0.024079: setup
        0.879858: key tensor
        0.006819: target tensor
        0.023526: edge tensor
      0.000091: initializing solutions matrix
      0.023624: loop
      0.000029: postprocessing (MAX MEMORY: 0.811GB)
  0.000009: postprocess solutions
0.000013: reference resolution 2
0.036312: fragment resolution 2
  0.000365: identify previous emora questions
  0.035931: sal
0.560051: dialogue infer 2
  0.014946: facts graph types
  0.019282: convert facts graph
    0.002573: to digraph
    0.016558: flatten types (530 concepts)
    0.000136: quantities
  0.000026: process dynamic rules
  0.521332: match
    0.521259: match
      0.003316: querygen
      0.299585: creating graph tensor (1192 nodes, 4382 edges)
        0.025369: setup
        0.235725: key tensor
        0.006552: target tensor
        0.030458: edge tensor
      0.000089: initializing solutions matrix
      0.217959: loop
      0.000017: postprocessing (MAX MEMORY: 0.870GB)
  0.002717: postprocess solutions
0.041017: apply inferences 2
  0.003901: apply
  0.000917: update types
  0.000217: operate
  0.035962: sal
0.008224: prepare template nlg
0.491621: template infer
  0.015046: facts graph types
  0.019512: convert facts graph
    0.002694: to digraph
    0.016670: flatten types (531 concepts)
    0.000134: quantities
  0.000024: process dynamic rules
  0.453695: match
    0.453621: match
      0.002951: querygen
      0.210171: creating graph tensor (1196 nodes, 4399 edges)
        0.025402: setup
        0.155043: key tensor
        0.006415: target tensor
        0.021851: edge tensor
      0.000087: initializing solutions matrix
      0.240097: loop
      0.000018: postprocessing (MAX MEMORY: 0.876GB)
  0.001577: postprocess solutions
0.001555: template fillers
0.000015: response sel
0.000097: response exp
0.000013: response rules
0.070256: response assembler
  0.000015: response assembly
  0.036229: update sal
  0.001410: decay sal
  0.032588: prune
    0.000015: setup
    0.000570: select keep
    0.000101: delete old spans
    0.023966: setup essentials
    0.006128: identify essentials
    0.001307: remove not keep

[3.93 s] Oh, awesome, that makes us two peas in a pod! What games do you like?

User: I like sims and pokemon
I like sims and pokemon
ARG REQUESTS: [('emora', 'request', 'wm5919', 'wm5948')]
TRUTH REQUESTS: []
CURRENT USER CONCEPTS: {'wm5963', 'wm5979', 'wm5956', 'wm5964', 'wm5958', 'pokemon', 'wm5955', 'wm5970', 'now', 'unknown_noun', 'wm5969', 'user', 'wm5974', 'unknown_other', 'wm5981', 'prp', 'wm5968'}
FRAGMENT REQUEST MERGES: [('wm5963', 'wm5919')]
ARG REQUESTS: []
TRUTH REQUESTS: []

React + Present Options:
	I love how many options there are for video games. Anyone can find something that they like. Multiplayer games are my personal favorite. Do you have a favorite genre of games? (s: 0.31, pr: 0.10)
	Oh, Pokémon ! I don't know too much about it, but I'll definitely look into it. What do you like about Pokémon ? (s: 0.44, pr: 0.10)
	Oh, I love Pokemon. I'll never forget spending hours levelling up my starter to the point that it could easily sweep all the gym leaders. It'll always have a special place in my heart. What do you like about Pokemon? (s: 0.40, pr: 0.50)


Present Options:


0.000074: next turn
0.000019: sentence caser
0.129227: elit
0.258342: parse2logic
  0.001783: facts graph types
  0.003089: convert facts graph
    0.000649: to digraph
    0.002388: flatten types (116 concepts)
    0.000040: quantities
  0.000021: process dynamic rules
  0.242714: match
    0.242637: match
      0.000358: querygen
      0.036033: creating graph tensor (152 nodes, 507 edges)
        0.002869: setup
        0.020560: key tensor
        0.001565: target tensor
        0.010892: edge tensor
      0.000081: initializing solutions matrix
      0.205855: loop
      0.000017: postprocessing (MAX MEMORY: 0.013GB)
  0.002374: postprocess solutions
0.000045: multiword mentions
0.000012: ner mentions
0.004709: mention bridge
0.008115: merge bridge
0.029750: knowledge pull
0.008158: reference id
0.424353: reference infer
  0.016650: facts graph types
  0.021764: convert facts graph
    0.003642: to digraph
    0.017963: flatten types (569 concepts)
    0.000141: quantities
  0.002111: process dynamic rules
  0.382073: match
    0.381997: match
      0.004710: querygen
      0.351352: creating graph tensor (1269 nodes, 4644 edges)
        0.027096: setup
        0.104992: key tensor
        0.191302: target tensor
        0.026351: edge tensor
      0.000092: initializing solutions matrix
      0.025616: loop
      0.000026: postprocessing (MAX MEMORY: 0.978GB)
  0.000008: postprocess solutions
0.000014: reference resolution
0.056655: fragment resolution
  0.000383: identify previous emora questions
  0.018042: find answer
  0.038212: sal
0.725258: dialogue infer
  0.016594: facts graph types
  0.021403: convert facts graph
    0.002964: to digraph
    0.018284: flatten types (568 concepts)
    0.000141: quantities
  0.000026: process dynamic rules
  0.682034: match
    0.681959: match
      0.003386: querygen
      0.457583: creating graph tensor (1301 nodes, 4792 edges)
        0.028244: setup
        0.394620: key tensor
        0.007552: target tensor
        0.025536: edge tensor
      0.000091: initializing solutions matrix
      0.220575: loop
      0.000018: postprocessing (MAX MEMORY: 1.039GB)
  0.003086: postprocess solutions
0.048128: apply inferences
  0.006533: apply
  0.001309: update types
  0.000191: operate
  0.040075: sal
0.007183: reference id 2
2.548872: reference infer 2
  0.017727: facts graph types
  0.021734: convert facts graph
    0.002836: to digraph
    0.018735: flatten types (593 concepts)
    0.000146: quantities
  0.002600: process dynamic rules
  2.504708: match
    2.504634: match
      0.005007: querygen
      2.458398: creating graph tensor (1324 nodes, 4852 edges)
        0.028535: setup
        2.387318: key tensor
        0.008626: target tensor
        0.032191: edge tensor
      0.000089: initializing solutions matrix
      0.040906: loop
      0.000029: postprocessing (MAX MEMORY: 1.067GB)
  0.000009: postprocess solutions
0.000014: reference resolution 2
0.040491: fragment resolution 2
  0.000398: identify previous emora questions
  0.040077: sal
0.812013: dialogue infer 2
  0.017668: facts graph types
  0.022190: convert facts graph
    0.003020: to digraph
    0.019010: flatten types (593 concepts)
    0.000146: quantities
  0.000026: process dynamic rules
  0.766884: match
    0.766815: match
      0.003538: querygen
      0.375144: creating graph tensor (1367 nodes, 5040 edges)
        0.029888: setup
        0.307364: key tensor
        0.007223: target tensor
        0.028924: edge tensor
      0.000090: initializing solutions matrix
      0.387664: loop
      0.000019: postprocessing (MAX MEMORY: 1.149GB)
  0.003104: postprocess solutions
0.045608: apply inferences 2
  0.004427: apply
  0.000676: update types
  0.000182: operate
  0.040304: sal
0.008705: prepare template nlg
1.473644: template infer
  0.017728: facts graph types
  0.022017: convert facts graph
    0.002878: to digraph
    0.018975: flatten types (593 concepts)
    0.000149: quantities
  0.000025: process dynamic rules
  1.429436: match
    1.429356: match
      0.003583: querygen
      1.112647: creating graph tensor (1367 nodes, 5040 edges)
        0.029949: setup
        1.042052: key tensor
        0.007849: target tensor
        0.030974: edge tensor
      0.000094: initializing solutions matrix
      0.312678: loop
      0.000019: postprocessing (MAX MEMORY: 1.149GB)
  0.002247: postprocess solutions
0.002336: template fillers
0.000015: responsea sel
0.000148: response exp
0.000014: response rules
0.082259: response assembler
  0.000015: response assembly
  0.040451: update sal
  0.001559: decay sal
  0.040219: prune
    0.000011: setup
    0.000649: select keep
    0.000112: delete old spans
    0.029597: setup essentials
    0.006452: identify essentials
    0.003098: remove not keep

[6.72 s] Oh, I love Pokemon. I'll never forget spending hours levelling up my starter to the point that it could easily sweep all the gym leaders. It'll always have a special place in my heart. What do you like about Pokemon?

User: