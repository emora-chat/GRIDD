time(upm/possess(user,m/meal()),z/datetime())
_exists(upm)
user_aware(upm)
-> user_has_meal ->
p:<p/property(m) time(p,z)>
request(emora,p)
;

time(upm/possess(user,m/meal()),z/datetime())
_exists(upm)
user_aware(upm)
->
uc:<uc/cook(user) at(uc,home) time(uc,always)>
request_truth(emora, uc)
;

time(prop_i/property(m/meal()),z/datetime())
_exists(prop_i)
req/request(emora, prop_i)
user_aware(req)
-> ask_meal_habit ->
uc:<uc/cook(user) at(uc,home) time(uc,always)>
request_truth(emora, uc)
;

f/food()
_exists(f)
_specific(f)
user_aware(f)
-> ask_if_favorite_food ->
ff:<ff/favorite(f)>
request_truth(emora,ff)
;

ff/favorite(f/food())
req/request_truth(emora,ff)
user_aware(req)
->
possess(emora,fd/food())
favorite(fd)
be(fd,ramen())
;

ff/favorite(f/food())
not(ff)
req/request_truth(emora,ff)
user_aware(req)
->
fd:<like(user,fd/food())>
request(emora,fd)
;

d/drink()
_exists(d)
user_aware(d)
-> ask_if_favorite_drink ->
fd:<fd/favorite(d)>
request_truth(emora,fd)
;

time(have(X/person(),Y/meal()),Z/datetime())
time(xef/eat(X,f/food()), Z)
for(xef, Y)
req/request(emora,f)
user_aware(req)
->
b:<b/be(user,fd/foodie())>
request_truth(emora,b)
;

xbf/be(x/person(),fd/foodie())
->
happy(emora,xbf)
be(emora,fd)
f:<like(x, f/food())>
request(emora,f)
;

uh/hungry(user)
->
sorry(emora,uh)
g:<time(g/intend_to_consume(user,f/food()), future) type(f,group)>
request_truth(emora, g)
;

time(g/intend_to_consume(user, f/food()), future)
not(g)
->
understand(emora,g)
he/hungry(emora)
ne/eat(emora,fd/food())
not(ne)
but(he,ne)
;

time(g/intend_to_consume(user, f/food()), future)
-> user_want_food ->
time(m/make(user,plan()), past)
op_more_info(f, g)
request(emora, f)
;

intend_to_consume(x/person(),cf/chinese_cuisine())
->
love(emora,cf)
ode:<
    at(ode/overall(dining_experience()),chinese(r/restaurant()))
    type(r,group)
>
like(emora,ode)
th:<
    chp/chinese(hp/hotpot())
    enjoy(emora,chp)
    th/intend_to_consume(x,hp)
    time(th,past)
>
request_truth(emora,th)
;

intend_to_consume(x/person(),hp/hotpot())
->
ebe/be(emora,expert())
of(ebe,hp)
;

th/intend_to_consume(x/person(),hp/hotpot())
not(th)
->
iex/invite(emora,x)
for(iex,hp)
;

intend_to_consume(x/person(),jf/japanese_cuisine())
->
delicious(jf)
ea/amazed(emora)
small(d/dish())
type(d,group)
delicate(d)
ebd/by(ea,d)
at(ebd,japanese(r/restaurant()))
type(r,group)
;

intend_to_consume(x/person(),kf/korean_cuisine())
->
favorite(emora,kb/korean_bbq())
xlk:<xlk/intend_to_consume(user,kb)>
request_truth(emora,xlk)
;

lk/intend_to_consume(x/person(),kb/korean_bbq())
->
bsr/best(short_rib())
in(bsr,kb)
ef/full(emora)
em/eat(emora,meat())
by(ef,em)
;

lk/intend_to_consume(x/person(),kb/korean_bbq())
not(lk)
->
understand(emora,lk)
smoky(kb)
eta/time(eat(emora,kb),always)
not(eta)
;

intend_to_consume(x/person(),mf/mexican_cuisine())
->
time(have(emora,mf2/mexican_cuisine()),past)
type(mf2,group)
ss:<ss/soft(shrimp)>
melt(ss)
tc:<tc/crispy(taco())>
good(tc)
;

mr/mexican_restaurant()
->
gtp/time(go(emora),past)
to(gtp,mr)
mf:<intend_to_consume(user,mf/mexican_cuisine())>
request(emora,mf)
;

ulm/intend_to_consume(user,mf/mexican_cuisine())
not(ulm)
->
understand(emora,ulm)
mfi/impressive(mf)
not(mfi)
;

cr/chinese_restaurant()
->
time(try(emora,hp/hotpot()),past)
ahp/authentic(hp)
da/different(ahp)
from(da,pandaexpress)
;

cs/coffee_shop()
->
ge/go(emora)
gts/to(ge,starbucks)
time(gts,always)
get(emora,coffee())
;

intend_to_consume(x/person(),tf/thai_cuisine())
->
smell(emora,tf)
swm/with(sr/sticky_rice(),mango())
delicious(swm)
;

intend_to_consume(x/person(),if/italian_cuisine())
->
of(speak(emora),if)
favorite(emora,p/pizza())
tuh:<
    hp/hawaiian(p)
    with(hp,pineapple_and_ham)
    type(pineapple,pineapple_and_ham)
    type(ham,pineapple_and_ham)
    tuh/time(try(user,hp),past)
>
request_truth(emora,tuh)
;

tuh/time(thp/try(user,hp/hawaiian(pizza())),past)
not(tuh)
->
should(user,thp)
;

tuh/time(try(user,hp/hawaiian(pizza())),past)
->
ulh/like(user,hp)
amazing(ulh)
rhe/remind(hp,emora)
of(rhe,baked(b/banana()))
type(b,group)
;

intend_to_consume(x/person(),sp/spaghetti())
->
spm/with(sp,meatball())
time(ecs/cook(emora,spm),often)
;

intend_to_consume(x/person(),ds/dessert())
->
sd/sweet_flavor(ds)
make(sd,happy(emora))
;

time(have(X/person(),Y/meal()),z/datetime())
->
f:<time(xef/eat(X,f/food()), z) for(xef, Y)>
request(emora,f)

emp/make(emora,p/plan())
type(p,group)
mkp/time(for(emp,Y),now)

egi/get(emora,i/idea())
type(i,group)
gif/from(egi,X)

cause(gif,mkp)
;

time(eat(X/person(),Y/meal()),z/datetime())
->
f:<time(xef/eat(X,f/food()), z) for(xef, Y)>
request(emora,f)

emp/make(emora,p/plan())
type(p,group)
mkp/time(for(emp,Y),now)

egi/get(emora,i/idea())
type(i,group)
gif/from(egi,X)

cause(gif,mkp)
;

time(get(X/person(),Y/meal()),z/datetime())
->
f:<time(xef/eat(X,f/food()), z) for(xef, Y)>
request(emora,f)

emp/make(emora,p/plan())
type(p,group)
mkp/time(for(emp,Y),now)

egi/get(emora,i/idea())
type(i,group)
gif/from(egi,X)

cause(gif,mkp)
;

g/intend_to_consume(x/person(),bg/burger())
->
fr:<fr/favorite(r/burger_restaurant())>
possess(x,fr)
request(emora,fr)
bfn/be(emora,fn/fan())
of(bfn,innout)
;

r/burger_restaurant()
->
know(emora,r)
;

g/intend_to_consume(x/person(),sw/sandwich())
->
fr:<fr/favorite(r/sandwich_restaurant())>
possess(x,fr)
request(emora,fr)
bfn/be(emora,fn/fan())
of(bfn,capriottis)
;

r/sandwich_restaurant()
->
know(emora,r)
;

ut/thirsty(user)
->
sorry(emora,ut)
important(keep(emora,hydrated(emora)))
g:<time(g/intend_to_consume(user, d/drinkable()), future) type(d,group)>
request_truth(emora, g)
;

time(g/intend_to_consume(user, d/drinkable()), future)
-> user_want_drink ->
time(m/make(user,plan()), past)
op_more_info(d, g)
request(emora, d)
;

time(g/intend_to_consume(user, d/drinkable()), future)
not(g)
->
understand(emora,g)
he/thirsty(emora)
ne/drink(emora, d2/drinkable())
not(ne)
but(he,ne)
;

intend_to_consume(x/person(),f/fruit())
->
gf/good(f)
gfh/for(gf,health())
sff/from(sugar(),f)
bs/bad(sff)
but(gfh,bs)
;

intend_to_consume(x/person(),sf/special_fruit())
->
sbv/be(sf,vegetable())
not(sbv)
;

intend_to_consume(x/person(),p/pie())
->
ht/have(emora,pecan_pie())
time(for(ht,thanksgiving),always)
;

intend_to_consume(x/person(),sf/seafood())
->
br/best(r/restaurant())
brs/for(br,sf)
in(brs,san_francisco)
;

intend_to_consume(x/person(),s/salmon())
->
good(s)
;

intend_to_consume(x/person(),t/tuna())
->
good(s/sandwich())
with(s,t)
perfect(tuna_and_mayo())
;

intend_to_consume(x/person(),v/vegetable())
->
ltv/time(like(emora,v2/vegetable()),past)
type(v2,group)
not(ltv)
;

intend_to_consume(x/person(),cf/coffee())
->
ese/start(emora,d/day())
with(ese,cf)
;

g/intend_to_eat(x/person(),o/unknown_noun())
->
bf/be(o,f/food())
op_more_info(o, g)
request(emora, f)
;

g/intend_to_consume(x/person(),w/water())
->
bd/best(d/drinkable())
be(w,bd)
;

g/intend_to_consume(x/person(),cd/common_drink())
->
intend_to_consume(emora, cd)
time(get(emora,cd),often)
;

g/intend_to_consume(x/person(),cf/common_food())
->
intend_to_consume(emora, cf)
time(get(emora,cf),often)
;

intend_to_consume(x/person(),m/milk())
->
provide(m,protein)
;

intend_to_consume(x/person(),sd/soda())
->
want(emora,sd)
type(sd,group)
have(emora,coke())
;

intend_to_consume(x/person(),j/jam())
->
gb/good(b/bread())
with(b,j)
for(gb,bf/breakfast())
;

g/intend_to_drink(x/person(),o/unknown_noun())
->
bd/be(o,d/drinkable())
op_more_info(o, g)
request(emora, d)
;

bx/bake(x/person())
->
eb/bake(emora)
relaxing(eb)
emc/make(emora,c/cookie())
type(c,group)
rxs/reduce(emc,stress())
ga:<bxx/bake(user) ga/good_at(user,bxx)>
request_truth(emora,ga)
;

bx/bake(x/person())
ga/good_at(x,bx)
->
el/learn(emora)
from(el,x)
;

bx/bake(x/person())
ga/good_at(x,bx)
not(ga)
->
comfort(emora,x)
el/learn(emora)
with(el,x)
;

cook(x/person())
->
like(emora,cook(emora))
f:<mxf/make(x,f/food()) for(mxf,thanksgiving)>
request(emora,f)
;

mxf/make(x/person(),un/unknown_noun())
for(mxf,thanksgiving)
->
ek/know(emora,un)
not(ek)
se/search(emora)
sfu/for(se,un)
time(sfu,future)
;

mxf/make(x/person(),f/food())
for(mxf,thanksgiving)
->
good(f)
emt/make(emora,turkey())
for(emt,thanksgiving)
;

emt/make(emora,t/turkey())
for(emt,thanksgiving)
user_aware(emt)
->
fried(t)
;

make(x/person(),t/turkey())
for(d/dinner(),thanksgiving)
type(d,group)
->
bt/best(t)
for(bt,thanksgiving)
;

time(g/go(x/person()),z/datetime())
gtl/to(g,r/restaurant())
->
o:<time(qf/qualifier(f/food(),o/object()),z) at(f,r)>
request(emora,o)
;

g/go(x/person())
gtl/to(g,un/unknown_noun())
for(gtl,m/meal())
->
blr:<blr/be(un,r/restaurant())>
request_truth(emora,blr)
;

g/go(x/person())
gtl/to(g,l/location())
for(gtl,c/consumable())
->
blr:<blr/be(l,r/restaurant())>
request_truth(emora,blr)
;

delicious(o/object())
->
glad(emora)
time(take(emora,note()),future)
time(try(emora,o),future)
;

delicious(c/consumable())
->
time(have(emora,c),past)
;

co/crispy(o/object())
->
ttf:<ttf/time(try(emora,co),future)>
look_forward(emora,ttf)
;

co/crispy(c/consumable())
->
re/remind(user,emora)
ce:<ce/crispy(cereal())>
of(re,ce)
;

spicy(o/object())
->
fc/fried(chicken())
fit/in(fc,tennessee)
spicy(fit)
;

so/salty(o/object())
->
ebf/be(emora,fn/fan())
ns/of(ebf,so)
not(ns)
;

sour(o/object())
->
so2/sour(o2/object())
type(o2,group)
ebf/be(emora,fn/fan())
ns/of(ebf,so2)
not(ns)
;

bo/bitter(o/object())
->
elb/intend_to_consume(emora,bo)
not(elb)
so/sweet_flavor(o2/object())
he/happy(emora)
make(so,he)
;

so/sweet_flavor(o/object())
->
intend_to_consume(emora,so)
intend_to_consume(emora,dessert())
;

xc/cook(x/person())
not(xc)
->
eg/go(emora)
to(eg,r/restaurant())
type(r,group)
like(emora,eg)
;

/* Common Sense */

g/get(x/person(), c/consumable())
->
intend_to_consume(x,c)
;

g/eat(x/person(), c/consumable())
->
intend_to_consume(x,c)
;

g/have(x/person(), c/consumable())
->
intend_to_consume(x,c)
;

g/drink(x/person(), c/consumable())
->
intend_to_consume(x,c)
;

like(x/person(), c/consumable())
->
intend_to_consume(x,c)
;

want(x/person(), c/consumable())
->
intend_to_consume(x,c)
;

g/eat(x/person(), o/unknown_noun())
->
intend_to_eat(x,o)
;

g/get(x/person(), o/unknown_noun()) for(g,m/meal())
->
intend_to_eat(x,o)
;

g/have(x/person(), o/unknown_noun()) for(g,m/meal())
->
intend_to_eat(x,o)
;

g/drink(x/person(), o/unknown_noun())
->
intend_to_drink(x,o)
;

xc/cook(x/person()) like(x,xc)
->
cook(x)
;

xc/bake(x/person()) like(x,xc)
->
bake(x)
;

make(x/person(),f/food())
->
cook(x)
;