have(user, l/life())
->
have(emora,life())
c:<c/change(pandemic(), l)>
request_truth(emora, c)
l2:<have(user, w1/job())
c2/change(pandemic(), w1)
qualifier(c2, remote_work())
l2/like(user, c2)>
request_truth(emora, l2)
;

have(user, w1/job())
c/change(pandemic(), w1)
qualifier(c, remote_work())
l/like(user, c)
->
temppred(l)
;

have(user, w1/job())
c/change(pandemic(), w1)
qualifier(c, remote_work())
l/like(user, c)
eturn(l, 2)
->
m:<time(m/more(like(user, outdoor_activity())),now)>
request_truth(emora, m)
;

have(user, w1/job())
c/change(pandemic(), w1)
qualifier(c, remote_work())
not(l/like(user, c))
eturn(l, 3)
->
m:<time(m/more(like(user, outdoor_activity())),now)>
request_truth(emora, m)
;

have(user, w1/job())
c/change(pandemic(), w1)
qualifier(c, remote_work())
l/like(user, c)
req_sat(request_truth(emora, l))
->
m:<time(m/more(like(user, outdoor_activity())),now)>
request_truth(emora, m)
;


have(user, w1/job())
c/change(pandemic(), w1)
qualifier(c, remote_work())
maybe(l/like(user, c))
eturn(l, 3)
->
m:<time(m/more(like(user, outdoor_activity())),now)>
request_truth(emora, m)
;

m/more(like(user, outdoor_activity()))
not(m)
->
r:<r/reason(m)>
request(emora, r)
object_1:<possess(user, life_0/life())
change_0/change(pandemic(), life_0)
qualifier(change_0, object_1/object())>
r2/request(emora, object_1)
;


m/more(like(user, outdoor_activity()))
_exists(m)
user_aware(m)
->
object_1:<possess(user, life_0/life())
change_0/change(pandemic(), life_0)
qualifier(change_0, object_1/object())>
r/request(emora, object_1)
;

m/more(like(user, outdoor_activity()))
user_aware(m)
->
object_1:<possess(user, life_0/life())
change_0/change(pandemic(), life_0)
qualifier(change_0, object_1/object())>
r/request(emora, object_1)
;

possess(user, life_0/life())
change_0/change(pa/pandemic(), life_0)
qualifier(change_0, object_1/object())
r/request(emora, object_1)
req_sat(r)
user_aware(r)
->
ch/change(pa, world)
guess(emora, ch)
;

possess(user, life_0/life())
change_0/change(pa/pandemic(), life_0)
qualifier(change_0, object_1/object())
r/request(emora, object_1)
req_unsat(r)
user_aware(r)
->
ch/change(pa, world)
guess(emora, ch)
;

ch/change(pa/pandemic(), world)
user_aware(g/guess(emora, ch))
->
born(emora, pa)
;


/* For Mack's transition rule */
like(user, pandemic())
->
_pr(_high)
c:<have(user, l/life()) c/change(pandemic(), l)>
request_truth(emora, c)
;


m/more(like(user, outdoor_activity()))
_exists(m)
user_aware(m)
eturn(m, 3)
->
object_1:<possess(user, life_0/life())
change_0/change(pandemic(), life_0)
qualifier(change_0, object_1/object())>
r/request(emora, object_1)
;